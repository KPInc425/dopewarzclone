(()=>{"use strict";var e={917:(e,n,r)=>{r.d(n,{Z:()=>l});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([e.id,"/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} ","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;CAMC;;AAED;;;;;;;;;;;;IAYI,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;;IAEI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,oBAAoB;AACxB;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;AACpB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,QAAQ;IACR,4BAA4B;IAC5B,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} "],sourceRoot:""}]);const l=i},28:(e,n,r)=>{r.d(n,{Z:()=>l});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([e.id,"html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 80%;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3, h5 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}\r\n\r\n.inventoryLabelContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,oCAAoC;IACpC,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,wBAAwB;IACxB,mBAAmB;AACvB;;AAEA;IACI,+CAA+C;IAC/C,6BAA6B;IAC7B,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,gBAAgB;IAChB,kBAAkB;IAClB;yBACqB;IACrB,sBAAsB;AAC1B;AACA;IACI,+CAA+C;IAC/C,aAAa;IACb,kCAAkC;IAClC,wBAAwB;IACxB,YAAY;IACZ,uBAAuB;;AAE3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;;AAE3B;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;;AAEf;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,WAAW;AACf;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA,cAAc;AACd;IACI,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B",sourcesContent:["html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 80%;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3, h5 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}\r\n\r\n.inventoryLabelContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);t&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var o={},i=[],l=0;l<e.length;l++){var c=e[l],s=t.base?c[0]+t.base:c[0],d=o[s]||0,A="".concat(s," ").concat(d);o[s]=d+1;var p=r(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=a(u,t);t.byIndex=l,n.splice(l,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function a(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,a){var o=t(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=r(o[i]);n[l].references--}for(var c=t(e,a),s=0;s<o.length;s++){var d=r(o[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var a=n[t];if(void 0!==a)return a.exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,r),o.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{var e=r(379),n=r.n(e),t=r(795),a=r.n(t),o=r(569),i=r.n(o),l=r(565),c=r.n(l),s=r(216),d=r.n(s),A=r(589),p=r.n(A),u=r(917),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),n()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;var y=r(28),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),n()(y.Z,m),y.Z&&y.Z.locals&&y.Z.locals;const h=e=>{document.getElementById("currentLocation").innerText=e},C=new Intl.NumberFormat({style:"currency"}),v=(e,n)=>{const r=document.getElementById(e);let t=C.format(n);r.textContent=`$${t}`},f=e=>{document.getElementById("healthDisplay").innerText=`${e}hp`},b=(e,n,r,t)=>({name:e,quantity:r,price:n,quality:t,info:()=>{console.log({name:e,quantity:r,price:n})}});let I=[];const B=[{name:"Cannabis Flower",price:10},{name:"Cannabis Extract",price:30},{name:"Acid",price:15},{name:"Cocaine",price:120},{name:"Crack",price:70},{name:"Heroin",price:95},{name:"Methamphetamine",price:50}],k=(...e)=>{let n=[];return B.forEach((r=>{let t,a=Math.floor(100*Math.random()),o=e[0]||100,i=e[1]||1,l=e[2]||0,c=1+.1*l;t=a>(50-l||50)?Math.floor(r.price+Math.floor(20*Math.random())/100*r.price):Math.floor(r.price-Math.floor(20*Math.random())/100*r.price);let s=Math.floor(Math.random()*o*i*c);n.push(b(r.name,t,s))})),n},x=e=>{I.forEach((n=>{n.name===e.name&&(console.log(n),n.quantity=e.quantity)}))},w=e=>{I=e},E=(e,n)=>{let r=(e.price*e.quantity+n.price*n.quantity)/(e.quantity+n.quantity);return console.log(`AveragePrice: ${r}`),r=Math.round(r),r};let N;const P=()=>N,q=()=>{const e=P();document.getElementById("inventoryAmtLabel").textContent=`${e.playerData.currentNumOfItems}/${e.playerData.maxItems}`},D=e=>{console.log(e);let n=P(),r=(()=>{let e=P(),n=0;for(let r of e.playerData.playerInventory)n+=r.quantity;return n})();if(console.log(`Items Held: ${r}g's`),r>=n.playerData.maxItems)return alert("Your pockets are already bulgin buddy, come back when you have some room."),console.log("You ain't got no more pockets!"),0;if(r+e.quantity>n.playerData.maxItems){let t=r+e.quantity-n.playerData.maxItems;alert(`You overstuffed your pockets, getting a lil greedy there... You dropped ${t}g's of ${e.name}`),console.log(`You dropped ${t}g's of ${e.name}`),e.quantity=n.playerData.maxItems-r,n.playerData.lostDrugs.push(b(e.name,e.price,t,e.quality))}for(let r of n.playerData.playerInventory)if(console.log(r),r.name===e.name)return console.log(r.quantity),r.quantity+=e.quantity,console.log(r.quantity),r.price=E(r,e),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems+=e.quantity,q(),1;return"Nothing Here"==n.playerData.playerInventory[0].name&&n.playerData.playerInventory.pop(),n.playerData.playerInventory.push(b(e.name,e.price,e.quantity,e.quality)),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems+=e.quantity,q(),1},L=(e,n)=>e+n,R=e=>{let n=P();console.log(e);let r=(e=>{let n=P();for(let[r,t]of n.playerData.playerInventory.entries())if(console.log(t),t.name==e.name)return console.log("Item found"),{name:t.name,index:r};return console.log("Item not found."),null})(e);if(console.log(n.playerData.playerInventory),null===r)return alert("You reach into your pockets and realize you've made a mistake..."),console.log("You don't own this item."),0;let t=r.index,a=n.playerData.playerInventory[t];return a.quantity-e.quantity<0?(console.log(`You do not have enough for this transactions. You have ${a.quantity}g's left...`),0):a.quantity-e.quantity==0?(console.log("vvv Player Inventory vvv"),console.log(n.playerData.playerInventory),n.playerData.playerInventory.splice(t,1),console.log("vvv Player Inventory vvv"),n.playerData.currentNumOfItems-=e.quantity,n.playerData.currentNumOfItems<1&&n.playerData.playerInventory.push(b("Nothing Here",0,0,0)),1):(console.log(`Item Quantity: ${a.quantity}`),a.quantity-=e.quantity,console.log(`Item Quantity: ${a.quantity}`),n.playerData.currentNumOfItems-=e.quantity,1)},Q=(e,n,r)=>{const t=document.getElementById("gameContainer"),a=document.createElement("div");a.classList.add("containerBuySellProduct");const o=document.createElement("div");o.classList.add("buySellUIHeader");const i=document.createElement("h2");i.textContent=`${e} at $${r}/g`;const l=document.createElement("button");l.classList.add("btnCancel"),l.textContent="X",o.appendChild(i),o.appendChild(l),a.appendChild(o);const c=document.createElement("div");c.classList.add("gridBuySell");const s=document.createElement("p");s.classList.add("labelTotalCost"),s.textContent="$0";const d=document.createElement("p");d.classList.add("labelTotalGain"),d.textContent="$0";const A=document.createElement("input");A.type="number",A.min=1,A.value=1,A.max=(e=>{for(let n of I)if(n.name===e)return n.quantity})(e);const p=document.createElement("input");p.type="number",p.min=1,p.value=1;let u=(e=>{console.log(e),console.log(N.playerData.playerInventory);for(let n of N.playerData.playerInventory)if(console.log(n),n.name===e)return n.quantity;return 0})(e);p.max=u,0===u&&(p.min=0,p.value=0);const g=document.createElement("button");g.classList.add("btnBuy"),g.textContent="Buy";const y=document.createElement("button");y.classList.add("btnSell"),y.textContent="Sell",c.appendChild(s),c.appendChild(d),c.appendChild(A),c.appendChild(p),c.appendChild(g),c.appendChild(y),a.appendChild(c),t.appendChild(a),A.addEventListener("change",(()=>{s.textContent="$"+A.value*r})),p.addEventListener("change",(()=>{d.textContent="$"+p.value*r})),l.addEventListener("click",(()=>{a.remove()})),g.addEventListener("click",(()=>{let n=b(e,parseInt(r),parseInt(A.value));console.log(n),((e,n,r)=>{let t=P();n=n||"Local Dealer",r=r||5;let a=e.price*e.quantity;if(a>t.playerData.cashOnHand)console.log("Too Broke!"),alert("Too Broke!");else{const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let o=parseInt(n.textContent-e.quantity);if(console.log(o),D(e)){let i=b(e.name,e.price,o,r);x(i),n.textContent=i.quantity,t.playerData.cashOnHand=L(t.playerData.cashOnHand,-a),v("cashDisplay",t.playerData.cashOnHand)}H()}})(n),a.remove()})),y.addEventListener("click",(()=>{let n=b(e,parseInt(r),parseInt(p.value));console.log(n),((e,n,r,t)=>{let a=P(),o=e.price*e.quantity;if(console.log(e),1==R(e)){const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let r=parseInt(n.textContent)+e.quantity;return console.log(r),n.textContent=r,x(e),a.playerData.cashOnHand=L(a.playerData.cashOnHand,o),v("cashDisplay",a.playerData.cashOnHand),H(),1}alert("How you gonna sell me something you ain't got mayne?"),alert("You get sucker punched in the back of the head and...black...out..."),a.changeHealth(-5),f(a.playerData.health),console.log("You don't have this to sell!")})(n),a.remove()}))},S=()=>{let e=I;const n=document.querySelector(".availableProductContainer");n.innerHTML="",e.forEach((e=>{let r=document.createElement("div");r.classList.add("productGrid"),0==e.quantity&&r.classList.add("hidden"),r.classList.add("availableProductData"),r.classList.add(`container${e.name.replace(" ","")}`);let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,t.appendChild(a),r.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),r.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=e.price,l.appendChild(c),r.appendChild(l),n.appendChild(r)})),document.querySelectorAll(".availableProductData").forEach((e=>{e.addEventListener("click",(()=>{let n=e.querySelector(".productName > p").textContent,r=(e.querySelector(".productQty > p").textContent,e.querySelector(".productPrice > p").textContent);Q(n,0,r)}))}))},H=()=>{let e=P();const n=document.querySelector(".productOnHandContainer");n.innerHTML="",e.playerData.playerInventory.forEach((e=>{let r=document.createElement("div");r.classList.add("productGrid"),r.classList.add("playerInventoryData");let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,t.appendChild(a),r.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),r.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=e.price,l.appendChild(c),r.appendChild(l),n.appendChild(r)}))},T=[{cityName:"New York City, NY",cityDescription:"The Big Apple, where all the Wallstreet money is \n                            powdered coated and the ludes werent't left in \n                            the 80's",cityControl:"Unknown",locationsLocal:[{locationName:"Bronx",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Queens",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Central Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Manhattan",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Coney Island",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brooklyn",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Los Angeles, CA",cityDescription:"Home to celebrities, artists and free spirits, \n                            Los Angeles never stops attracting people from \n                            every corner of the globe. This cosmopolitan \n                            city offers a hub for the entertainment industry \n                            and easy access to the beach and those interested\n                            in Candi!",cityControl:"Unknown",locationsLocal:[{locationName:"Hollywood",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Hollywood",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Beverly Hills",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"The Beaches",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Pasadena",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Chicago, IL",cityDescription:"The city is famous for its iconic architecture and \n                            beautiful skyline. Those cold, bitter winters in Chicago\n                            make the need for Fire dire!",cityControl:"Unknown",locationsLocal:[{locationName:"Humboldt Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Garfield Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Loop",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Old Town",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Roscoe Village",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Lincoln Park",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Houston, TX",cityDescription:"Houston’s stable job market, diverse economy and livable \n                            neighborhoods make the Texas city a popular choice for \n                            young professionals. The night life is alive and well,\n                            and so are the party favors that go with it.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Spring",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Fort Bend",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brazoria",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Galveston",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Lake Houston",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Pheonix, AZ",cityDescription:"Surrounded by desert mountains and numerous hiking trails,\n                            Phoenix is the perfect place to live for those who love \n                            spending time in the great outdoors getting 'attune' with\n                            nature",cityControl:"Unknown",locationsLocal:[{locationName:"Paradise Valley",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Mesa",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Glendale",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Peoria",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Apache Junction",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Scottsdale",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Philadelphia, PA",cityDescription:"Besides being one of the most historically significant \n                            cities in the country, Philadelphia offers a hip arts \n                            scene, multiple music venues and plenty of trendy \n                            restaurants, the Hipsters are into 'desiners if you \n                            know what I mean.'",cityControl:"Unknown",locationsLocal:[{locationName:"Chestnut Hill",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Roxborough",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Mount Airy",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"East Falls",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"German Town",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Oak Lane",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Jacksonville, FL",cityDescription:"Jacksonville, perfectly positioned along the Atlantic \n                            Ocean in Northeast Florida, is a natural paradise for \n                            visitors looking for an 'affordable' yet luxurious \n                            destination, with all the 'ammenities'.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Springfield",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Eastside",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Sports Complex",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Fairfield",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brentwood",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Seattle, WA",cityDescription:"The CHAZ Zone has been indefinitely extended for your \n                            market, Visit Pike Place and the Pier to find plenty\n                            of similar fellows and those willing to invest to \n                            new ideas and 'Start-Ups'",cityControl:"Unknown",locationsLocal:[{locationName:"North Gate",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Green Lake",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"University District",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Capitol Hill",avgQuality:0,priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Sodo",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Magnolia",avgQuality:"",priceRanking:"",services:"",policePresence:""}]}],Y=e=>{const n=document.querySelectorAll(".locationContainer button"),r=(e=>{for(let n of T)if(n.cityName==e)return n})(e);let t=0;n.forEach((e=>{e.textContent=r.locationsLocal[t].locationName,e.id=r.locationsLocal[t].locationName.replace(" ",""),e.addEventListener("click",(()=>{(e=>{let n=P();if(n.playerData.currentLocal==e)return console.log("You are already here!"),0;console.log("You are getting ready to travel."),console.log("Hope everything goes well..."),console.log("~Checking for Random Event~"),alert("You are getting ready to travel."),alert("Hope everything goes well..."),alert("~Checking for Random Event~"),console.log("Looks like it's gonna be smooth sailing!"),alert("Looks like it's gonna be smooth sailing!"),console.log(`Successful travel to ${e}`),alert(`Successful travel to ${e}`),n.playerData.currentLocal=e;let r=k();w(r),S(),h(e)})(e.textContent)})),t++}))},U=()=>{((...e)=>{e.length<1&&(N=((...e)=>{let n={name:e[0]||"That Dope Guy",currentDay:e[1]||1,maxDays:e[2]||30,cashOnHand:e[3]||2e3,bankAccount:e[4]||0,debt:e[5]||2500,guns:e[6]||[],health:e[7]||100,maxItems:e[8]||100,currentNumOfItems:e[9]||0,lostDrugs:e[10]||[],luckLevel:e[11]||1,currentLocationCity:e[12]||"Seattle, WA",currentLocal:e[13]||"Capitol Hill",currentTransportMethod:e[14]||"on the Bus",playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]};return{playerData:n,changeHealth:e=>{n.health+=e,console.log(`Player Health: ${n.health}`)},playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]}})())})();let e=P();const n=k();var r;w(n),alert("What is up my new friend!? I have heard good things, or we wouldn't be conversating here at the moment, would we?"),alert("Well, if we're getting down to business... I don't touch the stuff my self, but I know a guy and I have this stack of cash here to get you started. Hit up the local dealer and pick up the supplies needed to start your empire my friend! Sky's the limit and the only color we see is GREEEN!!"),h(e.playerData.currentLocal),r=e.playerData.currentTransportMethod,document.getElementById("currentTransportMethod").innerText=r,Y(e.playerData.currentLocationCity),v("cashDisplay",e.playerData.cashOnHand),v("bankDisplay",e.playerData.bankAccount),v("debtDisplay",e.playerData.debt),f(e.playerData.health),S(),H(),q()};console.log("Testing..."),document.getElementById("btnNewGame").addEventListener("click",(()=>{U()}),{once:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,