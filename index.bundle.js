(()=>{"use strict";var e={917:(e,n,r)=>{r.d(n,{Z:()=>l});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([e.id,"/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} ","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;CAMC;;AAED;;;;;;;;;;;;IAYI,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;;IAEI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,oBAAoB;AACxB;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;AACpB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,QAAQ;IACR,4BAA4B;IAC5B,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} "],sourceRoot:""}]);const l=i},28:(e,n,r)=>{r.d(n,{Z:()=>l});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([e.id,"html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 90%;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3, h5 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}\r\n\r\n.inventoryLabelContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,oCAAoC;IACpC,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,wBAAwB;IACxB,mBAAmB;AACvB;;AAEA;IACI,+CAA+C;IAC/C,6BAA6B;IAC7B,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,gBAAgB;IAChB,kBAAkB;IAClB;yBACqB;IACrB,sBAAsB;AAC1B;AACA;IACI,+CAA+C;IAC/C,aAAa;IACb,kCAAkC;IAClC,wBAAwB;IACxB,YAAY;IACZ,uBAAuB;;AAE3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;;AAE3B;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;;AAEf;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,WAAW;AACf;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA,cAAc;AACd;IACI,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B",sourcesContent:["html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 90%;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3, h5 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}\r\n\r\n.inventoryLabelContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);t&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var o={},i=[],l=0;l<e.length;l++){var c=e[l],s=t.base?c[0]+t.base:c[0],d=o[s]||0,A="".concat(s," ").concat(d);o[s]=d+1;var p=r(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=a(u,t);t.byIndex=l,n.splice(l,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function a(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,a){var o=t(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=r(o[i]);n[l].references--}for(var c=t(e,a),s=0;s<o.length;s++){var d=r(o[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var a=n[t];if(void 0!==a)return a.exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,r),o.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{var e=r(379),n=r.n(e),t=r(795),a=r.n(t),o=r(569),i=r.n(o),l=r(565),c=r.n(l),s=r(216),d=r.n(s),A=r(589),p=r.n(A),u=r(917),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),n()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;var y=r(28),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),n()(y.Z,m),y.Z&&y.Z.locals&&y.Z.locals;const h=e=>{document.getElementById("currentLocation").innerText=e},C=new Intl.NumberFormat({style:"currency"}),v=(e,n)=>{const r=document.getElementById(e);let t=C.format(n);r.textContent=`$${t}`},f=e=>{document.getElementById("healthDisplay").innerText=`${e}hp`},I=(e,n,r,t)=>({name:e,quantity:r,price:n,quality:t,info:()=>{console.log({name:e,quantity:r,price:n})}});let b=[];const B=[{name:"Cannabis Flower",price:10},{name:"Cannabis Extract",price:30},{name:"Acid",price:15},{name:"Cocaine",price:120},{name:"Crack",price:70},{name:"Heroin",price:95},{name:"Methamphetamine",price:50}],k=(...e)=>{let n=[];return B.forEach((r=>{let t,a=Math.floor(100*Math.random()),o=e[0]||100,i=e[1]||1,l=e[2]||0,c=1+.1*l;t=a>(50-l||50)?Math.floor(r.price+Math.floor(20*Math.random())/100*r.price):Math.floor(r.price-Math.floor(20*Math.random())/100*r.price);let s=Math.floor(Math.random()*o*i*c);n.push(I(r.name,t,s))})),n},x=e=>{b.forEach((n=>{n.name===e.name&&(console.log(n),n.quantity=e.quantity)}))},w=e=>{b=e},E=(e,n)=>{let r=(e.price*e.quantity+n.price*n.quantity)/(e.quantity+n.quantity);return console.log(`AveragePrice: ${r}`),r=Math.round(r),r},P=()=>{const e=N();document.getElementById("inventoryAmtLabel").textContent=`${e.playerData.currentNumOfItems}/${e.playerData.maxItems}`};let q;const N=()=>q,D=e=>{console.log(e);let n=N(),r=(()=>{let e=N(),n=0;for(let r of e.playerData.playerInventory)n+=r.quantity;return n})();if(console.log(`Items Held: ${r}g's`),r>=n.playerData.maxItems)return alert("Your pockets are already bulgin buddy, come back when you have some room."),console.log("You ain't got no more pockets!"),0;if(r+e.quantity>n.playerData.maxItems){let t=r+e.quantity-n.playerData.maxItems;alert(`You overstuffed your pockets, getting a lil greedy there... You dropped ${t}g's of ${e.name}`),console.log(`You dropped ${t}g's of ${e.name}`),e.quantity=n.playerData.maxItems-r,n.playerData.lostDrugs.push(I(e.name,e.price,t,e.quality))}for(let r of n.playerData.playerInventory)if(console.log(r),r.name===e.name)return console.log(r.quantity),r.quantity+=e.quantity,console.log(r.quantity),r.price=E(r,e),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems+=e.quantity,P(),1;return"Nothing Here"==n.playerData.playerInventory[0].name&&n.playerData.playerInventory.pop(),n.playerData.playerInventory.push(I(e.name,e.price,e.quantity,e.quality)),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems+=e.quantity,P(),1},L=(e,n)=>e+n,R=e=>{let n=N();console.log(e);let r=(e=>{let n=N();for(let[r,t]of n.playerData.playerInventory.entries())if(console.log(t),t.name==e.name)return console.log("Item found"),{name:t.name,index:r};return console.log("Item not found."),null})(e);if(console.log(n.playerData.playerInventory),null===r)return alert("You reach into your pockets and realize you've made a mistake..."),console.log("You don't own this item."),0;let t=r.index,a=n.playerData.playerInventory[t];return a.quantity-e.quantity<0?(console.log(`You do not have enough for this transactions. You have ${a.quantity}g's left...`),0):a.quantity-e.quantity==0?(console.log("vvv Player Inventory vvv"),console.log(n.playerData.playerInventory),n.playerData.playerInventory.splice(t,1),console.log("vvv Player Inventory vvv"),n.playerData.currentNumOfItems-=e.quantity,n.playerData.currentNumOfItems<1&&n.playerData.playerInventory.push(I("Nothing Here",0,0,0)),1):(console.log(`Item Quantity: ${a.quantity}`),a.quantity-=e.quantity,console.log(`Item Quantity: ${a.quantity}`),n.playerData.currentNumOfItems-=e.quantity,1)},Q=(e,n,r)=>{const t=document.getElementById("gameContainer"),a=document.createElement("div");a.classList.add("containerBuySellProduct");const o=document.createElement("div");o.classList.add("buySellUIHeader");const i=document.createElement("h2");i.textContent=`${e} at $${r}/g`;const l=document.createElement("button");l.classList.add("btnCancel"),l.textContent="X",o.appendChild(i),o.appendChild(l),a.appendChild(o);const c=document.createElement("div");c.classList.add("gridBuySell");const s=document.createElement("p");s.classList.add("labelTotalCost"),s.textContent="$0";const d=document.createElement("p");d.classList.add("labelTotalGain"),d.textContent="$0";const A=document.createElement("input");A.type="number",A.min=1,A.value=1,A.max=(e=>{for(let n of b)if(n.name===e)return n.quantity})(e);const p=document.createElement("input");p.type="number",p.min=1,p.value=1;let u=(e=>{console.log(e),console.log(q.playerData.playerInventory);for(let n of q.playerData.playerInventory)if(console.log(n),n.name===e)return n.quantity;return 0})(e);p.max=u,0===u&&(p.min=0,p.value=0);const g=document.createElement("button");g.classList.add("btnBuy"),g.textContent="Buy";const y=document.createElement("button");y.classList.add("btnSell"),y.textContent="Sell",c.appendChild(s),c.appendChild(d),c.appendChild(A),c.appendChild(p),c.appendChild(g),c.appendChild(y),a.appendChild(c),t.appendChild(a),A.addEventListener("change",(()=>{s.textContent="$"+A.value*r})),p.addEventListener("change",(()=>{d.textContent="$"+p.value*r})),l.addEventListener("click",(()=>{a.remove()})),g.addEventListener("click",(()=>{let n=I(e,parseInt(r),parseInt(A.value));console.log(n),((e,n,r)=>{let t=N();n=n||"Local Dealer",r=r||5;let a=e.price*e.quantity;if(a>t.playerData.cashOnHand)console.log("Too Broke!"),alert("Too Broke!");else{const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let o=parseInt(n.textContent-e.quantity);if(console.log(o),D(e)){let i=I(e.name,e.price,o,r);x(i),n.textContent=i.quantity,t.playerData.cashOnHand=L(t.playerData.cashOnHand,-a),v("cashDisplay",t.playerData.cashOnHand)}H()}})(n),a.remove()})),y.addEventListener("click",(()=>{let n=I(e,parseInt(r),parseInt(p.value));console.log(n),((e,n,r,t)=>{let a=N(),o=e.price*e.quantity;if(console.log(e),1==R(e)){const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let r=parseInt(n.textContent)+e.quantity;return console.log(r),n.textContent=r,x(e),a.playerData.cashOnHand=L(a.playerData.cashOnHand,o),v("cashDisplay",a.playerData.cashOnHand),H(),1}alert("How you gonna sell me something you ain't got mayne?"),alert("You get sucker punched in the back of the head and...black...out..."),a.changeHealth(-5),f(a.playerData.health),console.log("You don't have this to sell!")})(n),a.remove()}))},S=()=>{let e=b;const n=document.querySelector(".availableProductContainer");n.innerHTML="",e.forEach((e=>{let r=document.createElement("div");r.classList.add("productGrid"),0==e.quantity&&r.classList.add("hidden"),r.classList.add("availableProductData"),r.classList.add(`container${e.name.replace(" ","")}`);let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,t.appendChild(a),r.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),r.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=e.price,l.appendChild(c),r.appendChild(l),n.appendChild(r)})),document.querySelectorAll(".availableProductData").forEach((e=>{e.addEventListener("click",(()=>{let n=e.querySelector(".productName > p").textContent,r=(e.querySelector(".productQty > p").textContent,e.querySelector(".productPrice > p").textContent);Q(n,0,r)}))}))},H=()=>{let e=N();const n=document.querySelector(".productOnHandContainer");n.innerHTML="",e.playerData.playerInventory.forEach((e=>{let r=document.createElement("div");r.classList.add("productGrid"),r.classList.add("playerInventoryData");let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,t.appendChild(a),r.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),r.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=e.price,l.appendChild(c),r.appendChild(l),n.appendChild(r)})),(()=>{const e=N();document.querySelectorAll(".productOnHandContainer").forEach((n=>{n.addEventListener("click",(r=>{r.stopImmediatePropagation(),console.log("click"),console.log(n);let t=n.querySelector(".productName > p").textContent;console.log(t);let a=n.querySelector(".productQty > p").textContent;console.log(a);let o=n.querySelector(".productPrice > p").textContent;console.log(o),confirm("Do you want to dump?")&&(e.dumpProduct(t),P(),H())}))}))})()},T=[{cityName:"New York City, NY",cityDescription:"The Big Apple, where all the Wallstreet money is \n                            powdered coated and the ludes werent't left in \n                            the 80's",cityControl:"Unknown",locationsLocal:[{locationName:"Bronx",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Queens",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Central Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Manhattan",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Coney Island",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brooklyn",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Los Angeles, CA",cityDescription:"Home to celebrities, artists and free spirits, \n                            Los Angeles never stops attracting people from \n                            every corner of the globe. This cosmopolitan \n                            city offers a hub for the entertainment industry \n                            and easy access to the beach and those interested\n                            in Candi!",cityControl:"Unknown",locationsLocal:[{locationName:"Hollywood",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Hollywood",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Beverly Hills",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"The Beaches",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Pasadena",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Chicago, IL",cityDescription:"The city is famous for its iconic architecture and \n                            beautiful skyline. Those cold, bitter winters in Chicago\n                            make the need for Fire dire!",cityControl:"Unknown",locationsLocal:[{locationName:"Humboldt Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Garfield Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Loop",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Old Town",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Roscoe Village",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Lincoln Park",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Houston, TX",cityDescription:"Houston’s stable job market, diverse economy and livable \n                            neighborhoods make the Texas city a popular choice for \n                            young professionals. The night life is alive and well,\n                            and so are the party favors that go with it.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Spring",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Fort Bend",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brazoria",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Galveston",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Lake Houston",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Pheonix, AZ",cityDescription:"Surrounded by desert mountains and numerous hiking trails,\n                            Phoenix is the perfect place to live for those who love \n                            spending time in the great outdoors getting 'attune' with\n                            nature",cityControl:"Unknown",locationsLocal:[{locationName:"Paradise Valley",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Mesa",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Glendale",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Peoria",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Apache Junction",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Scottsdale",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Philadelphia, PA",cityDescription:"Besides being one of the most historically significant \n                            cities in the country, Philadelphia offers a hip arts \n                            scene, multiple music venues and plenty of trendy \n                            restaurants, the Hipsters are into 'desiners if you \n                            know what I mean.'",cityControl:"Unknown",locationsLocal:[{locationName:"Chestnut Hill",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Roxborough",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Mount Airy",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"East Falls",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"German Town",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Oak Lane",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Jacksonville, FL",cityDescription:"Jacksonville, perfectly positioned along the Atlantic \n                            Ocean in Northeast Florida, is a natural paradise for \n                            visitors looking for an 'affordable' yet luxurious \n                            destination, with all the 'ammenities'.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Springfield",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Eastside",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Sports Complex",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Fairfield",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brentwood",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Seattle, WA",cityDescription:"The CHAZ Zone has been indefinitely extended for your \n                            market, Visit Pike Place and the Pier to find plenty\n                            of similar fellows and those willing to invest to \n                            new ideas and 'Start-Ups'",cityControl:"Unknown",locationsLocal:[{locationName:"North Gate",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Green Lake",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"University District",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Capitol Hill",avgQuality:0,priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Sodo",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Magnolia",avgQuality:"",priceRanking:"",services:"",policePresence:""}]}],Y=e=>{const n=document.querySelectorAll(".locationContainer button"),r=(e=>{for(let n of T)if(n.cityName==e)return n})(e);let t=0;n.forEach((e=>{e.textContent=r.locationsLocal[t].locationName,e.id=r.locationsLocal[t].locationName.replace(" ",""),e.addEventListener("click",(()=>{(e=>{let n=N();if(n.playerData.currentLocal==e)return console.log("You are already here!"),0;console.log("You are getting ready to travel."),console.log("Hope everything goes well..."),console.log("~Checking for Random Event~"),alert("You are getting ready to travel."),alert("Hope everything goes well..."),alert("~Checking for Random Event~"),console.log("Looks like it's gonna be smooth sailing!"),alert("Looks like it's gonna be smooth sailing!"),console.log(`Successful travel to ${e}`),alert(`Successful travel to ${e}`),n.playerData.currentLocal=e;let r=k();w(r),S(),h(e)})(e.textContent)})),t++}))},U=()=>{((...e)=>{e.length<1&&(q=((...e)=>{let n={name:e[0]||"That Dope Guy",currentDay:e[1]||1,maxDays:e[2]||30,cashOnHand:e[3]||2e3,bankAccount:e[4]||0,debt:e[5]||2500,guns:e[6]||[],health:e[7]||100,maxItems:e[8]||100,currentNumOfItems:e[9]||0,lostDrugs:e[10]||[],luckLevel:e[11]||1,currentLocationCity:e[12]||"Seattle, WA",currentLocal:e[13]||"Capitol Hill",currentTransportMethod:e[14]||"on the Bus",playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]};return{playerData:n,changeHealth:e=>{n.health+=e,console.log(`Player Health: ${n.health}`)},dumpProduct:e=>{console.log(n.playerInventory);for(let[r,t]of n.playerInventory.entries())if(console.log(t),t.name===e){n.playerInventory.splice(r,1),n.currentNumOfItems-=t.quantity,n.currentNumOfItems<1&&n.playerInventory.push(I("Nothing Here",0,0,0)),n.lostDrugs.push(t),console.log(n.lostDrugs);break}}}})())})();let e=N();const n=k();var r;w(n),alert("What is up my new friend!? I have heard good things, or we wouldn't be conversating here at the moment, would we?"),alert("Well, if we're getting down to business... I don't touch the stuff my self, but I know a guy and I have this stack of cash here to get you started. Hit up the local dealer and pick up the supplies needed to start your empire my friend! Sky's the limit and the only color we see is GREEEN!!"),h(e.playerData.currentLocal),r=e.playerData.currentTransportMethod,document.getElementById("currentTransportMethod").innerText=r,Y(e.playerData.currentLocationCity),v("cashDisplay",e.playerData.cashOnHand),v("bankDisplay",e.playerData.bankAccount),v("debtDisplay",e.playerData.debt),f(e.playerData.health),S(),H(),P()};console.log("Testing..."),document.getElementById("btnNewGame").addEventListener("click",(()=>{U()}),{once:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixJQUFDK0gsRURldkM5RyxFQUFtQjZHLEdBY25CL0YsTUFScUIscUhBU3JCQSxNQVBzQixxU0FTdEIsRUFBc0JSLEVBQU9FLFdBQVcwRixjQ2hDRFksRURpQ0x4RyxFQUFPRSxXQUFXa0csdUJDaENoQmpNLFNBQVNrRCxlQUFlLDBCQUVoQ0MsVUFBWWtKLEVEK0J4Q3BCLEVBQW9CcEYsRUFBT0UsV0FBV2lHLHFCQUN0QyxFQUFzQixjQUFlbkcsRUFBT0UsV0FBVzhDLFlBRXZELEVBQXNCLGNBQWVoRCxFQUFPRSxXQUFXNkYsYUFDdkQsRUFBc0IsY0FBZS9GLEVBQU9FLFdBQVc4RixNQUN2RCxFQUFvQmhHLEVBQU9FLFdBQVd1RCxRQUl0Q0MsSUFDQUwsSUFDQSxLRXJDQWhGLFFBQVFDLElBQUksY0NMT25FLFNBQVNrRCxlQUFlLGNBRWhDcUYsaUJBQWlCLFNBQVMsS0FFakMsTUFDRixDQUFDK0QsTUFBTSxLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9yZXNldC5jc3MiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9zdHlsZXMuY3NzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9yZXNldC5jc3M/ZWRlMCIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3N0eWxlcy5jc3M/NDRiMiIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3VwZGF0ZUxvY2F0aW9uRGlzcGxheS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3VwZGF0ZUN1cnJlbmN5RGlzcGxheS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3VwZGF0ZUhlYWx0aERpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9jcmVhdGVEcnVnLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvZHJ1Z0Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2NoZWNrUHJpY2VBdmVyYWdlLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2FkZERydWdzVG9JbnZlbnRvcnkuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9jaGVja051bU9mSXRlbXNIZWxkLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvY2hhbmdlTW9uZXkuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9yZW1vdmVEcnVnc0Zyb21JbnZlbnRvcnkuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9jaGVja0Zvckl0ZW0uanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9kaXNwbGF5QnV5U2VsbFVJLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvYnV5SXRlbXNXaXRoQ2FzaC5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3NlbGxJdGVtc0ZvckNhc2guanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9kaXNwbGF5RHJ1Z0xpc3QuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9lbF9idXlPclNlbGxDbGlja2VkUHJvZHVjdC5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2VsX2NsaWNrUGxheWVySW52ZW50b3J5UHJvZHVjdC5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3VwZGF0ZVRyYXZlbEJ1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy90cmF2ZWxMb2NhbC5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy91cGRhdGVUcmFuc3BvcnRNZXRob2REaXNwbGF5LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvZG9wZVdhcnouanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9lbF9uZXdHYW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXHJcXG5odG1sNWRvY3Rvci5jb20gUmVzZXQgU3R5bGVzaGVldFxcclxcbnYxLjYuMVxcclxcbkxhc3QgVXBkYXRlZDogMjAxMC0wOS0xN1xcclxcbkF1dGhvcjogUmljaGFyZCBDbGFyayAtIGh0dHA6Ly9yaWNoY2xhcmtkZXNpZ24uY29tXFxyXFxuVHdpdHRlcjogQHJpY2hfY2xhcmtcXHJcXG4qL1xcclxcblxcclxcbmh0bWwsIGJvZHksIGRpdiwgc3Bhbiwgb2JqZWN0LCBpZnJhbWUsXFxyXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcclxcbmFiYnIsIGFkZHJlc3MsIGNpdGUsIGNvZGUsXFxyXFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzYW1wLFxcclxcbnNtYWxsLCBzdHJvbmcsIHN1Yiwgc3VwLCB2YXIsXFxyXFxuYiwgaSxcXHJcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcclxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcclxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcclxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcXHJcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24sIHN1bW1hcnksXFxyXFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgYm9yZGVyOjA7XFxyXFxuICAgIG91dGxpbmU6MDtcXHJcXG4gICAgZm9udC1zaXplOjEwMCU7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOmJhc2VsaW5lO1xcclxcbiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgbGluZS1oZWlnaHQ6MTtcXHJcXG59XFxyXFxuXFxyXFxuYXJ0aWNsZSxhc2lkZSxkZXRhaWxzLGZpZ2NhcHRpb24sZmlndXJlLFxcclxcbmZvb3RlcixoZWFkZXIsaGdyb3VwLG1lbnUsbmF2LHNlY3Rpb24ge1xcclxcbiAgICBkaXNwbGF5OmJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwge1xcclxcbiAgICBsaXN0LXN0eWxlOm5vbmU7XFxyXFxufVxcclxcblxcclxcbmJsb2NrcXVvdGUsIHEge1xcclxcbiAgICBxdW90ZXM6bm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxyXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcclxcbiAgICBjb250ZW50OicnO1xcclxcbiAgICBjb250ZW50Om5vbmU7XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcbiAgICBtYXJnaW46MDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbiAgICBmb250LXNpemU6MTAwJTtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246YmFzZWxpbmU7XFxyXFxuICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbi8qIGNoYW5nZSBjb2xvdXJzIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcclxcbmlucyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6I2ZmOTtcXHJcXG4gICAgY29sb3I6IzAwMDtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOm5vbmU7XFxyXFxufVxcclxcblxcclxcbi8qIGNoYW5nZSBjb2xvdXJzIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcclxcbm1hcmsge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZjk7XFxyXFxuICAgIGNvbG9yOiMwMDA7XFxyXFxuICAgIGZvbnQtc3R5bGU6aXRhbGljO1xcclxcbiAgICBmb250LXdlaWdodDpib2xkO1xcclxcbn1cXHJcXG5cXHJcXG5kZWwge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcXHJcXG59XFxyXFxuXFxyXFxuYWJiclt0aXRsZV0sIGRmblt0aXRsZV0ge1xcclxcbiAgICBib3JkZXItYm90dG9tOjFweCBkb3R0ZWQ7XFxyXFxuICAgIGN1cnNvcjpoZWxwO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZSB7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtcXHJcXG4gICAgYm9yZGVyLXNwYWNpbmc6MDtcXHJcXG59XFxyXFxuXFxyXFxuLyogY2hhbmdlIGJvcmRlciBjb2xvdXIgdG8gc3VpdCB5b3VyIG5lZWRzICovXFxyXFxuaHIge1xcclxcbiAgICBkaXNwbGF5OmJsb2NrO1xcclxcbiAgICBoZWlnaHQ6MXB4O1xcclxcbiAgICBib3JkZXI6MDsgIFxcclxcbiAgICBib3JkZXItdG9wOjFweCBzb2xpZCAjY2NjY2NjO1xcclxcbiAgICBtYXJnaW46MWVtIDA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXQsIHNlbGVjdCB7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOm1pZGRsZTtcXHJcXG59IFwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9yZXNldC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Ozs7OztDQU1DOztBQUVEOzs7Ozs7Ozs7Ozs7SUFZSSxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsY0FBYztJQUNkLHVCQUF1QjtJQUN2QixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBOztJQUVJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBOztJQUVJLFVBQVU7SUFDVixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksUUFBUTtJQUNSLFNBQVM7SUFDVCxjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtBQUMxQjs7QUFFQSxzQ0FBc0M7QUFDdEM7SUFDSSxxQkFBcUI7SUFDckIsVUFBVTtJQUNWLG9CQUFvQjtBQUN4Qjs7QUFFQSxzQ0FBc0M7QUFDdEM7SUFDSSxxQkFBcUI7SUFDckIsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSx3QkFBd0I7SUFDeEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksd0JBQXdCO0lBQ3hCLGdCQUFnQjtBQUNwQjs7QUFFQSw0Q0FBNEM7QUFDNUM7SUFDSSxhQUFhO0lBQ2IsVUFBVTtJQUNWLFFBQVE7SUFDUiw0QkFBNEI7SUFDNUIsWUFBWTtJQUNaLFNBQVM7QUFDYjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKlxcclxcbmh0bWw1ZG9jdG9yLmNvbSBSZXNldCBTdHlsZXNoZWV0XFxyXFxudjEuNi4xXFxyXFxuTGFzdCBVcGRhdGVkOiAyMDEwLTA5LTE3XFxyXFxuQXV0aG9yOiBSaWNoYXJkIENsYXJrIC0gaHR0cDovL3JpY2hjbGFya2Rlc2lnbi5jb21cXHJcXG5Ud2l0dGVyOiBAcmljaF9jbGFya1xcclxcbiovXFxyXFxuXFxyXFxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBvYmplY3QsIGlmcmFtZSxcXHJcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxyXFxuYWJiciwgYWRkcmVzcywgY2l0ZSwgY29kZSxcXHJcXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHNhbXAsXFxyXFxuc21hbGwsIHN0cm9uZywgc3ViLCBzdXAsIHZhcixcXHJcXG5iLCBpLFxcclxcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXFxyXFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXFxyXFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXFxyXFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxcclxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiwgc3VtbWFyeSxcXHJcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xcclxcbiAgICBtYXJnaW46MDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbiAgICBib3JkZXI6MDtcXHJcXG4gICAgb3V0bGluZTowO1xcclxcbiAgICBmb250LXNpemU6MTAwJTtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246YmFzZWxpbmU7XFxyXFxuICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgICBsaW5lLWhlaWdodDoxO1xcclxcbn1cXHJcXG5cXHJcXG5hcnRpY2xlLGFzaWRlLGRldGFpbHMsZmlnY2FwdGlvbixmaWd1cmUsXFxyXFxuZm9vdGVyLGhlYWRlcixoZ3JvdXAsbWVudSxuYXYsc2VjdGlvbiB7XFxyXFxuICAgIGRpc3BsYXk6YmxvY2s7XFxyXFxufVxcclxcblxcclxcbm5hdiB1bCB7XFxyXFxuICAgIGxpc3Qtc3R5bGU6bm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYmxvY2txdW90ZSwgcSB7XFxyXFxuICAgIHF1b3Rlczpub25lO1xcclxcbn1cXHJcXG5cXHJcXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcXHJcXG5xOmJlZm9yZSwgcTphZnRlciB7XFxyXFxuICAgIGNvbnRlbnQ6Jyc7XFxyXFxuICAgIGNvbnRlbnQ6bm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYSB7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbiAgICBwYWRkaW5nOjA7XFxyXFxuICAgIGZvbnQtc2l6ZToxMDAlO1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTtcXHJcXG4gICAgYmFja2dyb3VuZDp0cmFuc3BhcmVudDtcXHJcXG59XFxyXFxuXFxyXFxuLyogY2hhbmdlIGNvbG91cnMgdG8gc3VpdCB5b3VyIG5lZWRzICovXFxyXFxuaW5zIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZmY5O1xcclxcbiAgICBjb2xvcjojMDAwO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246bm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogY2hhbmdlIGNvbG91cnMgdG8gc3VpdCB5b3VyIG5lZWRzICovXFxyXFxubWFyayB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6I2ZmOTtcXHJcXG4gICAgY29sb3I6IzAwMDtcXHJcXG4gICAgZm9udC1zdHlsZTppdGFsaWM7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XFxyXFxufVxcclxcblxcclxcbmRlbCB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcclxcbn1cXHJcXG5cXHJcXG5hYmJyW3RpdGxlXSwgZGZuW3RpdGxlXSB7XFxyXFxuICAgIGJvcmRlci1ib3R0b206MXB4IGRvdHRlZDtcXHJcXG4gICAgY3Vyc29yOmhlbHA7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gICAgYm9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO1xcclxcbiAgICBib3JkZXItc3BhY2luZzowO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBjaGFuZ2UgYm9yZGVyIGNvbG91ciB0byBzdWl0IHlvdXIgbmVlZHMgKi9cXHJcXG5ociB7XFxyXFxuICAgIGRpc3BsYXk6YmxvY2s7XFxyXFxuICAgIGhlaWdodDoxcHg7XFxyXFxuICAgIGJvcmRlcjowOyAgXFxyXFxuICAgIGJvcmRlci10b3A6MXB4IHNvbGlkICNjY2NjY2M7XFxyXFxuICAgIG1hcmdpbjoxZW0gMDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dCwgc2VsZWN0IHtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246bWlkZGxlO1xcclxcbn0gXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxyXFxuICAgIC8qIGJhY2tncm91bmQ6IHJnYig0NCwgNDQsIDQ0KTsgKi9cXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDksIDksIDkpO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgbWF4LXdpZHRoOiA5MCU7XFxyXFxuICAgIG1pbi13aWR0aDogNjUwcHg7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG5oMywgaDUge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZ2FtZUNvbnRhaW5lciB7XFxyXFxuICAgIC8qIG1pbi13aWR0aDogNTAwcHg7ICovXFxyXFxuICAgIHdpZHRoOiBhdXRvO1xcclxcbiAgICAvKiBoZWlnaHQ6IGZpdC1jb250ZW50OyAqL1xcclxcbn1cXHJcXG5cXHJcXG4uZmxleENvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JlZW47XFxyXFxufVxcclxcblxcclxcbi5yZXNvdXJjZUFtb3VudCB7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4udG9wR3JpZCB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDUwJTtcXHJcXG4gICAgLyogZ3JpZC10ZW1wbGF0ZS1yb3dzOiA3MCUgNzAlIDUlOyAqL1xcclxcbiAgICByb3ctZ2FwOiAxMHB4O1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcclxcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIC8qIHBhZGRpbmctbGVmdDogMTBweDsgKi9cXHJcXG4gICAgaGVpZ2h0OiBtYXgtY29udGVudDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQge1xcclxcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE4LCA0NywgNzYsIDAuNzY1KTsgKi9cXHJcXG4gICAgLyogYm9yZGVyOiAycHggc29saWQgZ3JlZW47ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDklIDQ5JTtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcclxcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxyXFxuICAgIC8qIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMTBweDsgKi9cXHJcXG4gICAgLyogbWF4LWhlaWdodDogNzV2aDsgKi9cXHJcXG59XFxyXFxuLnByb2R1Y3RHcmlkIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOCwgNDcsIDc2LCAwLjc2NSk7ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDIwJSAzMCU7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLnByb2R1Y3RHcmlkICoge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyYXZlbCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogOTUlO1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXHJcXG59XFxyXFxuXFxyXFxuI3Njb3JlQm9hcmQge1xcclxcbiAgICAvKiB3aWR0aDogNTAlOyAqL1xcclxcbiAgICAvKiBoZWlnaHQ6IDMzdmg7ICovXFxyXFxuICAgIGJvcmRlcjogNXB4IHNvbGlkIGJsdWU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4jaW5wdXRCdXR0b25zIHtcXHJcXG4gICAgLyogaGVpZ2h0OiAzM3ZoOyAqL1xcclxcbiAgICBib3JkZXI6IDVweCBzb2xpZCB5ZWxsb3c7XFxyXFxufVxcclxcblxcclxcbiNhdmFpbGFibGVQcm9kdWN0IHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwcm9kdWN0T25IYW5kIHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNsb2NhdGlvbkltYWdlIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIGhlaWdodDogMTV2aDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7O1xcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxudGFibGUsIHRoIHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxufVxcclxcblxcclxcbnRkOmxhc3Qtb2YtdHlwZSwgdGg6bGFzdC1vZi10eXBlIHtcXHJcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxufVxcclxcblxcclxcbnRkLCB0aCB7XFxyXFxuICAgIHBhZGRpbmc6IDZweDtcXHJcXG59XFxyXFxuXFxyXFxucCB7XFxyXFxuICAgIC8qIGJvcmRlcjogMXB4IHNvbGlkIHBpbms7ICovXFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG4gICAgcGFkZGluZzogNXB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5hdmFpbGFibGVQcm9kdWN0RGF0YTpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDEzOCwgMTUpO1xcclxcbiAgICBjb2xvcjogYmx1ZTtcXHJcXG59XFxyXFxuLmF2YWlsYWJsZVByb2R1Y3REYXRhOmFjdGl2ZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDE1LCAxNSk7XFxyXFxuICAgIGNvbG9yOiByZ2IoMTUwLCAxNTAsIDE3OSk7XFxyXFxufVxcclxcblxcclxcbi8qIEJ1eVNlbGxVSSAqL1xcclxcbi5jb250YWluZXJCdXlTZWxsUHJvZHVjdCB7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4O1xcclxcbiAgICB0b3A6IDUwJTtcXHJcXG4gICAgbGVmdDogNTAlO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxufVxcclxcblxcclxcbi5idXlTZWxsVUlIZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoZ3JlZW4sIHB1cnBsZSk7XFxyXFxufVxcclxcblxcclxcbi5idXlTZWxsVUlIZWFkZXIgLmJ0bkNhbmNlbCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgICB3aWR0aDogNjRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWRCdXlTZWxsIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JpZEJ1eVNlbGwgaW5wdXQge1xcclxcbiAgICB3aWR0aDogNjRweDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubGFiZWxUb3RhbENvc3Qge1xcclxcbiAgICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG5cXHJcXG4ubGFiZWxUb3RhbEdhaW4ge1xcclxcbiAgICBjb2xvcjogZ3JlZW47XFxyXFxufVxcclxcblxcclxcbiNpbnB1dEJ1dHRvbnMge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gICAgdmlzaWJpbGl0eTogY29sbGFwc2U7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5pbnZlbnRvcnlMYWJlbENvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGlDQUFpQztJQUNqQyw4QkFBOEI7QUFDbEM7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixXQUFXO0lBQ1gseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtJQUM5Qix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG9DQUFvQztJQUNwQyxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2Isd0JBQXdCO0lBQ3hCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLCtDQUErQztJQUMvQyw2QkFBNkI7SUFDN0IsYUFBYTtJQUNiLDhCQUE4QjtJQUM5Qix3QkFBd0I7SUFDeEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQjt5QkFDcUI7SUFDckIsc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSwrQ0FBK0M7SUFDL0MsYUFBYTtJQUNiLGtDQUFrQztJQUNsQyx3QkFBd0I7SUFDeEIsWUFBWTtJQUNaLHVCQUF1Qjs7QUFFM0I7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1QkFBdUI7O0FBRTNCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksY0FBYztJQUNkLFlBQVk7SUFDWixXQUFXOztBQUVmOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksNEJBQTRCO0lBQzVCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osV0FBVztJQUNYLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyxXQUFXO0FBQ2Y7QUFDQTtJQUNJLGtDQUFrQztJQUNsQyx5QkFBeUI7QUFDN0I7O0FBRUEsY0FBYztBQUNkO0lBQ0ksdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGFBQWE7SUFDYixRQUFRO0lBQ1IsU0FBUztJQUNULGdDQUFnQztJQUNoQyx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsMENBQTBDO0FBQzlDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7QUFDbEM7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFVBQVU7QUFDZDs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0FBQzNCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImh0bWwge1xcclxcbiAgICAvKiBiYWNrZ3JvdW5kOiByZ2IoNDQsIDQ0LCA0NCk7ICovXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig5LCA5LCA5KTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIG1heC13aWR0aDogOTAlO1xcclxcbiAgICBtaW4td2lkdGg6IDY1MHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuaDMsIGg1IHtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuI2dhbWVDb250YWluZXIge1xcclxcbiAgICAvKiBtaW4td2lkdGg6IDUwMHB4OyAqL1xcclxcbiAgICB3aWR0aDogYXV0bztcXHJcXG4gICAgLyogaGVpZ2h0OiBmaXQtY29udGVudDsgKi9cXHJcXG59XFxyXFxuXFxyXFxuLmZsZXhDb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzb3VyY2VBbW91bnQge1xcclxcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxuLnRvcEdyaWQge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSA1MCU7XFxyXFxuICAgIC8qIGdyaWQtdGVtcGxhdGUtcm93czogNzAlIDcwJSA1JTsgKi9cXHJcXG4gICAgcm93LWdhcDogMTBweDtcXHJcXG4gICAgY29sdW1uLWdhcDogMTBweDtcXHJcXG4gICAgLyogY29sb3I6IHdoaXRlOyAqL1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICAvKiBwYWRkaW5nLWxlZnQ6IDEwcHg7ICovXFxyXFxuICAgIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxyXFxufVxcclxcblxcclxcbi5ncmlkIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOCwgNDcsIDc2LCAwLjc2NSk7ICovXFxyXFxuICAgIC8qIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuOyAqL1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDQ5JSA0OSU7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXHJcXG4gICAgY29sdW1uLWdhcDogMTBweDtcXHJcXG4gICAgLyogY29sb3I6IHdoaXRlOyAqL1xcclxcbiAgICAvKiBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7ICovXFxyXFxuICAgIC8qIG1heC1oZWlnaHQ6IDc1dmg7ICovXFxyXFxufVxcclxcbi5wcm9kdWN0R3JpZCB7XFxyXFxuICAgIC8qIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTgsIDQ3LCA3NiwgMC43NjUpOyAqL1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSAyMCUgMzAlO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5wcm9kdWN0R3JpZCAqIHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi50cmF2ZWwge1xcclxcbiAgICBmb250LXNpemU6IDk1JTtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JlZW47XFxyXFxufVxcclxcblxcclxcbiNzY29yZUJvYXJkIHtcXHJcXG4gICAgLyogd2lkdGg6IDUwJTsgKi9cXHJcXG4gICAgLyogaGVpZ2h0OiAzM3ZoOyAqL1xcclxcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuI2lucHV0QnV0dG9ucyB7XFxyXFxuICAgIC8qIGhlaWdodDogMzN2aDsgKi9cXHJcXG4gICAgYm9yZGVyOiA1cHggc29saWQgeWVsbG93O1xcclxcbn1cXHJcXG5cXHJcXG4jYXZhaWxhYmxlUHJvZHVjdCB7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4jcHJvZHVjdE9uSGFuZCB7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4jbG9jYXRpb25JbWFnZSB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBoZWlnaHQ6IDE1dmg7XFxyXFxuICAgIHdpZHRoOiAxMDAlOztcXHJcXG4gICAgXFxyXFxufVxcclxcblxcclxcbnRhYmxlLCB0aCB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkO1xcclxcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcbn1cXHJcXG5cXHJcXG50ZDpsYXN0LW9mLXR5cGUsIHRoOmxhc3Qtb2YtdHlwZSB7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZSB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbn1cXHJcXG5cXHJcXG50ZCwgdGgge1xcclxcbiAgICBwYWRkaW5nOiA2cHg7XFxyXFxufVxcclxcblxcclxcbnAge1xcclxcbiAgICAvKiBib3JkZXI6IDFweCBzb2xpZCBwaW5rOyAqL1xcclxcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxyXFxufVxcclxcblxcclxcbmJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEycHg7XFxyXFxuICAgIHBhZGRpbmc6IDVweDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uYXZhaWxhYmxlUHJvZHVjdERhdGE6aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTYwLCAxMzgsIDE1KTtcXHJcXG4gICAgY29sb3I6IGJsdWU7XFxyXFxufVxcclxcbi5hdmFpbGFibGVQcm9kdWN0RGF0YTphY3RpdmUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTYwLCAxNSwgMTUpO1xcclxcbiAgICBjb2xvcjogcmdiKDE1MCwgMTUwLCAxNzkpO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBCdXlTZWxsVUkgKi9cXHJcXG4uY29udGFpbmVyQnV5U2VsbFByb2R1Y3Qge1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHdpZHRoOiAyMDBweDtcXHJcXG4gICAgaGVpZ2h0OiAxNTBweDtcXHJcXG4gICAgdG9wOiA1MCU7XFxyXFxuICAgIGxlZnQ6IDUwJTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV5U2VsbFVJSGVhZGVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KGdyZWVuLCBwdXJwbGUpO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV5U2VsbFVJSGVhZGVyIC5idG5DYW5jZWwge1xcclxcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXHJcXG4gICAgd2lkdGg6IDY0cHg7XFxyXFxufVxcclxcblxcclxcbi5ncmlkQnV5U2VsbCB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDUwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWRCdXlTZWxsIGlucHV0IHtcXHJcXG4gICAgd2lkdGg6IDY0cHg7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmxhYmVsVG90YWxDb3N0IHtcXHJcXG4gICAgY29sb3I6IHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLmxhYmVsVG90YWxHYWluIHtcXHJcXG4gICAgY29sb3I6IGdyZWVuO1xcclxcbn1cXHJcXG5cXHJcXG4jaW5wdXRCdXR0b25zIHtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmhpZGRlbiB7XFxyXFxuICAgIHZpc2liaWxpdHk6IGNvbGxhcHNlO1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uaW52ZW50b3J5TGFiZWxDb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImNvbnN0IHVwZGF0ZUxvY2F0aW9uRGlzcGxheSA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgY29uc3QgbG9jYXRpb25EaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1cnJlbnRMb2NhdGlvbicpO1xyXG4gICAgLy8gY29uc29sZS5sb2cobG9jYXRpb25EaXNwbGF5KTtcclxuICAgIGxvY2F0aW9uRGlzcGxheS5pbm5lclRleHQgPSB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlTG9jYXRpb25EaXNwbGF5OyIsImNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh7XHJcbiAgICBzdHlsZTogJ2N1cnJlbmN5J1xyXG59KTtcclxuXHJcbmNvbnN0IHVwZGF0ZUN1cnJlbmN5RGlzcGxheSA9IChzZWxlY3RvciwgdmFsdWUpID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbmN5RGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHZhbHVlKTtcclxuICAgIGxldCBuZXdWYWx1ZSA9IGZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xyXG4gICAgLy8gY29uc29sZS5sb2cobmV3VmFsdWUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coY3VycmVuY3lEaXNwbGF5KTtcclxuICAgIGN1cnJlbmN5RGlzcGxheS50ZXh0Q29udGVudCA9IGAkJHtuZXdWYWx1ZX1gO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlQ3VycmVuY3lEaXNwbGF5OyIsImNvbnN0IHVwZGF0ZUhlYWx0aERpc3BsYXkgPSAoY3VycmVudEhlYWx0aCkgPT4ge1xyXG4gICAgY29uc3QgaGVhbHRoRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFsdGhEaXNwbGF5Jyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhoZWFsdGhEaXNwbGF5KTtcclxuICAgIGhlYWx0aERpc3BsYXkuaW5uZXJUZXh0ID0gYCR7Y3VycmVudEhlYWx0aH1ocGBcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlSGVhbHRoRGlzcGxheTtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gKi9cclxuLy8gRHJ1ZyBGYWN0b3J5IEZ1bmN0aW9uXHJcbmNvbnN0IGNyZWF0ZURydWcgPSAobmFtZSwgcHJpY2UsIHF1YW50aXR5LCBxdWFsaXR5KSA9PiB7XHJcbiAgICBuYW1lID0gbmFtZTsgICAgICAgICAgICAvLyBTdHJlZXQgTmFtZVxyXG4gICAgcXVhbnRpdHkgPSBxdWFudGl0eTsgICAgLy8gR3JhbXNcclxuICAgIHByaWNlID0gcHJpY2U7ICAgICAgICAgIC8vIERvbGxhcnNcclxuICAgIHF1YWxpdHkgPSBxdWFsaXR5OyAgICAgIC8vIEdyYWRlIFN5c3RlbVxyXG5cclxuICAgIGNvbnN0IGluZm8gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coe25hbWUsIHF1YW50aXR5LCBwcmljZX0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBxdWFudGl0eSxcclxuICAgICAgICBwcmljZSxcclxuICAgICAgICBxdWFsaXR5LFxyXG4gICAgICAgIGluZm8sXHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVEcnVnO1xyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgY3JlYXRlRHJ1ZyBmcm9tIFwiLi9jcmVhdGVEcnVnXCI7XHJcblxyXG5sZXQgY3VycmVudERydWdMaXN0ID0gW107XHJcblxyXG4vLyBEZWZhdWx0IERydWcgTGlzdFxyXG5jb25zdCBkZWZhdWx0RHJ1Z0xpc3QgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJDYW5uYWJpcyBGbG93ZXJcIixcclxuICAgICAgICBwcmljZTogMTAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiQ2FubmFiaXMgRXh0cmFjdFwiLFxyXG4gICAgICAgIHByaWNlOiAzMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJBY2lkXCIsXHJcbiAgICAgICAgcHJpY2U6IDE1LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkNvY2FpbmVcIixcclxuICAgICAgICBwcmljZTogMTIwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkNyYWNrXCIsXHJcbiAgICAgICAgcHJpY2U6IDcwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkhlcm9pblwiLFxyXG4gICAgICAgIHByaWNlOiA5NSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJNZXRoYW1waGV0YW1pbmVcIixcclxuICAgICAgICBwcmljZTogNTAsXHJcbiAgICB9LFxyXG5dO1xyXG5cclxuY29uc3QgY3JlYXRlRHJ1Z0xpc3QgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgLy8gYXJncyhxdHlNYXgsIGxvY2FsTXVsdGlwbGllciwgbHVjaylcclxuICAgIGxldCBuZXdEcnVnTGlzdCA9IFtdO1xyXG5cclxuICAgIGRlZmF1bHREcnVnTGlzdC5mb3JFYWNoKChkcnVnKSA9PiB7XHJcbiAgICAgICAgbGV0IGNvaW5GbGlwID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcclxuICAgICAgICBsZXQgY2FsY3VsYXRlZFByaWNlO1xyXG4gICAgICAgIGxldCBxdHlNYXggPSBhcmdzWzBdIHx8IDEwMDtcclxuICAgICAgICBsZXQgbG9jYWxNdWx0aXBsaWVyID0gYXJnc1sxXSB8fCAxO1xyXG4gICAgICAgIGxldCBsdWNrID0gYXJnc1syXSB8fCAwO1xyXG4gICAgICAgIGxldCBsdWNrRWZmZWN0ID0gKDEgKyAobHVjayAqIDAuMSkpXHJcbiAgICAgICAgbGV0IGx1Y2tNdWx0aXBsaWVyID0gKDUwIC0gbHVjaykgfHwgNTA7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBpZiAoY29pbkZsaXAgPiBsdWNrTXVsdGlwbGllcikge1xyXG4gICAgICAgICAgICBjYWxjdWxhdGVkUHJpY2UgPSBNYXRoLmZsb29yKGRydWcucHJpY2UgKyAoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKSAvIDEwMCkgKiBkcnVnLnByaWNlKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FsY3VsYXRlZFByaWNlID0gTWF0aC5mbG9vcihkcnVnLnByaWNlIC0gKChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyMCkgLyAxMDApICogZHJ1Zy5wcmljZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNhbGN1bGF0ZWRRdHkgPSBNYXRoLmZsb29yKCgoTWF0aC5yYW5kb20oKSAqIHF0eU1heCkgKiBsb2NhbE11bHRpcGxpZXIpICogbHVja0VmZmVjdCk7XHJcblxyXG5cclxuICAgICAgICBuZXdEcnVnTGlzdC5wdXNoKGNyZWF0ZURydWcoZHJ1Zy5uYW1lLCBjYWxjdWxhdGVkUHJpY2UsIGNhbGN1bGF0ZWRRdHkpKTtcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIG5ld0RydWdMaXN0O1xyXG59XHJcblxyXG5jb25zdCBlZGl0VmVuZG9yRHJ1Z1F0eSA9IChjaGFuZ2VkRHJ1ZykgPT4ge1xyXG4gICAgLy8gY29uc29sZS5sb2coY2hhbmdlZERydWcpO1xyXG4gICAgY3VycmVudERydWdMaXN0LmZvckVhY2goKGRydWcpID0+IHtcclxuICAgICAgICBpZiAoZHJ1Zy5uYW1lID09PSBjaGFuZ2VkRHJ1Zy5uYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRydWcpO1xyXG4gICAgICAgICAgICBkcnVnLnF1YW50aXR5ID0gY2hhbmdlZERydWcucXVhbnRpdHk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRydWcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn1cclxuXHJcbmNvbnN0IHNldEN1cnJlbnREcnVnTGlzdCA9IChkcnVnTGlzdCkgPT4ge1xyXG4gICAgY3VycmVudERydWdMaXN0ID0gZHJ1Z0xpc3Q7XHJcbn1cclxuXHJcbmNvbnN0IGdldEN1cnJlbnREcnVnTGlzdCA9ICgpID0+IHtcclxuICAgIHJldHVybiBjdXJyZW50RHJ1Z0xpc3Q7XHJcbn1cclxuXHJcbmNvbnN0IGdldFByb2R1Y3RRdHlGcm9tSW52ZW50b3J5ID0gKGRydWdOYW1lKSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkcnVnTmFtZSk7XHJcbiAgICBmb3IgKGxldCBkcnVnIG9mIGN1cnJlbnREcnVnTGlzdCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRydWcpO1xyXG4gICAgICAgIGlmIChkcnVnLm5hbWUgPT09IGRydWdOYW1lKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRydWcucXVhbnRpdHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZHJ1Zy5xdWFudGl0eTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgZGVmYXVsdERydWdMaXN0LFxyXG4gICAgY3JlYXRlRHJ1Z0xpc3QsXHJcbiAgICBlZGl0VmVuZG9yRHJ1Z1F0eSxcclxuICAgIHNldEN1cnJlbnREcnVnTGlzdCxcclxuICAgIGdldEN1cnJlbnREcnVnTGlzdCxcclxuICAgIGdldFByb2R1Y3RRdHlGcm9tSW52ZW50b3J5LFxyXG59IiwiLy8gUHJpY2UgQVZHIGZ1bmN0aW9uXHJcbmNvbnN0IGNoZWNrUHJpY2VBdmVyYWdlID0gKGl0ZW1zSGVsZCwgbmV3SXRlbXMpID0+IHtcclxuICAgIGxldCBhdmVyYWdlUHJpY2UgPSAoKGl0ZW1zSGVsZC5wcmljZSAqIGl0ZW1zSGVsZC5xdWFudGl0eSkgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG5ld0l0ZW1zLnByaWNlICogbmV3SXRlbXMucXVhbnRpdHkpKSAvIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoaXRlbXNIZWxkLnF1YW50aXR5ICsgbmV3SXRlbXMucXVhbnRpdHkpO1xyXG4gICAgY29uc29sZS5sb2coYEF2ZXJhZ2VQcmljZTogJHthdmVyYWdlUHJpY2V9YCk7XHJcbiAgICBhdmVyYWdlUHJpY2U9IE1hdGgucm91bmQoYXZlcmFnZVByaWNlKTtcclxuXHJcbiAgICByZXR1cm4gYXZlcmFnZVByaWNlO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tQcmljZUF2ZXJhZ2U7IiwiaW1wb3J0IHsgZ2V0UGxheWVyMSB9IGZyb20gXCIuL3BsYXllclwiO1xyXG5cclxuY29uc3QgdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheSA9ICgpID0+IHtcclxuICAgIGNvbnN0IHBsYXllciA9IGdldFBsYXllcjEoKTtcclxuICAgIGNvbnN0IHN0b3JhZ2VBbXREaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ludmVudG9yeUFtdExhYmVsJyk7XHJcblxyXG4gICAgc3RvcmFnZUFtdERpc3BsYXkudGV4dENvbnRlbnQgPSBgJHtwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50TnVtT2ZJdGVtc30vJHtwbGF5ZXIucGxheWVyRGF0YS5tYXhJdGVtc31gO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheTsiLCJpbXBvcnQgY2hlY2tGb3JJdGVtIGZyb20gXCIuL2NoZWNrRm9ySXRlbVwiO1xyXG5pbXBvcnQgY3JlYXRlRHJ1ZyBmcm9tIFwiLi9jcmVhdGVEcnVnXCI7XHJcbmltcG9ydCBkaXNwbGF5QnV5U2VsbFVJIGZyb20gXCIuL2Rpc3BsYXlCdXlTZWxsVUlcIjtcclxuaW1wb3J0IHsgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkgfSBmcm9tIFwiLi9kaXNwbGF5RHJ1Z0xpc3RcIjtcclxuaW1wb3J0IHVwZGF0ZUludmVudG9yeUFtb3VudERpc3BsYXkgZnJvbSBcIi4vdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheVwiO1xyXG5cclxuLy8gUGxheWVyIFZhcmlhYmxlc1xyXG5sZXQgcGxheWVyMTtcclxuXHJcbmNvbnN0IGNyZWF0ZVBsYXllciA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICBsZXQgcGxheWVyRGF0YSA9IHtcclxuICAgICAgICBuYW1lIDogYXJnc1swXSB8fCBcIlRoYXQgRG9wZSBHdXlcIixcclxuICAgICAgICBjdXJyZW50RGF5IDogYXJnc1sxXSB8fCAxLFxyXG4gICAgICAgIG1heERheXMgOiBhcmdzWzJdIHx8IDMwLFxyXG4gICAgICAgIGNhc2hPbkhhbmQgOiBhcmdzWzNdIHx8IDIwMDAsXHJcbiAgICAgICAgYmFua0FjY291bnQgOiBhcmdzWzRdIHx8IDAsXHJcbiAgICAgICAgZGVidCA6IGFyZ3NbNV0gfHwgMjUwMCxcclxuICAgICAgICBndW5zIDogYXJnc1s2XSB8fCBbXSxcclxuICAgICAgICBoZWFsdGggOiBhcmdzWzddIHx8IDEwMCxcclxuICAgICAgICBtYXhJdGVtcyA6IGFyZ3NbOF0gfHwgMTAwLFxyXG4gICAgICAgIGN1cnJlbnROdW1PZkl0ZW1zIDogYXJnc1s5XSB8fCAwLFxyXG4gICAgICAgIGxvc3REcnVncyA6IGFyZ3NbMTBdfHwgW10sXHJcbiAgICAgICAgbHVja0xldmVsIDogYXJnc1sxMV0gfHwgMSwgIFxyXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbkNpdHk6IGFyZ3NbMTJdIHx8IFwiU2VhdHRsZSwgV0FcIiAsXHJcbiAgICAgICAgY3VycmVudExvY2FsOiBhcmdzWzEzXSB8fCBcIkNhcGl0b2wgSGlsbFwiLFxyXG4gICAgICAgIGN1cnJlbnRUcmFuc3BvcnRNZXRob2Q6IGFyZ3NbMTRdIHx8IFwib24gdGhlIEJ1c1wiLCBcclxuICAgICAgICBwbGF5ZXJJbnZlbnRvcnk6IFt7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiTm90aGluZyBIZXJlXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiAwLFxyXG4gICAgICAgICAgICBwcmljZTogMCxcclxuICAgICAgICAgICAgcXVhbGl0eTogXCJOb25lXCIsICAgIFxyXG4gICAgICAgIH1dLFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYW5nZUhlYWx0aCA9IChjaGFuZ2UpID0+IHtcclxuICAgICAgICBwbGF5ZXJEYXRhLmhlYWx0aCArPSBjaGFuZ2U7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFBsYXllciBIZWFsdGg6ICR7cGxheWVyRGF0YS5oZWFsdGh9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc3QgcGxheWVySW52ZW50b3J5ID0gW3tcclxuICAgIC8vICAgICBuYW1lOiBcIk5vdGhpbmcgSGVyZVwiLFxyXG4gICAgLy8gICAgIHF1YW50aXR5OiAwLFxyXG4gICAgLy8gICAgIHByaWNlOiAwLFxyXG4gICAgLy8gICAgIHF1YWxpdHk6IFwiTm9uZVwiLFxyXG4gICAgLy8gfV07XHJcblxyXG4gICAgLy8gUmVmYWN0b3IgdGhpcyBpbnRvIGl0cyBvd24gbW9kdWxlXHJcbiAgICBjb25zdCBkdW1wUHJvZHVjdCA9IChwcm9kdWN0TmFtZSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHBsYXllckRhdGEucGxheWVySW52ZW50b3J5KVxyXG4gICAgICAgIGZvciAobGV0IFtpbmRleCwgZHJ1Z10gb2YgcGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRydWcpO1xyXG4gICAgICAgICAgICBpZiAoZHJ1Zy5uYW1lID09PSBwcm9kdWN0TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIHBsYXllckRhdGEuY3VycmVudE51bU9mSXRlbXMgLT0gZHJ1Zy5xdWFudGl0eTtcclxuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJEYXRhLmN1cnJlbnROdW1PZkl0ZW1zIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllckRhdGEucGxheWVySW52ZW50b3J5LnB1c2goY3JlYXRlRHJ1ZyhcIk5vdGhpbmcgSGVyZVwiLCAwLCAwLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJEYXRhLmxvc3REcnVncy5wdXNoKGRydWcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGxheWVyRGF0YS5sb3N0RHJ1Z3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4vLyBwbGF5ZXJOYW1lLCBjdXJyZW50RGF5LCBtYXhEYXlzLCBjYXNoT25IYW5kLCBiYW5rQWNjb3VudCwgZGVidFxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGxheWVyRGF0YSxcclxuICAgICAgICBjaGFuZ2VIZWFsdGgsXHJcbiAgICAgICAgLy8gcGxheWVySW52ZW50b3J5LFxyXG4gICAgICAgIGR1bXBQcm9kdWN0LFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBzZXRQbGF5ZXIxID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChhcmdzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICBwbGF5ZXIxID0gY3JlYXRlUGxheWVyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldFBsYXllcjEgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gcGxheWVyMTtcclxufVxyXG5cclxuY29uc3QgZ2V0UHJvZHVjdFF0eUZyb21QbGF5ZXJJbnZlbnRvcnkgPSAoZHJ1Z05hbWUpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGRydWdOYW1lKTtcclxuICAgIGNvbnNvbGUubG9nKHBsYXllcjEucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkpO1xyXG4gICAgZm9yIChsZXQgZHJ1ZyBvZiBwbGF5ZXIxLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZHJ1Zyk7XHJcbiAgICAgICAgaWYgKGRydWcubmFtZSA9PT0gZHJ1Z05hbWUpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZHJ1Zy5xdWFudGl0eSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkcnVnLnF1YW50aXR5O1xyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDA7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IHtcclxuICAgIGNyZWF0ZVBsYXllciwgXHJcbiAgICBzZXRQbGF5ZXIxLFxyXG4gICAgZ2V0UGxheWVyMSxcclxuICAgIGdldFByb2R1Y3RRdHlGcm9tUGxheWVySW52ZW50b3J5LFxyXG59IiwiaW1wb3J0IGNoZWNrUHJpY2VBdmVyYWdlIGZyb20gJy4vY2hlY2tQcmljZUF2ZXJhZ2UnO1xyXG5pbXBvcnQgY3JlYXRlRHJ1ZyBmcm9tICcuL2NyZWF0ZURydWcnO1xyXG5pbXBvcnQgY2hlY2tOdW1PZkl0ZW1zSGVsZCBmcm9tICcuL2NoZWNrTnVtT2ZJdGVtc0hlbGQnXHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tICcuL3BsYXllci5qcyc7XHJcbmltcG9ydCB1cGRhdGVJbnZlbnRvcnlBbW91bnREaXNwbGF5IGZyb20gJy4vdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheSc7XHJcblxyXG4vLyBBZGQgSXRlbSB0byBJbnZlbnRvcnkgRnVuY3Rpb25cclxuY29uc3QgYWRkRHJ1Z3NUb0ludmVudG9yeSA9IChhZGRlZEl0ZW0pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGFkZGVkSXRlbSk7XHJcbiAgICBsZXQgcGxheWVyID0gZ2V0UGxheWVyMSgpO1xyXG4gICAgbGV0IGN1cnJlbnROdW1PZkl0ZW1zID0gY2hlY2tOdW1PZkl0ZW1zSGVsZCgpO1xyXG4gICAgY29uc29sZS5sb2coYEl0ZW1zIEhlbGQ6ICR7Y3VycmVudE51bU9mSXRlbXN9ZydzYCk7XHJcbiAgICAvLyBDaGVjayBpZiBpbnZlbnRvcnkgaXMgZnVsbFxyXG5cclxuICAgIGlmIChjdXJyZW50TnVtT2ZJdGVtcyA+PSBwbGF5ZXIucGxheWVyRGF0YS5tYXhJdGVtcykge1xyXG4gICAgICAgIGFsZXJ0KFwiWW91ciBwb2NrZXRzIGFyZSBhbHJlYWR5IGJ1bGdpbiBidWRkeSwgY29tZSBiYWNrIHdoZW4geW91IGhhdmUgc29tZSByb29tLlwiKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiWW91IGFpbid0IGdvdCBubyBtb3JlIHBvY2tldHMhXCIpO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGZvciBvdmVyRmxvd1xyXG4gICAgaWYgKChjdXJyZW50TnVtT2ZJdGVtcyArIGFkZGVkSXRlbS5xdWFudGl0eSkgPiBwbGF5ZXIucGxheWVyRGF0YS5tYXhJdGVtcykge1xyXG4gICAgICAgIC8vIHNldCBvdmVyRmxvdyBieSBzdWJ0cmFjdGluZyBUb3RhbCBJbnZlbnRvcnkgZnJvbSBuZXcgVG90YWxcclxuICAgICAgICBsZXQgb3ZlckZsb3cgPSAoY3VycmVudE51bU9mSXRlbXMgKyBhZGRlZEl0ZW0ucXVhbnRpdHkpIC0gcGxheWVyLnBsYXllckRhdGEubWF4SXRlbXM7XHJcbiAgICAgICAgYWxlcnQoYFlvdSBvdmVyc3R1ZmZlZCB5b3VyIHBvY2tldHMsIGdldHRpbmcgYSBsaWwgZ3JlZWR5IHRoZXJlLi4uIFlvdSBkcm9wcGVkICR7b3ZlckZsb3d9ZydzIG9mICR7YWRkZWRJdGVtLm5hbWV9YCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFlvdSBkcm9wcGVkICR7b3ZlckZsb3d9ZydzIG9mICR7YWRkZWRJdGVtLm5hbWV9YCk7XHJcbiAgICAgICAgLy8gU2V0IG5ldyBJdGVtIHF1YW50aXR5IGZvciBkcnVnc1xyXG4gICAgICAgIGFkZGVkSXRlbS5xdWFudGl0eSA9IChwbGF5ZXIucGxheWVyRGF0YS5tYXhJdGVtcyAtIGN1cnJlbnROdW1PZkl0ZW1zKTtcclxuICAgICAgICAvLyBBREQgdG8gbG9zdCBkcnVncyBzdGFzaCB0byB1c2UgaW4gb3RoZXIgZXZlbnRzXHJcbiAgICAgICAgcGxheWVyLnBsYXllckRhdGEubG9zdERydWdzLnB1c2goY3JlYXRlRHJ1ZyhhZGRlZEl0ZW0ubmFtZSwgYWRkZWRJdGVtLnByaWNlLCBvdmVyRmxvdywgYWRkZWRJdGVtLnF1YWxpdHkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpdGVtIG9mIHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBhbHJlYWR5IGhvbGRpbmcgaXRlbVxyXG4gICAgICAgIGlmIChpdGVtLm5hbWUgPT09IGFkZGVkSXRlbS5uYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW0ucXVhbnRpdHkpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGFkZGVkSXRlbS5xdWFudGl0eSB0byB0b3RhbCBxdWFudGl0eSBpbiBpbnZlbnRvcnlcclxuICAgICAgICAgICAgaXRlbS5xdWFudGl0eSArPSBhZGRlZEl0ZW0ucXVhbnRpdHk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW0ucXVhbnRpdHkpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVwbGFjZSBwcmljZSB3aXRoIG5ldyBhdmVyYWdlIHByaWNlXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0ucHJpY2UpO1xyXG4gICAgICAgICAgICBpdGVtLnByaWNlID0gY2hlY2tQcmljZUF2ZXJhZ2UoaXRlbSwgYWRkZWRJdGVtKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaXRlbS5wcmljZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeSk7XHJcbiAgICAgICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLmN1cnJlbnROdW1PZkl0ZW1zICs9IGFkZGVkSXRlbS5xdWFudGl0eTsgLy9jaGVja051bU9mSXRlbXNIZWxkKCk7XHJcbiAgICAgICAgICAgIHVwZGF0ZUludmVudG9yeUFtb3VudERpc3BsYXkoKTtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH0gIFxyXG4gICAgLy8gQWRkIG5ldyBkcnVnIHRvIGludmVudG9yeSAgXHJcbiAgICAvLyBDaGVja3MgaWYgSW52ZW50b3J5IGlzIGVtcHR5XHJcbiAgICBpZiAocGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5WzBdLm5hbWUgPT0gXCJOb3RoaW5nIEhlcmVcIikge1xyXG4gICAgICAgIC8vIFJlbW92ZSBQbGFjZWhvbGRlclxyXG4gICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeS5wb3AoKTtcclxuICAgIH1cclxuICAgIC8vIEFkZCBuZXcgZHJ1ZyB0byBpbnZlbnRvcnlcclxuICAgIHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeS5wdXNoKGNyZWF0ZURydWcoYWRkZWRJdGVtLm5hbWUsIGFkZGVkSXRlbS5wcmljZSwgYWRkZWRJdGVtLnF1YW50aXR5LCBhZGRlZEl0ZW0ucXVhbGl0eSkpO1xyXG4gICAgY29uc29sZS5sb2cocGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KTtcclxuICAgIHBsYXllci5wbGF5ZXJEYXRhLmN1cnJlbnROdW1PZkl0ZW1zICs9IGFkZGVkSXRlbS5xdWFudGl0eTsgLy8gLy9jaGVja051bU9mSXRlbXNIZWxkKCk7XHJcbiAgICB1cGRhdGVJbnZlbnRvcnlBbW91bnREaXNwbGF5KCk7XHJcbiAgICByZXR1cm4gMTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkZERydWdzVG9JbnZlbnRvcnk7IiwiaW1wb3J0IHsgZ2V0UGxheWVyMSB9IGZyb20gXCIuL3BsYXllci5qc1wiO1xyXG5cclxuLy8gQ2hlY2sgUGxheWVyIGludmVudG9yeSBmb3IgdG90YWwgaXRlbXMgaGVsZFxyXG5jb25zdCBjaGVja051bU9mSXRlbXNIZWxkID0gKCkgPT4ge1xyXG4gICAgbGV0IHBsYXllciA9IGdldFBsYXllcjEoKTtcclxuICAgIGxldCBpdGVtc0hlbGQgPSAwO1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkpIHtcclxuICAgICAgICBpdGVtc0hlbGQgKz0gaXRlbS5xdWFudGl0eTtcclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtc0hlbGQ7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGVja051bU9mSXRlbXNIZWxkOyIsImNvbnN0IGNoYW5nZU1vbmV5ID0gKGFjY291bnQsIGNoYW5nZSkgPT4ge1xyXG4gICAgYWNjb3VudCArPSBjaGFuZ2U7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh7YWNjb3VudH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2coY2hhbmdlKTtcclxuICAgIHJldHVybiBhY2NvdW50O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGFuZ2VNb25leTsiLCJpbXBvcnQgY2hlY2tGb3JJdGVtIGZyb20gXCIuL2NoZWNrRm9ySXRlbVwiO1xyXG5pbXBvcnQgY3JlYXRlRHJ1ZyBmcm9tIFwiLi9jcmVhdGVEcnVnXCI7XHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tIFwiLi9wbGF5ZXIuanNcIjtcclxuXHJcbi8vIFJlbW92ZSBJdGVtIGZyb20gSW52ZW50b3J5IEZ1bmN0aW9uXHJcbmNvbnN0IHJlbW92ZURydWdzRnJvbUludmVudG9yeSA9IChyZW1vdmVkSXRlbSkgPT4ge1xyXG5cclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcblxyXG4gICAgY29uc29sZS5sb2cocmVtb3ZlZEl0ZW0pO1xyXG4gICAgbGV0IGZvdW5kSXRlbSA9IGNoZWNrRm9ySXRlbShyZW1vdmVkSXRlbSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhmb3VuZEl0ZW0pO1xyXG4gICAgY29uc29sZS5sb2cocGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KTtcclxuXHJcbiAgICBpZiAoZm91bmRJdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgYWxlcnQoXCJZb3UgcmVhY2ggaW50byB5b3VyIHBvY2tldHMgYW5kIHJlYWxpemUgeW91J3ZlIG1hZGUgYSBtaXN0YWtlLi4uXCIpXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJZb3UgZG9uJ3Qgb3duIHRoaXMgaXRlbS5cIik7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGluZGV4ID0gZm91bmRJdGVtLmluZGV4O1xyXG4gICAgbGV0IGl0ZW0gPSBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnlbaW5kZXhdO1xyXG4gICAgaWYgKChpdGVtLnF1YW50aXR5IC0gcmVtb3ZlZEl0ZW0ucXVhbnRpdHkpIDwgMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBZb3UgZG8gbm90IGhhdmUgZW5vdWdoIGZvciB0aGlzIHRyYW5zYWN0aW9ucy4gWW91IGhhdmUgJHtpdGVtLnF1YW50aXR5fWcncyBsZWZ0Li4uYClcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0gZWxzZSBpZiAoKGl0ZW0ucXVhbnRpdHkgLSByZW1vdmVkSXRlbS5xdWFudGl0eSkgPT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidnZ2IFBsYXllciBJbnZlbnRvcnkgdnZ2XCIpXHJcbiAgICAgICAgY29uc29sZS5sb2cocGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KTtcclxuICAgICAgICAvLyBSZW1vdmUgb2JqZWN0IGZyb20gYXJyYXkgaWYgcXVhbml0aXR5IGlzIDBcclxuICAgICAgICBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInZ2diBQbGF5ZXIgSW52ZW50b3J5IHZ2dlwiKVxyXG5cclxuICAgICAgICBwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50TnVtT2ZJdGVtcyAtPSByZW1vdmVkSXRlbS5xdWFudGl0eTsgLy89IGNoZWNrTnVtT2ZJdGVtc0hlbGQoKTtcclxuICAgICAgICAvLyBSZS1hZGQgcGxhY2Vob2xkZXIgZm9yIGVtcHR5IGludmVudG9yeVxyXG4gICAgICAgIGlmIChwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50TnVtT2ZJdGVtcyA8IDEpIHtcclxuICAgICAgICAgICAgcGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5LnB1c2goY3JlYXRlRHJ1ZyhcIk5vdGhpbmcgSGVyZVwiLCAwLCAwLCAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgSXRlbSBRdWFudGl0eTogJHtpdGVtLnF1YW50aXR5fWApO1xyXG4gICAgICAgIC8vIFJlbW92ZSBhbXQgb2YgaXRlbXMgZnJvbSBvYmplY3QgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiByZW1vdmluZ1xyXG4gICAgICAgIGl0ZW0ucXVhbnRpdHkgLT0gcmVtb3ZlZEl0ZW0ucXVhbnRpdHk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEl0ZW0gUXVhbnRpdHk6ICR7aXRlbS5xdWFudGl0eX1gKTtcclxuICAgICAgICBwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50TnVtT2ZJdGVtcyAtPSByZW1vdmVkSXRlbS5xdWFudGl0eTsgLy89IGNoZWNrTnVtT2ZJdGVtc0hlbGQoKTtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZW1vdmVEcnVnc0Zyb21JbnZlbnRvcnk7IiwiaW1wb3J0IHsgZ2V0UGxheWVyMSB9IGZyb20gXCIuL3BsYXllci5qc1wiO1xyXG5cclxuLy8gQ2hlY2sgaW52ZW50b3J5IGZvciBJdGVtIGhlbHBlciBmdW5jdGlvblxyXG5jb25zdCBjaGVja0Zvckl0ZW0gPSAoaXRlbVRvQ2hlY2spID0+IHtcclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICAvLyBodHRwczovL2ZsYXZpb2NvcGVzLmNvbS9ob3ctdG8tZ2V0LWluZGV4LWluLWZvci1vZi1sb29wL1xyXG4gICAgZm9yIChsZXQgW2luZGV4LCBpdGVtXSBvZiBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkuZW50cmllcygpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coaXRlbSk7XHJcbiAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PSBpdGVtVG9DaGVjay5uYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSXRlbSBmb3VuZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBcImluZGV4XCI6IGluZGV4LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coXCJJdGVtIG5vdCBmb3VuZC5cIik7ICAgIFxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGVja0Zvckl0ZW07IiwiaW1wb3J0IGJ1eUl0ZW1zV2l0aENhc2ggZnJvbSBcIi4vYnV5SXRlbXNXaXRoQ2FzaFwiO1xyXG5pbXBvcnQgY3JlYXRlRHJ1ZyBmcm9tIFwiLi9jcmVhdGVEcnVnXCI7XHJcbmltcG9ydCB7IGdldFByb2R1Y3RRdHlGcm9tSW52ZW50b3J5IH0gZnJvbSBcIi4vZHJ1Z0Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBnZXRQcm9kdWN0UXR5RnJvbVBsYXllckludmVudG9yeSB9IGZyb20gXCIuL3BsYXllclwiO1xyXG5pbXBvcnQgc2VsbEl0ZW1zRm9yQ2FzaCBmcm9tIFwiLi9zZWxsSXRlbXNGb3JDYXNoXCI7XHJcblxyXG5jb25zdCBkaXNwbGF5QnV5U2VsbFVJID0gKHByb2R1Y3ROYW1lLCBwcm9kdWN0UXR5LCBwcm9kdWN0UHJpY2UpID0+IHtcclxuICAgIGNvbnN0IGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZUNvbnRhaW5lcicpO1xyXG5cclxuICAgIGNvbnN0IGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdC5jbGFzc0xpc3QuYWRkKCdjb250YWluZXJCdXlTZWxsUHJvZHVjdCcpO1xyXG5cclxuICAgIGNvbnN0IGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0SGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdEhlYWRlci5jbGFzc0xpc3QuYWRkKCdidXlTZWxsVUlIZWFkZXInKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbFByb2R1Y3ROYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICAgIGxhYmVsUHJvZHVjdE5hbWUudGV4dENvbnRlbnQgPSBgJHtwcm9kdWN0TmFtZX0gYXQgJCR7cHJvZHVjdFByaWNlfS9nYDtcclxuXHJcbiAgICBjb25zdCBidG5DYW5jZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ0bkNhbmNlbC5jbGFzc0xpc3QuYWRkKCdidG5DYW5jZWwnKTtcclxuICAgIGJ0bkNhbmNlbC50ZXh0Q29udGVudCA9ICdYJztcclxuXHJcbiAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdEhlYWRlci5hcHBlbmRDaGlsZChsYWJlbFByb2R1Y3ROYW1lKTtcclxuICAgIGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0SGVhZGVyLmFwcGVuZENoaWxkKGJ0bkNhbmNlbCk7XHJcbiAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdC5hcHBlbmRDaGlsZChjb250YWluZXJCdXlTZWxsUHJvZHVjdEhlYWRlcik7XHJcblxyXG4gICAgY29uc3QgZ3JpZEJ1eVNlbGxQcm9kdWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBncmlkQnV5U2VsbFByb2R1Y3QuY2xhc3NMaXN0LmFkZCgnZ3JpZEJ1eVNlbGwnKTtcclxuXHJcbiAgICBjb25zdCBsYWJlbFRvdGFsQ29zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIGxhYmVsVG90YWxDb3N0LmNsYXNzTGlzdC5hZGQoJ2xhYmVsVG90YWxDb3N0Jyk7XHJcbiAgICBsYWJlbFRvdGFsQ29zdC50ZXh0Q29udGVudCA9ICckMCc7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUb3RhbEdhaW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBsYWJlbFRvdGFsR2Fpbi5jbGFzc0xpc3QuYWRkKCdsYWJlbFRvdGFsR2FpbicpO1xyXG4gICAgbGFiZWxUb3RhbEdhaW4udGV4dENvbnRlbnQgPSAnJDAnO1xyXG5cclxuICAgIGNvbnN0IGlucHV0QnV5UHJvZHVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICBpbnB1dEJ1eVByb2R1Y3QudHlwZSA9ICdudW1iZXInO1xyXG4gICAgaW5wdXRCdXlQcm9kdWN0Lm1pbiA9IDE7XHJcbiAgICBpbnB1dEJ1eVByb2R1Y3QudmFsdWUgPSAxO1xyXG4gICAgaW5wdXRCdXlQcm9kdWN0Lm1heCA9IGdldFByb2R1Y3RRdHlGcm9tSW52ZW50b3J5KHByb2R1Y3ROYW1lKTtcclxuXHJcbiAgICBjb25zdCBpbnB1dFNlbGxQcm9kdWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgIGlucHV0U2VsbFByb2R1Y3QudHlwZSA9ICdudW1iZXInO1xyXG4gICAgaW5wdXRTZWxsUHJvZHVjdC5taW4gPSAxO1xyXG4gICAgaW5wdXRTZWxsUHJvZHVjdC52YWx1ZSA9IDE7XHJcbiAgICBsZXQgbWF4UHJvZHVjdFRvU2VsbCA9IGdldFByb2R1Y3RRdHlGcm9tUGxheWVySW52ZW50b3J5KHByb2R1Y3ROYW1lKTtcclxuICAgIGlucHV0U2VsbFByb2R1Y3QubWF4ID0gbWF4UHJvZHVjdFRvU2VsbDtcclxuICAgIGlmIChtYXhQcm9kdWN0VG9TZWxsID09PSAwKSB7XHJcbiAgICAgICAgaW5wdXRTZWxsUHJvZHVjdC5taW4gPSAwO1xyXG4gICAgICAgIGlucHV0U2VsbFByb2R1Y3QudmFsdWUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJ0bkJ1eVByb2R1Y3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ0bkJ1eVByb2R1Y3QuY2xhc3NMaXN0LmFkZCgnYnRuQnV5Jyk7XHJcbiAgICBidG5CdXlQcm9kdWN0LnRleHRDb250ZW50ID0gJ0J1eSc7XHJcblxyXG4gICAgY29uc3QgYnRuU2VsbFByb2R1Y3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ0blNlbGxQcm9kdWN0LmNsYXNzTGlzdC5hZGQoJ2J0blNlbGwnKTtcclxuICAgIGJ0blNlbGxQcm9kdWN0LnRleHRDb250ZW50ID0gJ1NlbGwnO1xyXG5cclxuICAgIGdyaWRCdXlTZWxsUHJvZHVjdC5hcHBlbmRDaGlsZChsYWJlbFRvdGFsQ29zdCk7XHJcbiAgICBncmlkQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQobGFiZWxUb3RhbEdhaW4pO1xyXG4gICAgZ3JpZEJ1eVNlbGxQcm9kdWN0LmFwcGVuZENoaWxkKGlucHV0QnV5UHJvZHVjdCk7XHJcbiAgICBncmlkQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQoaW5wdXRTZWxsUHJvZHVjdCk7XHJcbiAgICBncmlkQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQoYnRuQnV5UHJvZHVjdCk7XHJcbiAgICBncmlkQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQoYnRuU2VsbFByb2R1Y3QpO1xyXG4gICAgY29udGFpbmVyQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQoZ3JpZEJ1eVNlbGxQcm9kdWN0KTtcclxuXHJcbiAgICBnYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0KTtcclxuXHJcblxyXG4gICAgaW5wdXRCdXlQcm9kdWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhpbnB1dEJ1eVByb2R1Y3QudmFsdWUpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHByb2R1Y3RQcmljZSk7XHJcbiAgICAgICAgbGFiZWxUb3RhbENvc3QudGV4dENvbnRlbnQgPSBgJCR7aW5wdXRCdXlQcm9kdWN0LnZhbHVlICogcHJvZHVjdFByaWNlfWA7XHJcbiAgICB9KVxyXG4gICAgaW5wdXRTZWxsUHJvZHVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgbGFiZWxUb3RhbEdhaW4udGV4dENvbnRlbnQgPSBgJCR7aW5wdXRTZWxsUHJvZHVjdC52YWx1ZSAqIHByb2R1Y3RQcmljZX1gO1xyXG4gICAgfSlcclxuICAgIGJ0bkNhbmNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdC5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgICBidG5CdXlQcm9kdWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0J1eVByb2R1Y3QnKTtcclxuICAgICAgICAvLyBjb25zdCBjbGlja2VkRHJ1Z0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5jb250YWluZXIke3Byb2R1Y3ROYW1lLnJlcGxhY2UoXCIgXCIsIFwiXCIpfWApXHJcblxyXG4gICAgICAgIGxldCBib3VnaHREcnVnID0gY3JlYXRlRHJ1Zyhwcm9kdWN0TmFtZSwgcGFyc2VJbnQocHJvZHVjdFByaWNlKSwgcGFyc2VJbnQoaW5wdXRCdXlQcm9kdWN0LnZhbHVlKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYm91Z2h0RHJ1Zyk7XHJcbiAgICAgICAgYnV5SXRlbXNXaXRoQ2FzaChib3VnaHREcnVnKVxyXG4gICAgICAgIGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0LnJlbW92ZSgpO1xyXG4gICAgfSlcclxuICAgIGJ0blNlbGxQcm9kdWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1NlbGxQcm9kdWN0Jyk7XHJcbiAgICAgICAgbGV0IHNvbGREcnVnID0gY3JlYXRlRHJ1Zyhwcm9kdWN0TmFtZSwgcGFyc2VJbnQocHJvZHVjdFByaWNlKSwgcGFyc2VJbnQoaW5wdXRTZWxsUHJvZHVjdC52YWx1ZSkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHNvbGREcnVnKTtcclxuICAgICAgICBzZWxsSXRlbXNGb3JDYXNoKHNvbGREcnVnKTtcclxuICAgICAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdC5yZW1vdmUoKTtcclxuICAgIH0pXHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGlzcGxheUJ1eVNlbGxVSTsiLCJpbXBvcnQgYWRkRHJ1Z3NUb0ludmVudG9yeSBmcm9tICcuL2FkZERydWdzVG9JbnZlbnRvcnknO1xyXG5pbXBvcnQgY2hhbmdlTW9uZXkgZnJvbSAnLi9jaGFuZ2VNb25leSc7XHJcbmltcG9ydCBjcmVhdGVEcnVnIGZyb20gJy4vY3JlYXRlRHJ1Zyc7XHJcbmltcG9ydCB7IGRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5IH0gZnJvbSAnLi9kaXNwbGF5RHJ1Z0xpc3QnO1xyXG5pbXBvcnQgeyBlZGl0VmVuZG9yRHJ1Z1F0eSB9IGZyb20gJy4vZHJ1Z0Z1bmN0aW9ucyc7XHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tICcuL3BsYXllci5qcyc7XHJcbmltcG9ydCB1cGRhdGVDdXJyZW5jeURpc3BsYXkgZnJvbSAnLi91cGRhdGVDdXJyZW5jeURpc3BsYXknO1xyXG5cclxuLy8gQnV5IGl0ZW1zIExvY2FsbHkgd2l0aCBDYXNoXHJcbmNvbnN0IGJ1eUl0ZW1zV2l0aENhc2ggPSAoYWRkZWRJdGVtLCB2ZW5kb3IsIGF2Z1F1YWxpdHkpID0+IHtcclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICB2ZW5kb3IgPSB2ZW5kb3IgfHwgJ0xvY2FsIERlYWxlcic7XHJcbiAgICBhdmdRdWFsaXR5ID0gYXZnUXVhbGl0eSB8fCA1LjA7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwbGF5ZXIpO1xyXG4gICAgbGV0IHRvdGFsUHJpY2UgPSBhZGRlZEl0ZW0ucHJpY2UgKiBhZGRlZEl0ZW0ucXVhbnRpdHk7XHJcbiAgICBpZiAodG90YWxQcmljZSA+IHBsYXllci5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlRvbyBCcm9rZSFcIik7XHJcbiAgICAgICAgYWxlcnQoJ1RvbyBCcm9rZSEnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tlZERydWdRdHlDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuY29udGFpbmVyJHthZGRlZEl0ZW0ubmFtZS5yZXBsYWNlKFwiIFwiLCBcIlwiKX0gLnByb2R1Y3RRdHkgPiBwYCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFB1cmNoYXNlZCAke2FkZGVkSXRlbS5xdWFudGl0eX0gb2YgJHthZGRlZEl0ZW0ubmFtZX0gZnJvbSAke3ZlbmRvcn0gaW4gJHtwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50TG9jYWx9YClcclxuICAgICAgICAvLyBEaWRuJ3Qgd29ya2luZyBjaGFuZ2luZyBtb25leSBpbiBjaGFuZ2Vtb25leSBmdW5jdGlvbj9cclxuICAgICAgICBsZXQgbmV3UXR5ID0gcGFyc2VJbnQoY2xpY2tlZERydWdRdHlDb250YWluZXIudGV4dENvbnRlbnQgLSBhZGRlZEl0ZW0ucXVhbnRpdHkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG5ld1F0eSk7XHJcbiAgICAgICAgbGV0IGVub3VnaFJvb20gPSBhZGREcnVnc1RvSW52ZW50b3J5KGFkZGVkSXRlbSk7XHJcbiAgICAgICAgaWYgKGVub3VnaFJvb20pIHtcclxuICAgICAgICAgICAgbGV0IHZlbmRvckRydWcgPSBjcmVhdGVEcnVnKGFkZGVkSXRlbS5uYW1lLCBhZGRlZEl0ZW0ucHJpY2UsIG5ld1F0eSwgYXZnUXVhbGl0eSk7XHJcbiAgICAgICAgICAgIGVkaXRWZW5kb3JEcnVnUXR5KHZlbmRvckRydWcpO1xyXG4gICAgICAgICAgICBjbGlja2VkRHJ1Z1F0eUNvbnRhaW5lci50ZXh0Q29udGVudCA9IHZlbmRvckRydWcucXVhbnRpdHlcclxuICAgICAgICAgICAgcGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCA9IGNoYW5nZU1vbmV5KHBsYXllci5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQsIC10b3RhbFByaWNlKTtcclxuICAgICAgICAgICAgdXBkYXRlQ3VycmVuY3lEaXNwbGF5KCdjYXNoRGlzcGxheScsIHBsYXllci5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIFBvc3NpYmxlIGV2ZW50IGdvZXMgaGVyZVxyXG4gICAgICAgIC8vaWYgZXZlbnQgZ29lcyB3ZWxsXHJcbiAgICAgICAgICAgIC8vIEFkZCBkcnVncyB0byBpbnZlbnRvcnlcclxuXHJcblxyXG4gICAgICAgIC8vIGVsc2UgXHJcbiAgICAgICAgICAgIC8vIGJhZEV2ZW50IFNjZW5hcmlvXHJcblxyXG4gICAgICAgIGRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5KCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBidXlJdGVtc1dpdGhDYXNoOyIsImltcG9ydCByZW1vdmVEcnVnc0Zyb21JbnZlbnRvcnkgZnJvbSAnLi9yZW1vdmVEcnVnc0Zyb21JbnZlbnRvcnkuanMnO1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIxIH0gZnJvbSAnLi9wbGF5ZXIuanMnO1xyXG5pbXBvcnQgY2hhbmdlTW9uZXkgZnJvbSAnLi9jaGFuZ2VNb25leS5qcyc7XHJcbmltcG9ydCB1cGRhdGVDdXJyZW5jeURpc3BsYXkgZnJvbSAnLi91cGRhdGVDdXJyZW5jeURpc3BsYXkuanMnO1xyXG5pbXBvcnQgdXBkYXRlSGVhbHRoRGlzcGxheSBmcm9tICcuL3VwZGF0ZUhlYWx0aERpc3BsYXkuanMnO1xyXG5pbXBvcnQgeyBkaXNwbGF5UGxheWVyRHJ1Z0ludmVudG9yeSB9IGZyb20gJy4vZGlzcGxheURydWdMaXN0LmpzJztcclxuaW1wb3J0IHsgZWRpdFZlbmRvckRydWdRdHkgfSBmcm9tICcuL2RydWdGdW5jdGlvbnMuanMnO1xyXG5cclxuLy8gU2VsbCBpdGVtcyBsb2NhbGx5IGZvciBjYXNoXHJcbmNvbnN0IHNlbGxJdGVtc0ZvckNhc2ggPSAocmVtb3ZlZEl0ZW0sIGN1cnJlbnRMb2NhdGlvbiwgdmVuZG9yLCBhdmdRdWFsaXR5KSA9PiB7XHJcbiAgICBsZXQgcGxheWVyID0gZ2V0UGxheWVyMSgpO1xyXG4gICAgbGV0IHRvdGFsUHJpY2UgPSByZW1vdmVkSXRlbS5wcmljZSAqIHJlbW92ZWRJdGVtLnF1YW50aXR5O1xyXG4gICAgY29uc29sZS5sb2cocmVtb3ZlZEl0ZW0pO1xyXG4gICAgXHJcbiAgICBsZXQgc2FsZVJlc3VsdCA9IHJlbW92ZURydWdzRnJvbUludmVudG9yeShyZW1vdmVkSXRlbSk7XHJcblxyXG4gICAgaWYgKHNhbGVSZXN1bHQgPT0gMSkge1xyXG4gICAgICAgIGNvbnN0IGNsaWNrZWREcnVnUXR5Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmNvbnRhaW5lciR7cmVtb3ZlZEl0ZW0ubmFtZS5yZXBsYWNlKFwiIFwiLCBcIlwiKX0gLnByb2R1Y3RRdHkgPiBwYCk7XHJcbiAgICAgICAgbGV0IG5ld1F0eSA9IHBhcnNlSW50KGNsaWNrZWREcnVnUXR5Q29udGFpbmVyLnRleHRDb250ZW50KSArIHJlbW92ZWRJdGVtLnF1YW50aXR5O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG5ld1F0eSk7XHJcbiAgICAgICAgY2xpY2tlZERydWdRdHlDb250YWluZXIudGV4dENvbnRlbnQgPSBuZXdRdHk7XHJcbiAgICAgICAgZWRpdFZlbmRvckRydWdRdHkocmVtb3ZlZEl0ZW0pO1xyXG4gICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQgPSBjaGFuZ2VNb25leShwbGF5ZXIucGxheWVyRGF0YS5jYXNoT25IYW5kLCB0b3RhbFByaWNlKTtcclxuICAgICAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2Nhc2hEaXNwbGF5JywgcGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCk7XHJcbiAgICAgICAgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkoKTtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWxlcnQoXCJIb3cgeW91IGdvbm5hIHNlbGwgbWUgc29tZXRoaW5nIHlvdSBhaW4ndCBnb3QgbWF5bmU/XCIpXHJcbiAgICAgICAgYWxlcnQoXCJZb3UgZ2V0IHN1Y2tlciBwdW5jaGVkIGluIHRoZSBiYWNrIG9mIHRoZSBoZWFkIGFuZC4uLmJsYWNrLi4ub3V0Li4uXCIpO1xyXG4gICAgICAgIHBsYXllci5jaGFuZ2VIZWFsdGgoLTUpO1xyXG4gICAgICAgIHVwZGF0ZUhlYWx0aERpc3BsYXkocGxheWVyLnBsYXllckRhdGEuaGVhbHRoKTtcclxuICAgICAgICAvL1NraXAgdG8gbmV4dCBzZXNzaW9uIG9mIGRheVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiWW91IGRvbid0IGhhdmUgdGhpcyB0byBzZWxsIVwiKTtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNlbGxJdGVtc0ZvckNhc2g7IiwiaW1wb3J0IHsgZ2V0Q3VycmVudERydWdMaXN0IH0gZnJvbSBcIi4vZHJ1Z0Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgZWxfYnV5T3JTZWxsQ2xpY2tlZFByb2R1Y3QgZnJvbSBcIi4vZWxfYnV5T3JTZWxsQ2xpY2tlZFByb2R1Y3RcIjtcclxuaW1wb3J0IGVsX2NsaWNrZWRQbGF5ZXJQcm9kdWN0IGZyb20gXCIuL2VsX2NsaWNrUGxheWVySW52ZW50b3J5UHJvZHVjdFwiO1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIxIH0gZnJvbSBcIi4vcGxheWVyLmpzXCI7XHJcblxyXG5jb25zdCBkaXNwbGF5RHJ1Z0J1eVNlbGxMaXN0ID0gKCkgPT4ge1xyXG4gICAgbGV0IGRydWdMaXN0ID0gZ2V0Q3VycmVudERydWdMaXN0KCk7XHJcbiAgICBjb25zdCBhdmFpbGFibGVQcm9kdWN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF2YWlsYWJsZVByb2R1Y3RDb250YWluZXInKTtcclxuICAgIGF2YWlsYWJsZVByb2R1Y3RDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIC8vIGdldCBkcnVnTGlzdCBcclxuICAgIGRydWdMaXN0LmZvckVhY2goKGRydWcpID0+IHtcclxuICAgICAgICBsZXQgZHJ1Z0RhdGFDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcnVnRGF0YUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0R3JpZCcpO1xyXG4gICAgICAgIGlmIChkcnVnLnF1YW50aXR5ID09IDApIHtcclxuICAgICAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2F2YWlsYWJsZVByb2R1Y3REYXRhJyk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuY2xhc3NMaXN0LmFkZChgY29udGFpbmVyJHtkcnVnLm5hbWUucmVwbGFjZShcIiBcIiwgXCJcIil9YCk7XHJcblxyXG4gICAgICAgIGxldCBkcnVnTmFtZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRydWdOYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3ROYW1lJyk7XHJcbiAgICAgICAgbGV0IGRydWdOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgIGRydWdOYW1lLnRleHRDb250ZW50ID0gZHJ1Zy5uYW1lO1xyXG5cclxuICAgICAgICBkcnVnTmFtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnTmFtZSk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z05hbWVDb250YWluZXIpO1xyXG5cclxuICAgICAgICBsZXQgZHJ1Z1F0eUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRydWdRdHlDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncHJvZHVjdFF0eScpO1xyXG4gICAgICAgIGxldCBkcnVnUXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgIGRydWdRdHkudGV4dENvbnRlbnQgPSBkcnVnLnF1YW50aXR5O1xyXG5cclxuICAgICAgICBkcnVnUXR5Q29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdRdHkpO1xyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdRdHlDb250YWluZXIpO1xyXG5cclxuICAgICAgICBsZXQgZHJ1Z1ByaWNlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZHJ1Z1ByaWNlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3RQcmljZScpO1xyXG4gICAgICAgIGxldCBkcnVnUHJpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgZHJ1Z1ByaWNlLnRleHRDb250ZW50ID0gZHJ1Zy5wcmljZTtcclxuXHJcbiAgICAgICAgZHJ1Z1ByaWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdQcmljZSk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z1ByaWNlQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgYXZhaWxhYmxlUHJvZHVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnRGF0YUNvbnRhaW5lcik7XHJcbiAgICB9KVxyXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIGZvciBjbGlja2luZyBwcm9kdWN0XHJcbiAgICBlbF9idXlPclNlbGxDbGlja2VkUHJvZHVjdCgpO1xyXG59XHJcblxyXG5jb25zdCBkaXNwbGF5UGxheWVyRHJ1Z0ludmVudG9yeSA9ICgpID0+IHtcclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICBjb25zdCBwcm9kdWN0T25IYW5kQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2R1Y3RPbkhhbmRDb250YWluZXInKTtcclxuICAgIHByb2R1Y3RPbkhhbmRDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuXHJcbiAgICBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkuZm9yRWFjaCgoZHJ1ZykgPT4ge1xyXG4gICAgICAgIGxldCBkcnVnRGF0YUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3RHcmlkJyk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncGxheWVySW52ZW50b3J5RGF0YScpO1xyXG5cclxuICAgICAgICBsZXQgZHJ1Z05hbWVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcnVnTmFtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0TmFtZScpO1xyXG4gICAgICAgIGxldCBkcnVnTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgICAgICBkcnVnTmFtZS50ZXh0Q29udGVudCA9IGRydWcubmFtZTtcclxuXHJcbiAgICAgICAgZHJ1Z05hbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z05hbWUpO1xyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdOYW1lQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgbGV0IGRydWdRdHlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcnVnUXR5Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3RRdHknKTtcclxuICAgICAgICBsZXQgZHJ1Z1F0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgICAgICBkcnVnUXR5LnRleHRDb250ZW50ID0gZHJ1Zy5xdWFudGl0eTtcclxuXHJcbiAgICAgICAgZHJ1Z1F0eUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnUXR5KTtcclxuICAgICAgICBkcnVnRGF0YUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnUXR5Q29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgbGV0IGRydWdQcmljZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRydWdQcmljZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0UHJpY2UnKTtcclxuICAgICAgICBsZXQgZHJ1Z1ByaWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cclxuICAgICAgICBkcnVnUHJpY2UudGV4dENvbnRlbnQgPSBkcnVnLnByaWNlO1xyXG5cclxuICAgICAgICBkcnVnUHJpY2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z1ByaWNlKTtcclxuICAgICAgICBkcnVnRGF0YUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnUHJpY2VDb250YWluZXIpO1xyXG5cclxuICAgICAgICBwcm9kdWN0T25IYW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdEYXRhQ29udGFpbmVyKTtcclxuICAgIH0pXHJcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgZm9yIGNsaWNraW5nIHByb2R1Y3RcclxuICAgIGVsX2NsaWNrZWRQbGF5ZXJQcm9kdWN0KCk7XHJcblxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgZGlzcGxheURydWdCdXlTZWxsTGlzdCxcclxuICAgIGRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5LFxyXG59IiwiaW1wb3J0IGRpc3BsYXlCdXlTZWxsVUkgZnJvbSBcIi4vZGlzcGxheUJ1eVNlbGxVSVwiO1xyXG5cclxuY29uc3QgZWxfYnV5T3JTZWxsQ2xpY2tlZFByb2R1Y3QgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBwcm9kdWN0Tm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYXZhaWxhYmxlUHJvZHVjdERhdGEnKTtcclxuXHJcbiAgICBwcm9kdWN0Tm9kZUxpc3QuZm9yRWFjaCgobm9kZSkgPT4ge1xyXG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGljaycpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhub2RlKTtcclxuICAgICAgICAgICAgbGV0IHByb2R1Y3ROYW1lID0gbm9kZS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdE5hbWUgPiBwJykudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHByb2R1Y3ROYW1lKTtcclxuICAgICAgICAgICAgbGV0IHByb2R1Y3RRdHkgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0UXR5ID4gcCcpLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9kdWN0UXR5KTtcclxuICAgICAgICAgICAgbGV0IHByb2R1Y3RQcmljZSA9IG5vZGUucXVlcnlTZWxlY3RvcignLnByb2R1Y3RQcmljZSA+IHAnKS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocHJvZHVjdFByaWNlKTtcclxuXHJcbiAgICAgICAgICAgIGRpc3BsYXlCdXlTZWxsVUkocHJvZHVjdE5hbWUsIHByb2R1Y3RRdHksIHByb2R1Y3RQcmljZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGVsX2J1eU9yU2VsbENsaWNrZWRQcm9kdWN0OyIsImltcG9ydCB7IGRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5IH0gZnJvbSBcIi4vZGlzcGxheURydWdMaXN0XCI7XHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcclxuaW1wb3J0IHVwZGF0ZUludmVudG9yeUFtb3VudERpc3BsYXkgZnJvbSBcIi4vdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheVwiO1xyXG5cclxuY29uc3QgZWxfY2xpY2tlZFBsYXllclByb2R1Y3QgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICBjb25zdCBwcm9kdWN0Tm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvZHVjdE9uSGFuZENvbnRhaW5lcicpO1xyXG5cclxuICAgIHByb2R1Y3ROb2RlTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGljaycpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhub2RlKTtcclxuICAgICAgICAgICAgbGV0IHByb2R1Y3ROYW1lID0gbm9kZS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdE5hbWUgPiBwJykudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2R1Y3ROYW1lKTtcclxuICAgICAgICAgICAgbGV0IHByb2R1Y3RRdHkgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0UXR5ID4gcCcpLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9kdWN0UXR5KTtcclxuICAgICAgICAgICAgbGV0IHByb2R1Y3RQcmljZSA9IG5vZGUucXVlcnlTZWxlY3RvcignLnByb2R1Y3RQcmljZSA+IHAnKS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvZHVjdFByaWNlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBkdW1wID0gY29uZmlybShcIkRvIHlvdSB3YW50IHRvIGR1bXA/XCIpO1xyXG4gICAgICAgICAgICBpZiAoZHVtcCkge1xyXG4gICAgICAgICAgICAgICAgcGxheWVyLmR1bXBQcm9kdWN0KHByb2R1Y3ROYW1lKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUludmVudG9yeUFtb3VudERpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZWxfY2xpY2tlZFBsYXllclByb2R1Y3Q7IiwiaW1wb3J0IHRyYXZlbExvY2FsIGZyb20gXCIuL3RyYXZlbExvY2FsXCI7XHJcblxyXG4vLyBEZWZhdWx0IENpdHkgTG9jYXRpb25cclxuY29uc3QgbG9jYXRpb25DaXRpZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgY2l0eU5hbWU6IFwiTmV3IFlvcmsgQ2l0eSwgTllcIiwgICAgICAgICAgIFxyXG4gICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYFRoZSBCaWcgQXBwbGUsIHdoZXJlIGFsbCB0aGUgV2FsbHN0cmVldCBtb25leSBpcyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvd2RlcmVkIGNvYXRlZCBhbmQgdGhlIGx1ZGVzIHdlcmVudCd0IGxlZnQgaW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgODAnc2AsICBcclxuICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcm9ueFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJRdWVlbnNcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQ2VudHJhbCBQYXJrXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk1hbmhhdHRhblwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJDb25leSBJc2xhbmRcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJvb2tseW5cIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNpdHlOYW1lOiBcIkxvcyBBbmdlbGVzLCBDQVwiLCAgICAgICAgICAgXHJcbiAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgSG9tZSB0byBjZWxlYnJpdGllcywgYXJ0aXN0cyBhbmQgZnJlZSBzcGlyaXRzLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvcyBBbmdlbGVzIG5ldmVyIHN0b3BzIGF0dHJhY3RpbmcgcGVvcGxlIGZyb20gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVyeSBjb3JuZXIgb2YgdGhlIGdsb2JlLiBUaGlzIGNvc21vcG9saXRhbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdHkgb2ZmZXJzIGEgaHViIGZvciB0aGUgZW50ZXJ0YWlubWVudCBpbmR1c3RyeSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBlYXN5IGFjY2VzcyB0byB0aGUgYmVhY2ggYW5kIHRob3NlIGludGVyZXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIENhbmRpIWAsICAgIFxyXG4gICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiSG9sbHl3b29kXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIldlc3QgSG9sbHl3b29kXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkRvd250b3duXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkJldmVybHkgSGlsbHNcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiVGhlIEJlYWNoZXNcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUGFzYWRlbmFcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNpdHlOYW1lOiBcIkNoaWNhZ28sIElMXCIsICAgICAgICAgICBcclxuICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBUaGUgY2l0eSBpcyBmYW1vdXMgZm9yIGl0cyBpY29uaWMgYXJjaGl0ZWN0dXJlIGFuZCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlYXV0aWZ1bCBza3lsaW5lLiBUaG9zZSBjb2xkLCBiaXR0ZXIgd2ludGVycyBpbiBDaGljYWdvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlIHRoZSBuZWVkIGZvciBGaXJlIGRpcmUhYCwgICAgXHJcbiAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiSHVtYm9sZHQgUGFya1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHYXJmaWVsZCBQYXJrXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIldlc3QgTG9vcFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJPbGQgVG93blwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJSb3Njb2UgVmlsbGFnZVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJMaW5jb2xuIFBhcmtcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNpdHlOYW1lOiBcIkhvdXN0b24sIFRYXCIsICAgICAgICAgICBcclxuICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBIb3VzdG9u4oCZcyBzdGFibGUgam9iIG1hcmtldCwgZGl2ZXJzZSBlY29ub215IGFuZCBsaXZhYmxlIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3Job29kcyBtYWtlIHRoZSBUZXhhcyBjaXR5IGEgcG9wdWxhciBjaG9pY2UgZm9yIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91bmcgcHJvZmVzc2lvbmFscy4gVGhlIG5pZ2h0IGxpZmUgaXMgYWxpdmUgYW5kIHdlbGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc28gYXJlIHRoZSBwYXJ0eSBmYXZvcnMgdGhhdCBnbyB3aXRoIGl0LmAsICAgIFxyXG4gICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkRvd250b3duXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNwcmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJGb3J0IEJlbmRcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJhem9yaWFcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiR2FsdmVzdG9uXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkxha2UgSG91c3RvblwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY2l0eU5hbWU6IFwiUGhlb25peCwgQVpcIiwgICAgICAgICAgIFxyXG4gICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYFN1cnJvdW5kZWQgYnkgZGVzZXJ0IG1vdW50YWlucyBhbmQgbnVtZXJvdXMgaGlraW5nIHRyYWlscyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBob2VuaXggaXMgdGhlIHBlcmZlY3QgcGxhY2UgdG8gbGl2ZSBmb3IgdGhvc2Ugd2hvIGxvdmUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVuZGluZyB0aW1lIGluIHRoZSBncmVhdCBvdXRkb29ycyBnZXR0aW5nICdhdHR1bmUnIHdpdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdHVyZWAsICAgIFxyXG4gICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlBhcmFkaXNlIFZhbGxleVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJNZXNhXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdsZW5kYWxlXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlBlb3JpYVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJBcGFjaGUgSnVuY3Rpb25cIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiU2NvdHRzZGFsZVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY2l0eU5hbWU6IFwiUGhpbGFkZWxwaGlhLCBQQVwiLCAgICAgICAgICAgXHJcbiAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgQmVzaWRlcyBiZWluZyBvbmUgb2YgdGhlIG1vc3QgaGlzdG9yaWNhbGx5IHNpZ25pZmljYW50IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0aWVzIGluIHRoZSBjb3VudHJ5LCBQaGlsYWRlbHBoaWEgb2ZmZXJzIGEgaGlwIGFydHMgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2VuZSwgbXVsdGlwbGUgbXVzaWMgdmVudWVzIGFuZCBwbGVudHkgb2YgdHJlbmR5IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdGF1cmFudHMsIHRoZSBIaXBzdGVycyBhcmUgaW50byAnZGVzaW5lcnMgaWYgeW91IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga25vdyB3aGF0IEkgbWVhbi4nYCwgICAgXHJcbiAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQ2hlc3RudXQgSGlsbFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJSb3hib3JvdWdoXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk1vdW50IEFpcnlcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRWFzdCBGYWxsc1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHZXJtYW4gVG93blwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJXZXN0IE9hayBMYW5lXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjaXR5TmFtZTogXCJKYWNrc29udmlsbGUsIEZMXCIsICAgICAgICAgICBcclxuICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBKYWNrc29udmlsbGUsIHBlcmZlY3RseSBwb3NpdGlvbmVkIGFsb25nIHRoZSBBdGxhbnRpYyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9jZWFuIGluIE5vcnRoZWFzdCBGbG9yaWRhLCBpcyBhIG5hdHVyYWwgcGFyYWRpc2UgZm9yIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRvcnMgbG9va2luZyBmb3IgYW4gJ2FmZm9yZGFibGUnIHlldCBsdXh1cmlvdXMgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbiwgd2l0aCBhbGwgdGhlICdhbW1lbml0aWVzJy5gLCAgICBcclxuICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJEb3dudG93blwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTcHJpbmdmaWVsZFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJFYXN0c2lkZVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTcG9ydHMgQ29tcGxleFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJGYWlyZmllbGRcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJlbnR3b29kXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjaXR5TmFtZTogXCJTZWF0dGxlLCBXQVwiLCAgICAgICAgICAgXHJcbiAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgVGhlIENIQVogWm9uZSBoYXMgYmVlbiBpbmRlZmluaXRlbHkgZXh0ZW5kZWQgZm9yIHlvdXIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXQsIFZpc2l0IFBpa2UgUGxhY2UgYW5kIHRoZSBQaWVyIHRvIGZpbmQgcGxlbnR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBzaW1pbGFyIGZlbGxvd3MgYW5kIHRob3NlIHdpbGxpbmcgdG8gaW52ZXN0IHRvIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGlkZWFzIGFuZCAnU3RhcnQtVXBzJ2AsICAgIFxyXG4gICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk5vcnRoIEdhdGVcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiR3JlZW4gTGFrZVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJVbml2ZXJzaXR5IERpc3RyaWN0XCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkNhcGl0b2wgSGlsbFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogMCwgICAgICAgICAgICAgICAgICAgICAgLy9CYW1tZXJcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIG1pblF1YW50aXR5OiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4UXVhbnRpdHk6IDEwMCxcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTb2RvXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk1hZ25vbGlhXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuXVxyXG5cclxuY29uc3QgZ2V0TG9jYXRpb25zQnlOYW1lID0gKGxvY2F0aW9uTmFtZSkgPT4ge1xyXG4gICAgZm9yIChsZXQgbG9jYXRpb24gb2YgbG9jYXRpb25DaXRpZXMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhsb2NhdGlvbik7XHJcbiAgICAgICAgaWYgKGxvY2F0aW9uLmNpdHlOYW1lID09IGxvY2F0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBjb25zdCBlbF90cmF2ZWxMb2NhdGlvbkNsaWNrZWQgPSAoKSA9PiB7XHJcbi8vICAgICBjb25zdCBcclxuLy8gfVxyXG5cclxuY29uc3QgdXBkYXRlVHJhdmVsQnV0dG9ucyA9IChjaXR5KSA9PiB7XHJcbiAgICBjb25zdCB0cmF2ZWxCdXR0b25Ob2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb2NhdGlvbkNvbnRhaW5lciBidXR0b24nKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNpdHkpO1xyXG4gICAgY29uc3QgcGxheWVyQ2l0eSA9IGdldExvY2F0aW9uc0J5TmFtZShjaXR5KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHRyYXZlbEJ1dHRvbk5vZGVMaXN0KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHBsYXllckNpdHkpO1xyXG5cclxuICAgIGxldCBpID0gMDtcclxuICAgIHRyYXZlbEJ1dHRvbk5vZGVMaXN0LmZvckVhY2goKG1ldHJvQnRuKSA9PiB7XHJcbiAgICAgICAgbWV0cm9CdG4udGV4dENvbnRlbnQgPSBwbGF5ZXJDaXR5LmxvY2F0aW9uc0xvY2FsW2ldLmxvY2F0aW9uTmFtZTtcclxuICAgICAgICBtZXRyb0J0bi5pZCA9IHBsYXllckNpdHkubG9jYXRpb25zTG9jYWxbaV0ubG9jYXRpb25OYW1lLnJlcGxhY2UoJyAnLCAnJyk7XHJcbiAgICAgICAgbWV0cm9CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobWV0cm9CdG4udGV4dENvbnRlbnQpO1xyXG4gICAgICAgICAgICB0cmF2ZWxMb2NhbChtZXRyb0J0bi50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBpKys7XHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCB7XHJcbiAgICB1cGRhdGVUcmF2ZWxCdXR0b25zLFxyXG59IiwiaW1wb3J0IHsgZGlzcGxheURydWdCdXlTZWxsTGlzdCB9IGZyb20gXCIuL2Rpc3BsYXlEcnVnTGlzdFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEcnVnTGlzdCwgc2V0Q3VycmVudERydWdMaXN0IH0gZnJvbSBcIi4vZHJ1Z0Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIxIH0gZnJvbSBcIi4vcGxheWVyXCI7XHJcbmltcG9ydCB1cGRhdGVMb2NhdGlvbkRpc3BsYXkgZnJvbSBcIi4vdXBkYXRlTG9jYXRpb25EaXNwbGF5XCI7XHJcblxyXG5cclxuY29uc3QgdHJhdmVsTG9jYWwgPSAoZGVzdGluYXRpb24pID0+IHtcclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICBsZXQgZXZlbnRPdXRjb21lO1xyXG4gICAgbGV0IHJhbmRvbUV2ZW50O1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHdlIGFyZSBhbHJlYWR5IGF0IGxvY2F0aW9uXHJcbiAgICBpZiAocGxheWVyLnBsYXllckRhdGEuY3VycmVudExvY2FsID09IGRlc3RpbmF0aW9uKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJZb3UgYXJlIGFscmVhZHkgaGVyZSFcIilcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb3NzaWJpbGl0eSBvZiBSYW5kb20gRXZlbnQgKE1ha2UgZnVuY3Rpb24pXHJcbiAgICBjb25zb2xlLmxvZyhcIllvdSBhcmUgZ2V0dGluZyByZWFkeSB0byB0cmF2ZWwuXCIpO1xyXG4gICAgY29uc29sZS5sb2coXCJIb3BlIGV2ZXJ5dGhpbmcgZ29lcyB3ZWxsLi4uXCIpXHJcbiAgICBjb25zb2xlLmxvZyhcIn5DaGVja2luZyBmb3IgUmFuZG9tIEV2ZW50flwiKTtcclxuICAgIGFsZXJ0KFwiWW91IGFyZSBnZXR0aW5nIHJlYWR5IHRvIHRyYXZlbC5cIik7XHJcbiAgICBhbGVydChcIkhvcGUgZXZlcnl0aGluZyBnb2VzIHdlbGwuLi5cIilcclxuICAgIGFsZXJ0KFwifkNoZWNraW5nIGZvciBSYW5kb20gRXZlbnR+XCIpO1xyXG4gICAgLy8gcmFuZG9tRXZlbnQgPSBjaGVja0ZvclJhbmRvbVRyYXZlbEV2ZW50KCk7XHJcbiAgICAvLyAvLyBVcGRhdGUgcGxheWVyIGxvY2F0aW4gdG8gbmV3IGxvY2F0aW9uXHJcbiAgICAvLyBpZiAocmFuZG9tRXZlbnQgPT0gdHJ1ZSkge1xyXG4gICAgLy8gICAgIC8vIFJ1biByYW5kb20gZXZlbnRcclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkxvb2tzIGxpa2Ugc29tZXRoaW5nIGNhbWUgdXAuXCIpO1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKFwiflJ1bm5pbmcgUmFuZG9tIEV2ZW50flwiKVxyXG4gICAgLy8gICAgIGV2ZW50T3V0Y29tZSA9IHJ1blJhbmRvbVRyYXZlbEV2ZW50KCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJMb29rcyBsaWtlIGl0J3MgZ29ubmEgYmUgc21vb3RoIHNhaWxpbmchXCIpO1xyXG4gICAgYWxlcnQoXCJMb29rcyBsaWtlIGl0J3MgZ29ubmEgYmUgc21vb3RoIHNhaWxpbmchXCIpO1xyXG5cclxuICAgIC8vIGlmIChldmVudE91dGNvbWUgPT0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBTdWNjZXNzZnVsIHRyYXZlbCB0byAke2Rlc3RpbmF0aW9ufWApO1xyXG4gICAgICAgIGFsZXJ0KGBTdWNjZXNzZnVsIHRyYXZlbCB0byAke2Rlc3RpbmF0aW9ufWApO1xyXG4gICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLmN1cnJlbnRMb2NhbCA9IGRlc3RpbmF0aW9uO1xyXG4gICAgICAgIGxldCBuZXdEcnVnTGlzdCA9IGNyZWF0ZURydWdMaXN0KCkgIC8vIGFyZ3MocXR5TWF4LCBsb2NhbE11bHRpcGxpZXIsIGx1Y2spXHJcbiAgICAgICAgc2V0Q3VycmVudERydWdMaXN0KG5ld0RydWdMaXN0KTtcclxuICAgICAgICBkaXNwbGF5RHJ1Z0J1eVNlbGxMaXN0KCk7XHJcbiAgICAgICAgdXBkYXRlTG9jYXRpb25EaXNwbGF5KGRlc3RpbmF0aW9uKVxyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhgRG9lc24ndCBsb29rIGxpa2UgeW91ciBnb2luZyB0byBtYWtlIGl0IHRvZGF5LCAke2V2ZW50T3V0Y29tZX0gXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgIGlzIGdvbm5hIHRpZSB1cyB1cCB0b2RheWApO1xyXG4gICAgLy8gfVxyXG5cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHRyYXZlbExvY2FsOyIsIlxyXG5pbXBvcnQgdXBkYXRlTG9jYXRpb25EaXNwbGF5IGZyb20gJy4vdXBkYXRlTG9jYXRpb25EaXNwbGF5LmpzJztcclxuaW1wb3J0IHVwZGF0ZVRyYW5zcG9ydGF0aW9uTWV0aG9kRGlzcGxheSBmcm9tICcuL3VwZGF0ZVRyYW5zcG9ydE1ldGhvZERpc3BsYXkuanMnO1xyXG5pbXBvcnQgdXBkYXRlQ3VycmVuY3lEaXNwbGF5IGZyb20gJy4vdXBkYXRlQ3VycmVuY3lEaXNwbGF5LmpzJztcclxuaW1wb3J0IHVwZGF0ZUhlYWx0aERpc3BsYXkgZnJvbSAnLi91cGRhdGVIZWFsdGhEaXNwbGF5LmpzJztcclxuaW1wb3J0IHsgZGlzcGxheURydWdCdXlTZWxsTGlzdCwgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkgfSBmcm9tICcuL2Rpc3BsYXlEcnVnTGlzdC5qcyc7XHJcbmltcG9ydCB7IGdldFBsYXllcjEsIHNldFBsYXllcjEgfSBmcm9tICcuL3BsYXllci5qcyc7XHJcbmltcG9ydCB7IGNyZWF0ZURydWdMaXN0LCBzZXRDdXJyZW50RHJ1Z0xpc3QgfSBmcm9tICcuL2RydWdGdW5jdGlvbnMuanMnO1xyXG5pbXBvcnQgeyB1cGRhdGVUcmF2ZWxCdXR0b25zIH0gZnJvbSAnLi91cGRhdGVUcmF2ZWxCdXR0b25zLmpzJztcclxuaW1wb3J0IHVwZGF0ZUludmVudG9yeUFtb3VudERpc3BsYXkgZnJvbSAnLi91cGRhdGVJbnZlbnRvcnlBbW91bnREaXNwbGF5LmpzJztcclxuXHJcbmNvbnN0IGluaXQgPSAoKSA9PiB7IFxyXG4gICAgc2V0UGxheWVyMSgpO1xyXG4gICAgbGV0IHBsYXllciA9IGdldFBsYXllcjEoKTtcclxuICAgIGNvbnN0IGZpcnN0RHJ1Z0xpc3QgPSBjcmVhdGVEcnVnTGlzdCgpO1xyXG4gICAgc2V0Q3VycmVudERydWdMaXN0KGZpcnN0RHJ1Z0xpc3QpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocGxheWVyKTtcclxuXHJcbiAgICAvLyBsZXQgd2VsY29tTWVzc2FnZTEgPSBgV2hhdCBpcyB1cCBteSBuZXcgZnJpZW5kIT8gJHtwbGF5ZXIucGxheWVyRGF0YS5uYW1lfSBpcyB0aGUgYCArXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICBcIm5hbWUgcmlnaHQ/IE9mIGNvdXJzZSBJIGhhdmUgaGVhcmQgZ29vZCB0aGluZ3MsIG9yIHdlIHdvdWxkbid0IFwiICtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgIFwiYmUgY29udmVyc2F0aW5nIGhlcmUgYXQgdGhlIG1vbWVudCwgd291bGQgd2U/XCI7XHJcbiAgICBsZXQgd2VsY29tTWVzc2FnZTEgPSBcIldoYXQgaXMgdXAgbXkgbmV3IGZyaWVuZCE/IEkgaGF2ZSBoZWFyZCBnb29kIHRoaW5ncywgb3Igd2Ugd291bGRuJ3QgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJiZSBjb252ZXJzYXRpbmcgaGVyZSBhdCB0aGUgbW9tZW50LCB3b3VsZCB3ZT9cIjtcclxuICAgIGxldCB3ZWxjb21lTUVzc2FnZTIgPSBcIldlbGwsIGlmIHdlJ3JlIGdldHRpbmcgZG93biB0byBidXNpbmVzcy4uLiBJIGRvbid0IHRvdWNoIHRoZSBzdHVmZiBteSBcIiArIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZiwgYnV0IEkga25vdyBhIGd1eSBhbmQgSSBoYXZlIHRoaXMgc3RhY2sgb2YgY2FzaCBoZXJlIHRvIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImdldCB5b3Ugc3RhcnRlZC4gSGl0IHVwIHRoZSBsb2NhbCBkZWFsZXIgYW5kIHBpY2sgdXAgdGhlIHN1cHBsaWVzIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZCB0byBzdGFydCB5b3VyIGVtcGlyZSBteSBmcmllbmQhIFNreSdzIHRoZSBsaW1pdCBhbmQgdGhlIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9ubHkgY29sb3Igd2Ugc2VlIGlzIEdSRUVFTiEhXCI7XHJcblxyXG4gICAgYWxlcnQod2VsY29tTWVzc2FnZTEpO1xyXG4gICAgYWxlcnQod2VsY29tZU1Fc3NhZ2UyKTtcclxuXHJcbiAgICB1cGRhdGVMb2NhdGlvbkRpc3BsYXkocGxheWVyLnBsYXllckRhdGEuY3VycmVudExvY2FsKTtcclxuICAgIHVwZGF0ZVRyYW5zcG9ydGF0aW9uTWV0aG9kRGlzcGxheShwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50VHJhbnNwb3J0TWV0aG9kKTtcclxuICAgIHVwZGF0ZVRyYXZlbEJ1dHRvbnMocGxheWVyLnBsYXllckRhdGEuY3VycmVudExvY2F0aW9uQ2l0eSk7XHJcbiAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2Nhc2hEaXNwbGF5JywgcGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwbGF5ZXIucGxheWVyRGF0YS5iYW5rQWNjb3VudCk7XHJcbiAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2JhbmtEaXNwbGF5JywgcGxheWVyLnBsYXllckRhdGEuYmFua0FjY291bnQpO1xyXG4gICAgdXBkYXRlQ3VycmVuY3lEaXNwbGF5KCdkZWJ0RGlzcGxheScsIHBsYXllci5wbGF5ZXJEYXRhLmRlYnQpO1xyXG4gICAgdXBkYXRlSGVhbHRoRGlzcGxheShwbGF5ZXIucGxheWVyRGF0YS5oZWFsdGgpO1xyXG5cclxuXHJcbiAgICBcclxuICAgIGRpc3BsYXlEcnVnQnV5U2VsbExpc3QoZmlyc3REcnVnTGlzdCk7XHJcbiAgICBkaXNwbGF5UGxheWVyRHJ1Z0ludmVudG9yeSgpO1xyXG4gICAgdXBkYXRlSW52ZW50b3J5QW1vdW50RGlzcGxheSgpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0OyIsImNvbnN0IHVwZGF0ZVRyYW5zcG9ydGF0aW9uTWV0aG9kRGlzcGxheSA9IChUcmFuc3BvcnRNZXRob2QpID0+IHtcclxuICAgIGNvbnN0IHRyYW5zcG9ydGF0aW9uTWV0aG9kRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50VHJhbnNwb3J0TWV0aG9kJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh0cmFuc3BvcnRhdGlvbk1ldGhvZERpc3BsYXkpO1xyXG4gICAgdHJhbnNwb3J0YXRpb25NZXRob2REaXNwbGF5LmlubmVyVGV4dCA9IFRyYW5zcG9ydE1ldGhvZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlVHJhbnNwb3J0YXRpb25NZXRob2REaXNwbGF5OyIsImltcG9ydCAnLi9yZXNldC5jc3MnO1xyXG5pbXBvcnQgJy4vc3R5bGVzLmNzcyc7XHJcbi8vIGltcG9ydCAnLi9ENXpkdGswLmpwZWcnO1xyXG5pbXBvcnQgZWxfYnRuTmV3R2FtZSBmcm9tICcuL2VsX25ld0dhbWUnO1xyXG5cclxuXHJcbi8vIGNvbnN0IGFwcCA9ICgoKSA9PiB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJUZXN0aW5nLi4uXCIpXHJcblxyXG4gICAgLy8gVmFyaWFibGUgdG8gaG9sZCBMb2NhdGlvbnMgYWZ0ZXIgaW5pdGlhdGlvbiA+PiBhbGxvdyBwbGF5ZXIgdG8gYWRkIGxvY2F0aW9ucyBvciB1c2UgZGVmYXVsdCBsb2NhdGlvbnNcclxuICAgIC8vY29uc3QgTE9DQVRJT05TID0gW107XHJcblxyXG5cclxuICAgIC8vIC8vIERlZmF1bHQgQ2l0eSBMb2NhdGlvblxyXG4gICAgLy8gY29uc3QgbG9jYXRpb25DaXRpZXMgPSBbXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBjaXR5TmFtZTogXCJOZXcgWW9yayBDaXR5LCBOWVwiLCAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYFRoZSBCaWcgQXBwbGUsIHdoZXJlIGFsbCB0aGUgV2FsbHN0cmVldCBtb25leSBpcyBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgcG93ZGVyZWQgY29hdGVkIGFuZCB0aGUgbHVkZXMgd2VyZW50J3QgbGVmdCBpbiBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIDgwJ3NgLCAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgLy8gICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcm9ueFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUXVlZW5zXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJDZW50cmFsIFBhcmtcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk1hbmhhdHRhblwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQ29uZXkgSXNsYW5kXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcm9va2x5blwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiTG9zIEFuZ2VsZXMsIENBXCIsICAgICAgICAgICBcclxuICAgIC8vICAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgSG9tZSB0byBjZWxlYnJpdGllcywgYXJ0aXN0cyBhbmQgZnJlZSBzcGlyaXRzLCBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9zIEFuZ2VsZXMgbmV2ZXIgc3RvcHMgYXR0cmFjdGluZyBwZW9wbGUgZnJvbSBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlcnkgY29ybmVyIG9mIHRoZSBnbG9iZS4gVGhpcyBjb3Ntb3BvbGl0YW4gXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdHkgb2ZmZXJzIGEgaHViIGZvciB0aGUgZW50ZXJ0YWlubWVudCBpbmR1c3RyeSBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGVhc3kgYWNjZXNzIHRvIHRoZSBiZWFjaCBhbmQgdGhvc2UgaW50ZXJlc3RlZFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBDYW5kaSFgLCAgICBcclxuICAgIC8vICAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgIC8vICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiSG9sbHl3b29kXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJXZXN0IEhvbGx5d29vZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRG93bnRvd25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkJldmVybHkgSGlsbHNcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlRoZSBCZWFjaGVzXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJQYXNhZGVuYVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiQ2hpY2FnbywgSUxcIiwgICAgICAgICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBUaGUgY2l0eSBpcyBmYW1vdXMgZm9yIGl0cyBpY29uaWMgYXJjaGl0ZWN0dXJlIGFuZCBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVhdXRpZnVsIHNreWxpbmUuIFRob3NlIGNvbGQsIGJpdHRlciB3aW50ZXJzIGluIENoaWNhZ29cclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZSB0aGUgbmVlZCBmb3IgRmlyZSBkaXJlIWAsICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiSHVtYm9sZHQgUGFya1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiR2FyZmllbGQgUGFya1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiV2VzdCBMb29wXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJPbGQgVG93blwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUm9zY29lIFZpbGxhZ2VcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkxpbmNvbG4gUGFya1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiSG91c3RvbiwgVFhcIiwgICAgICAgICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBIb3VzdG9u4oCZcyBzdGFibGUgam9iIG1hcmtldCwgZGl2ZXJzZSBlY29ub215IGFuZCBsaXZhYmxlIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcmhvb2RzIG1ha2UgdGhlIFRleGFzIGNpdHkgYSBwb3B1bGFyIGNob2ljZSBmb3IgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdW5nIHByb2Zlc3Npb25hbHMuIFRoZSBuaWdodCBsaWZlIGlzIGFsaXZlIGFuZCB3ZWxsLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc28gYXJlIHRoZSBwYXJ0eSBmYXZvcnMgdGhhdCBnbyB3aXRoIGl0LmAsICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRG93bnRvd25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNwcmluZ1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRm9ydCBCZW5kXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcmF6b3JpYVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiR2FsdmVzdG9uXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJMYWtlIEhvdXN0b25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGNpdHlOYW1lOiBcIlBoZW9uaXgsIEFaXCIsICAgICAgICAgICBcclxuICAgIC8vICAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgU3Vycm91bmRlZCBieSBkZXNlcnQgbW91bnRhaW5zIGFuZCBudW1lcm91cyBoaWtpbmcgdHJhaWxzLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBQaG9lbml4IGlzIHRoZSBwZXJmZWN0IHBsYWNlIHRvIGxpdmUgZm9yIHRob3NlIHdobyBsb3ZlIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVuZGluZyB0aW1lIGluIHRoZSBncmVhdCBvdXRkb29ycyBnZXR0aW5nICdhdHR1bmUnIHdpdGhcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0dXJlYCwgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgLy8gICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJQYXJhZGlzZSBWYWxsZXlcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk1lc2FcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdsZW5kYWxlXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJQZW9yaWFcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkFwYWNoZSBKdW5jdGlvblwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiU2NvdHRzZGFsZVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiUGhpbGFkZWxwaGlhLCBQQVwiLCAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYEJlc2lkZXMgYmVpbmcgb25lIG9mIHRoZSBtb3N0IGhpc3RvcmljYWxseSBzaWduaWZpY2FudCBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0aWVzIGluIHRoZSBjb3VudHJ5LCBQaGlsYWRlbHBoaWEgb2ZmZXJzIGEgaGlwIGFydHMgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLCBtdWx0aXBsZSBtdXNpYyB2ZW51ZXMgYW5kIHBsZW50eSBvZiB0cmVuZHkgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RhdXJhbnRzLCB0aGUgSGlwc3RlcnMgYXJlIGludG8gJ2Rlc2luZXJzIGlmIHlvdSBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAga25vdyB3aGF0IEkgbWVhbi4nYCwgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgLy8gICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJDaGVzdG51dCBIaWxsXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJSb3hib3JvdWdoXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJNb3VudCBBaXJ5XCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJFYXN0IEZhbGxzXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHZXJtYW4gVG93blwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiV2VzdCBPYWsgTGFuZVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiSmFja3NvbnZpbGxlLCBGTFwiLCAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYEphY2tzb252aWxsZSwgcGVyZmVjdGx5IHBvc2l0aW9uZWQgYWxvbmcgdGhlIEF0bGFudGljIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBPY2VhbiBpbiBOb3J0aGVhc3QgRmxvcmlkYSwgaXMgYSBuYXR1cmFsIHBhcmFkaXNlIGZvciBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRvcnMgbG9va2luZyBmb3IgYW4gJ2FmZm9yZGFibGUnIHlldCBsdXh1cmlvdXMgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLCB3aXRoIGFsbCB0aGUgJ2FtbWVuaXRpZXMnLmAsICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRG93bnRvd25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNwcmluZ2ZpZWxkXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJFYXN0c2lkZVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiU3BvcnRzIENvbXBsZXhcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkZhaXJmaWVsZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJlbnR3b29kXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICBdLFxyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBjaXR5TmFtZTogXCJTZWF0dGxlLCBXQVwiLCAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYFRoZSBDSEFaIFpvbmUgaGFzIGJlZW4gaW5kZWZpbml0ZWx5IGV4dGVuZGVkIGZvciB5b3VyIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXQsIFZpc2l0IFBpa2UgUGxhY2UgYW5kIHRoZSBQaWVyIHRvIGZpbmQgcGxlbnR5XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHNpbWlsYXIgZmVsbG93cyBhbmQgdGhvc2Ugd2lsbGluZyB0byBpbnZlc3QgdG8gXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBpZGVhcyBhbmQgJ1N0YXJ0LVVwcydgLCAgICBcclxuICAgIC8vICAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgIC8vICAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAvLyAgICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk5vcnRoIEdhdGVcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdyZWVuIExha2VcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlVuaXZlcnNpdHkgRGlzdHJpY3RcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkNhcGl0b2wgSGlsbFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IDAsICAgICAgICAgICAgICAgICAgICAgIC8vQmFtbWVyXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG1pblF1YW50aXR5OiAwLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG1heFF1YW50aXR5OiAxMDAsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTb2RvXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJNYWdub2xpYVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gXVxyXG5cclxuICAgIC8vIHRyYXZlbExvY2FsKGBLUCdzIEhvdXNlYCk7XHJcbiAgICAvL0luaXRpYWxpemUgZGlzcGxheSBwbGF5ZXIgZGVmYXVsdHNcclxuICAgIC8vIGNvbnN0IGluaXQgPSAoKSA9PiB7IFxyXG4gICAgLy8gICAgIGxldCBwbGF5ZXIxID0gY3JlYXRlUGxheWVyKFwiS1BJbmM0MjVcIiwyMCwyMDAsNTAwMDAsMjAwMDAsNTAwMDApO1xyXG4gICAgLy8gICAgIHVwZGF0ZUxvY2F0aW9uRGlzcGxheShwbGF5ZXIxLnBsYXllckRhdGEuY3VycmVudExvY2FsKTtcclxuICAgIC8vICAgICB1cGRhdGVUcmFuc3BvcnRhdGlvbk1ldGhvZERpc3BsYXkocGxheWVyMS5wbGF5ZXJEYXRhLmN1cnJlbnRUcmFuc3BvcnRNZXRob2QpO1xyXG4gICAgLy8gICAgIHVwZGF0ZUN1cnJlbmN5RGlzcGxheSgnY2FzaERpc3BsYXknLCBwbGF5ZXIxLnBsYXllckRhdGEuY2FzaE9uSGFuZCk7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2cocGxheWVyMS5wbGF5ZXJEYXRhLmJhbmtBY2NvdW50KTtcclxuICAgIC8vICAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2JhbmtEaXNwbGF5JywgcGxheWVyMS5wbGF5ZXJEYXRhLmJhbmtBY2NvdW50KTtcclxuICAgIC8vICAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2RlYnREaXNwbGF5JywgcGxheWVyMS5wbGF5ZXJEYXRhLmRlYnQpO1xyXG4gICAgLy8gICAgIHVwZGF0ZUhlYWx0aERpc3BsYXkocGxheWVyMS5wbGF5ZXJEYXRhLmhlYWx0aCk7XHJcbiAgICAvLyAgICAgZWxfYnRuTmV3R2FtZSgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIGVsX2J0bk5ld0dhbWUoKTtcclxuICAgIFxyXG5cclxuICAgIC8vIC8vIFRlc3RpbmdcclxuICAgIC8vIGxldCBwcmljZSA9IGRydWdMaXN0WzFdLnByaWNlO1xyXG4gICAgLy8gY29uc3QgYWRkZWRJdGVtID0geyBcIm5hbWVcIjogXCJDYW5uYWJpcyBGbG93ZXJcIixcInByaWNlXCI6IDEwLCBcInF1YW50aXR5XCI6IDEwLCBcInF1YWxpdHlcIjogM307XHJcbiAgICAvLyBjb25zdCByZW1vdmVkSXRlbSA9IHsgXCJuYW1lXCI6IFwiQ2FubmFiaXMgRmxvd2VyXCIsXCJwcmljZVwiOiAxMCwgXCJxdWFudGl0eVwiOiAxMCwgXCJxdWFsaXR5XCI6IDN9O1xyXG4gICAgLy8gY29uc29sZS5sb2coYWRkZWRJdGVtKTtcclxuICAgIC8vIC8vIFRlc3RpbmdcclxuXHJcbi8vIH0pKCk7XHJcbiIsImltcG9ydCBpbml0IGZyb20gXCIuL2luaXRcIjtcclxuXHJcbmNvbnN0IGVsX2J0bk5ld0dhbWUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBidG5OZXdHYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bk5ld0dhbWUnKTtcclxuXHJcbiAgICBidG5OZXdHYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjbGljaycpO1xyXG4gICAgICAgIGluaXQoKTtcclxuICAgIH0se29uY2U6IHRydWV9KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGVsX2J0bk5ld0dhbWU7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsInZhbHVlIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lclRleHQiLCJmb3JtYXR0ZXIiLCJJbnRsIiwiTnVtYmVyRm9ybWF0Iiwic2VsZWN0b3IiLCJjdXJyZW5jeURpc3BsYXkiLCJuZXdWYWx1ZSIsImZvcm1hdCIsInRleHRDb250ZW50IiwiY3VycmVudEhlYWx0aCIsIm5hbWUiLCJwcmljZSIsInF1YW50aXR5IiwicXVhbGl0eSIsImluZm8iLCJjb25zb2xlIiwibG9nIiwiY3VycmVudERydWdMaXN0IiwiZGVmYXVsdERydWdMaXN0IiwiY3JlYXRlRHJ1Z0xpc3QiLCJhcmdzIiwibmV3RHJ1Z0xpc3QiLCJmb3JFYWNoIiwiZHJ1ZyIsImNhbGN1bGF0ZWRQcmljZSIsImNvaW5GbGlwIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicXR5TWF4IiwibG9jYWxNdWx0aXBsaWVyIiwibHVjayIsImx1Y2tFZmZlY3QiLCJjYWxjdWxhdGVkUXR5IiwiZWRpdFZlbmRvckRydWdRdHkiLCJjaGFuZ2VkRHJ1ZyIsInNldEN1cnJlbnREcnVnTGlzdCIsImRydWdMaXN0IiwiaXRlbXNIZWxkIiwibmV3SXRlbXMiLCJhdmVyYWdlUHJpY2UiLCJyb3VuZCIsInBsYXllciIsImdldFBsYXllcjEiLCJwbGF5ZXJEYXRhIiwiY3VycmVudE51bU9mSXRlbXMiLCJtYXhJdGVtcyIsInBsYXllcjEiLCJhZGRlZEl0ZW0iLCJwbGF5ZXJJbnZlbnRvcnkiLCJhbGVydCIsIm92ZXJGbG93IiwibG9zdERydWdzIiwicG9wIiwiYWNjb3VudCIsImNoYW5nZSIsInJlbW92ZWRJdGVtIiwiZm91bmRJdGVtIiwiaXRlbVRvQ2hlY2siLCJlbnRyaWVzIiwicHJvZHVjdE5hbWUiLCJwcm9kdWN0UXR5IiwicHJvZHVjdFByaWNlIiwiZ2FtZUNvbnRhaW5lciIsImNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0IiwiY2xhc3NMaXN0IiwiYWRkIiwiY29udGFpbmVyQnV5U2VsbFByb2R1Y3RIZWFkZXIiLCJsYWJlbFByb2R1Y3ROYW1lIiwiYnRuQ2FuY2VsIiwiZ3JpZEJ1eVNlbGxQcm9kdWN0IiwibGFiZWxUb3RhbENvc3QiLCJsYWJlbFRvdGFsR2FpbiIsImlucHV0QnV5UHJvZHVjdCIsInR5cGUiLCJtaW4iLCJtYXgiLCJkcnVnTmFtZSIsImdldFByb2R1Y3RRdHlGcm9tSW52ZW50b3J5IiwiaW5wdXRTZWxsUHJvZHVjdCIsIm1heFByb2R1Y3RUb1NlbGwiLCJnZXRQcm9kdWN0UXR5RnJvbVBsYXllckludmVudG9yeSIsImJ0bkJ1eVByb2R1Y3QiLCJidG5TZWxsUHJvZHVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJib3VnaHREcnVnIiwicGFyc2VJbnQiLCJ2ZW5kb3IiLCJhdmdRdWFsaXR5IiwidG90YWxQcmljZSIsImNhc2hPbkhhbmQiLCJjbGlja2VkRHJ1Z1F0eUNvbnRhaW5lciIsInJlcGxhY2UiLCJuZXdRdHkiLCJ2ZW5kb3JEcnVnIiwiZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkiLCJzb2xkRHJ1ZyIsImN1cnJlbnRMb2NhdGlvbiIsImNoYW5nZUhlYWx0aCIsImhlYWx0aCIsImRpc3BsYXlEcnVnQnV5U2VsbExpc3QiLCJhdmFpbGFibGVQcm9kdWN0Q29udGFpbmVyIiwiaW5uZXJIVE1MIiwiZHJ1Z0RhdGFDb250YWluZXIiLCJkcnVnTmFtZUNvbnRhaW5lciIsImRydWdRdHlDb250YWluZXIiLCJkcnVnUXR5IiwiZHJ1Z1ByaWNlQ29udGFpbmVyIiwiZHJ1Z1ByaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGUiLCJwcm9kdWN0T25IYW5kQ29udGFpbmVyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiY29uZmlybSIsImR1bXBQcm9kdWN0IiwibG9jYXRpb25DaXRpZXMiLCJjaXR5TmFtZSIsImNpdHlEZXNjcmlwdGlvbiIsImNpdHlDb250cm9sIiwibG9jYXRpb25zTG9jYWwiLCJsb2NhdGlvbk5hbWUiLCJwcmljZVJhbmtpbmciLCJzZXJ2aWNlcyIsInBvbGljZVByZXNlbmNlIiwibWluUXVhbnRpdHkiLCJtYXhRdWFudGl0eSIsInVwZGF0ZVRyYXZlbEJ1dHRvbnMiLCJjaXR5IiwidHJhdmVsQnV0dG9uTm9kZUxpc3QiLCJwbGF5ZXJDaXR5IiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbnNCeU5hbWUiLCJtZXRyb0J0biIsImRlc3RpbmF0aW9uIiwiY3VycmVudExvY2FsIiwiY3VycmVudERheSIsIm1heERheXMiLCJiYW5rQWNjb3VudCIsImRlYnQiLCJndW5zIiwibHVja0xldmVsIiwiY3VycmVudExvY2F0aW9uQ2l0eSIsImN1cnJlbnRUcmFuc3BvcnRNZXRob2QiLCJjcmVhdGVQbGF5ZXIiLCJzZXRQbGF5ZXIxIiwiZmlyc3REcnVnTGlzdCIsIlRyYW5zcG9ydE1ldGhvZCIsIm9uY2UiXSwic291cmNlUm9vdCI6IiJ9