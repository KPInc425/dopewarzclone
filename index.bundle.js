(()=>{"use strict";var n={917:(n,r,e)=>{e.d(r,{Z:()=>i});var t=e(537),a=e.n(t),o=e(645),l=e.n(o)()(a());l.push([n.id,"/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} ","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;CAMC;;AAED;;;;;;;;;;;;IAYI,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;;IAEI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,oBAAoB;AACxB;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;AACpB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,QAAQ;IACR,4BAA4B;IAC5B,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} "],sourceRoot:""}]);const i=l},28:(n,r,e)=>{e.d(r,{Z:()=>i});var t=e(537),a=e.n(t),o=e(645),l=e.n(o)()(a());l.push([n.id,"html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 80%;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,oCAAoC;IACpC,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,wBAAwB;IACxB,mBAAmB;AACvB;;AAEA;IACI,+CAA+C;IAC/C,6BAA6B;IAC7B,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,gBAAgB;IAChB,kBAAkB;IAClB;yBACqB;IACrB,sBAAsB;AAC1B;AACA;IACI,+CAA+C;IAC/C,aAAa;IACb,kCAAkC;IAClC,wBAAwB;IACxB,YAAY;IACZ,uBAAuB;;AAE3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;;AAE3B;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;;AAEf;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,WAAW;AACf;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA,cAAc;AACd;IACI,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,aAAa;AACjB",sourcesContent:["html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 80%;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}"],sourceRoot:""}]);const i=l},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var l={};if(t)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(l[A]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);t&&l[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),r.push(d))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),l=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(l).concat([o]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var o={},l=[],i=0;i<n.length;i++){var A=n[i],c=t.base?A[0]+t.base:A[0],d=o[c]||0,s="".concat(c," ").concat(d);o[c]=d+1;var p=e(s),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var g=a(u,t);t.byIndex=i,r.splice(i,0,{identifier:s,updater:g,references:1})}l.push(s)}return l}function a(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,a){var o=t(n=n||[],a=a||{});return function(n){n=n||[];for(var l=0;l<o.length;l++){var i=e(o[l]);r[i].references--}for(var A=t(n,a),c=0;c<o.length;c++){var d=e(o[c]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}o=A}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,a&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var a=r[t];if(void 0!==a)return a.exports;var o=r[t]={id:t,exports:{}};return n[t](o,o.exports,e),o.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),e.nc=void 0,(()=>{var n=e(379),r=e.n(n),t=e(795),a=e.n(t),o=e(569),l=e.n(o),i=e(565),A=e.n(i),c=e(216),d=e.n(c),s=e(589),p=e.n(s),u=e(917),g={};g.styleTagTransform=p(),g.setAttributes=A(),g.insert=l().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),r()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;var m=e(28),C={};C.styleTagTransform=p(),C.setAttributes=A(),C.insert=l().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=d(),r()(m.Z,C),m.Z&&m.Z.locals&&m.Z.locals;const h=new Intl.NumberFormat({style:"currency"}),y=(n,r)=>{const e=document.getElementById(n);let t=h.format(r);e.textContent=`$${t}`},I=n=>{document.getElementById("healthDisplay").innerText=`${n}hp`},b=(n,r)=>{let e=(n.price*n.quantity+r.price*r.quantity)/(n.quantity+r.quantity);return console.log(`AveragePrice: ${e}`),e=Math.round(e),e},B=(n,r,e,t)=>({name:n,quantity:e,price:r,quality:t,info:()=>{console.log({name:n,quantity:e,price:r})}});let f;const v=()=>f,x=n=>{let r=v(),e=(()=>{let n=v(),r=0;for(let e of n.playerData.playerInventory)r+=e.quantity;return r})();if(console.log(`Items Held: ${e}g's`),e>=r.playerData.maxItems)return alert("Your pockets are already bulgin buddy, come back when you have some room."),console.log("You ain't got no more pockets!"),0;if(e+n.quantity>r.playerData.maxItems){let t=e+n.quantity-r.playerData.maxItems;alert(`You overstuffed your pockets, getting a lil greedy there... You dropped ${t}g's of ${n.name}`),console.log(`You dropped ${t}g's of ${n.name}`),n.quantity=r.playerData.maxItems-e,r.playerData.lostDrugs.push(B(n.name,n.price,t,n.quality))}for(let e of r.playerData.playerInventory)return console.log(e),e.name===n.name?(e.quantity+=n.quantity,e.price=b(e,n),console.log(r.playerData.playerInventory),1):("Nothing Here"==r.playerData.playerInventory[0].name&&r.playerData.playerInventory.pop(),r.playerData.playerInventory.push(B(n.name,n.price,n.quantity,n.quality)),console.log(r.playerData.playerInventory),1)},k=(n,r)=>n+r;let E=[];const q=[{name:"Cannabis Flower",price:10},{name:"Cannabis Extract",price:30},{name:"Acid",price:15},{name:"Cocaine",price:120},{name:"Crack",price:70},{name:"Heroin",price:95},{name:"Methamphetamine",price:50}],w=n=>{E.forEach((r=>{r.name===n.name&&(r.quantity=n.quantity)}))},D=n=>{let r=v(),e=(n=>{let r=v();for(let[e,t]of r.playerData.playerInventory.entries())return console.log(t),t.name==n.name?(console.log("Item found"),{name:t.name,index:e}):(console.log("Item not found."),null)})(n);if(null===e)return alert("You reach into your pockets and realize you've made a mistake..."),console.log("You don't own this item."),0;let t=e.index,a=r.playerData.playerInventory[t];return a.quantity-n.quantity<0?(console.log(`You do not have enough for this transactions. You have ${a.quantity}g's left...`),0):a.quantity-n.quantity==0?(console.log("vvv Player Inventory vvv"),console.log(r.playerData.playerInventory),r.playerData.playerInventory.splice(t,1),console.log("vvv Player Inventory vvv"),console.log(r.playerData.playerInventory),r.playerData.currentNumOfItems<1&&r.playerData.playerInventory.push(B("Nothing Here",0,0,0)),1):(console.log(`Item Quantity: ${a.quantity}`),a.quantity-=n.quantity,console.log(`Item Quantity: ${a.quantity}`),1)},S=(n,r,e)=>{const t=document.getElementById("gameContainer"),a=document.createElement("div");a.classList.add("containerBuySellProduct");const o=document.createElement("div");o.classList.add("buySellUIHeader");const l=document.createElement("h2");l.textContent=`${n} at $${e}/g`;const i=document.createElement("button");i.classList.add("btnCancel"),i.textContent="X",o.appendChild(l),o.appendChild(i),a.appendChild(o);const A=document.createElement("div");A.classList.add("gridBuySell");const c=document.createElement("p");c.classList.add("labelTotalCost"),c.textContent="$0";const d=document.createElement("p");d.classList.add("labelTotalGain"),d.textContent="$0";const s=document.createElement("input");s.type="number",s.min=1,s.value=1,s.max=(n=>{console.log(n);for(let r of E)if(console.log(r),r.name===n)return console.log(r.quantity),r.quantity})(n);const p=document.createElement("input");p.type="number",p.min=1,p.value=1;let u=(n=>{console.log(n);for(let r of f.playerData.playerInventory)return console.log(r),r.name===n?(console.log(r.quantity),r.quantity):0})(n);p.max=u,0===u&&(p.min=0,p.value=0);const g=document.createElement("button");g.classList.add("btnBuy"),g.textContent="Buy";const m=document.createElement("button");m.classList.add("btnSell"),m.textContent="Sell",A.appendChild(c),A.appendChild(d),A.appendChild(s),A.appendChild(p),A.appendChild(g),A.appendChild(m),a.appendChild(A),t.appendChild(a),s.addEventListener("change",(()=>{c.textContent="$"+s.value*e})),p.addEventListener("change",(()=>{d.textContent="$"+p.value*e})),i.addEventListener("click",(()=>{a.remove()})),g.addEventListener("click",(()=>{((n,r,e)=>{let t=v();r=r||"Local Dealer",e=e||5;let a=n.price*n.quantity;if(a>t.playerData.cashOnHand)console.log("Too Broke!"),alert("Too Broke!");else{const r=document.querySelector(`.container${n.name.replace(" ","")} .productQty > p`);let o=r.textContent-n.quantity;if(x(n)){let l=B(n.name,n.price,o,e);w(l),r.textContent=l.quantity,t.playerData.cashOnHand=k(t.playerData.cashOnHand,-a),y("cashDisplay",t.playerData.cashOnHand)}L()}})(B(n,parseInt(e),parseInt(s.value))),a.remove()})),m.addEventListener("click",(()=>{let r=B(n,e,p.value);console.log(r),((n,r,e,t)=>{let a=v(),o=n.price*n.quantity;if(console.log(n),1==D(n)){const r=document.querySelector(`.container${n.name.replace(" ","")} .productQty > p`);let e=parseInt(r.textContent+n.quantity);return console.log(e),r.textContent=e,w(n),a.playerData.cashOnHand=k(a.playerData.cashOnHand,o),y("cashDisplay",a.playerData.cashOnHand),L(),1}alert("How you gonna sell me something you ain't got mayne?"),alert("You get sucker punched in the back of the head and...black...out..."),a.changeHealth(-5),I(a.playerData.health),console.log("You don't have this to sell!")})(r),a.remove()}))},L=()=>{let n=v();const r=document.querySelector(".productOnHandContainer");r.innerHTML="",n.playerData.playerInventory.forEach((n=>{let e=document.createElement("div");e.classList.add("productGrid"),e.classList.add("playerInventoryData");let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=n.name,t.appendChild(a),e.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let l=document.createElement("p");l.textContent=n.quantity,o.appendChild(l),e.appendChild(o);let i=document.createElement("div");i.classList.add("productPrice");let A=document.createElement("p");A.textContent=n.price,i.appendChild(A),e.appendChild(i),r.appendChild(e)}))},T=()=>{((...n)=>{n.length<1&&(f=((...n)=>{let r={name:n[0]||"That Dope Guy",currentDay:n[0]||1,maxDays:n[1]||30,cashOnHand:n[2]||5500,bankAccount:n[3]||0,debt:n[4]||5500,guns:n[5]||[],health:n[6]||100,maxItems:n[7]||100,currentNumOfItems:n[8]||0,lostDrugs:n[9]||[],luckLevel:n[10]||1,currentLocationCity:n[11]||"Seattle, WA",currentLocal:n[12]||"Capitol Hill",currentTransportMethod:n[13]||"on the Bus",playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]};return{playerData:r,changeHealth:n=>{r.health+=n,console.log(`Player Health: ${r.health}`)},playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]}})("KPInc425",20,2e4,5e4,2e4,5e4))})();let n=v();const r=((...n)=>{let r=[];return q.forEach((e=>{let t,a=Math.floor(100*Math.random()),o=n[0]||100,l=n[1]||1,i=n[2]||0,A=1+.1*i;t=a>(50-i||50)?Math.floor(e.price+Math.floor(20*Math.random())/100*e.price):Math.floor(e.price-Math.floor(20*Math.random())/100*e.price);let c=Math.floor(Math.random()*o*l*A);r.push(B(e.name,t,c))})),r})();var e,t;E=r,t=n.playerData.currentLocal,document.getElementById("currentLocation").innerText=t,e=n.playerData.currentTransportMethod,document.getElementById("currentTransportMethod").innerText=e,y("cashDisplay",n.playerData.cashOnHand),y("bankDisplay",n.playerData.bankAccount),y("debtDisplay",n.playerData.debt),I(n.playerData.health),(n=>{const r=document.querySelector(".availableProductContainer");r.innerHTML="",n.forEach((n=>{let e=document.createElement("div");e.classList.add("productGrid"),0==n.quantity&&e.classList.add("hidden"),e.classList.add("availableProductData"),e.classList.add(`container${n.name.replace(" ","")}`);let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=n.name,t.appendChild(a),e.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let l=document.createElement("p");l.textContent=n.quantity,o.appendChild(l),e.appendChild(o);let i=document.createElement("div");i.classList.add("productPrice");let A=document.createElement("p");A.textContent=n.price,i.appendChild(A),e.appendChild(i),r.appendChild(e)})),document.querySelectorAll(".availableProductData").forEach((n=>{n.addEventListener("click",(()=>{let r=n.querySelector(".productName > p").textContent,e=(n.querySelector(".productQty > p").textContent,n.querySelector(".productPrice > p").textContent);S(r,0,e)}))}))})(r),L()};console.log("Testing..."),document.getElementById("btnNewGame").addEventListener("click",(()=>{T()}),{once:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,