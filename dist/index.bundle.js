(()=>{"use strict";var e={917:(e,n,r)=>{r.d(n,{Z:()=>l});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([e.id,"/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} ","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;CAMC;;AAED;;;;;;;;;;;;IAYI,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;;IAEI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,oBAAoB;AACxB;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;AACpB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,QAAQ;IACR,4BAA4B;IAC5B,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} "],sourceRoot:""}]);const l=i},28:(e,n,r)=>{r.d(n,{Z:()=>l});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([e.id,"html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 80%;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,oCAAoC;IACpC,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,wBAAwB;IACxB,mBAAmB;AACvB;;AAEA;IACI,+CAA+C;IAC/C,6BAA6B;IAC7B,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,gBAAgB;IAChB,kBAAkB;IAClB;yBACqB;IACrB,sBAAsB;AAC1B;AACA;IACI,+CAA+C;IAC/C,aAAa;IACb,kCAAkC;IAClC,wBAAwB;IACxB,YAAY;IACZ,uBAAuB;;AAE3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;;AAE3B;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;;AAEf;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,WAAW;AACf;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA,cAAc;AACd;IACI,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,aAAa;AACjB",sourcesContent:["html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 80%;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);t&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var o={},i=[],l=0;l<e.length;l++){var c=e[l],s=t.base?c[0]+t.base:c[0],d=o[s]||0,A="".concat(s," ").concat(d);o[s]=d+1;var p=r(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=a(u,t);t.byIndex=l,n.splice(l,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function a(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,a){var o=t(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=r(o[i]);n[l].references--}for(var c=t(e,a),s=0;s<o.length;s++){var d=r(o[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var a=n[t];if(void 0!==a)return a.exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,r),o.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{var e=r(379),n=r.n(e),t=r(795),a=r.n(t),o=r(569),i=r.n(o),l=r(565),c=r.n(l),s=r(216),d=r.n(s),A=r(589),p=r.n(A),u=r(917),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),n()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;var y=r(28),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),n()(y.Z,m),y.Z&&y.Z.locals&&y.Z.locals;const h=e=>{document.getElementById("currentLocation").innerText=e},C=new Intl.NumberFormat({style:"currency"}),v=(e,n)=>{const r=document.getElementById(e);let t=C.format(n);r.textContent=`$${t}`},b=e=>{document.getElementById("healthDisplay").innerText=`${e}hp`},f=(e,n,r,t)=>({name:e,quantity:r,price:n,quality:t,info:()=>{console.log({name:e,quantity:r,price:n})}});let I=[];const B=[{name:"Cannabis Flower",price:10},{name:"Cannabis Extract",price:30},{name:"Acid",price:15},{name:"Cocaine",price:120},{name:"Crack",price:70},{name:"Heroin",price:95},{name:"Methamphetamine",price:50}],k=(...e)=>{let n=[];return B.forEach((r=>{let t,a=Math.floor(100*Math.random()),o=e[0]||100,i=e[1]||1,l=e[2]||0,c=1+.1*l;t=a>(50-l||50)?Math.floor(r.price+Math.floor(20*Math.random())/100*r.price):Math.floor(r.price-Math.floor(20*Math.random())/100*r.price);let s=Math.floor(Math.random()*o*i*c);n.push(f(r.name,t,s))})),n},x=e=>{I.forEach((n=>{n.name===e.name&&(n.quantity=e.quantity)}))},w=e=>{I=e},E=(e,n)=>{let r=(e.price*e.quantity+n.price*n.quantity)/(e.quantity+n.quantity);return console.log(`AveragePrice: ${r}`),r=Math.round(r),r};let P;const q=()=>P,N=e=>{let n=q(),r=(()=>{let e=q(),n=0;for(let r of e.playerData.playerInventory)n+=r.quantity;return n})();if(console.log(`Items Held: ${r}g's`),r>=n.playerData.maxItems)return alert("Your pockets are already bulgin buddy, come back when you have some room."),console.log("You ain't got no more pockets!"),0;if(r+e.quantity>n.playerData.maxItems){let t=r+e.quantity-n.playerData.maxItems;alert(`You overstuffed your pockets, getting a lil greedy there... You dropped ${t}g's of ${e.name}`),console.log(`You dropped ${t}g's of ${e.name}`),e.quantity=n.playerData.maxItems-r,n.playerData.lostDrugs.push(f(e.name,e.price,t,e.quality))}for(let r of n.playerData.playerInventory)return console.log(r),r.name===e.name?(r.quantity+=e.quantity,r.price=E(r,e),console.log(n.playerData.playerInventory),1):("Nothing Here"==n.playerData.playerInventory[0].name&&n.playerData.playerInventory.pop(),n.playerData.playerInventory.push(f(e.name,e.price,e.quantity,e.quality)),console.log(n.playerData.playerInventory),1)},D=(e,n)=>e+n,R=e=>{let n=q(),r=(e=>{let n=q();for(let[r,t]of n.playerData.playerInventory.entries())return console.log(t),t.name==e.name?(console.log("Item found"),{name:t.name,index:r}):(console.log("Item not found."),null)})(e);if(null===r)return alert("You reach into your pockets and realize you've made a mistake..."),console.log("You don't own this item."),0;let t=r.index,a=n.playerData.playerInventory[t];return a.quantity-e.quantity<0?(console.log(`You do not have enough for this transactions. You have ${a.quantity}g's left...`),0):a.quantity-e.quantity==0?(console.log("vvv Player Inventory vvv"),console.log(n.playerData.playerInventory),n.playerData.playerInventory.splice(t,1),console.log("vvv Player Inventory vvv"),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems<1&&n.playerData.playerInventory.push(f("Nothing Here",0,0,0)),1):(console.log(`Item Quantity: ${a.quantity}`),a.quantity-=e.quantity,console.log(`Item Quantity: ${a.quantity}`),1)},Q=(e,n,r)=>{const t=document.getElementById("gameContainer"),a=document.createElement("div");a.classList.add("containerBuySellProduct");const o=document.createElement("div");o.classList.add("buySellUIHeader");const i=document.createElement("h2");i.textContent=`${e} at $${r}/g`;const l=document.createElement("button");l.classList.add("btnCancel"),l.textContent="X",o.appendChild(i),o.appendChild(l),a.appendChild(o);const c=document.createElement("div");c.classList.add("gridBuySell");const s=document.createElement("p");s.classList.add("labelTotalCost"),s.textContent="$0";const d=document.createElement("p");d.classList.add("labelTotalGain"),d.textContent="$0";const A=document.createElement("input");A.type="number",A.min=1,A.value=1,A.max=(e=>{console.log(e);for(let n of I)if(console.log(n),n.name===e)return console.log(n.quantity),n.quantity})(e);const p=document.createElement("input");p.type="number",p.min=1,p.value=1;let u=(e=>{console.log(e);for(let n of P.playerData.playerInventory)return console.log(n),n.name===e?(console.log(n.quantity),n.quantity):0})(e);p.max=u,0===u&&(p.min=0,p.value=0);const g=document.createElement("button");g.classList.add("btnBuy"),g.textContent="Buy";const y=document.createElement("button");y.classList.add("btnSell"),y.textContent="Sell",c.appendChild(s),c.appendChild(d),c.appendChild(A),c.appendChild(p),c.appendChild(g),c.appendChild(y),a.appendChild(c),t.appendChild(a),A.addEventListener("change",(()=>{s.textContent="$"+A.value*r})),p.addEventListener("change",(()=>{d.textContent="$"+p.value*r})),l.addEventListener("click",(()=>{a.remove()})),g.addEventListener("click",(()=>{((e,n,r)=>{let t=q();n=n||"Local Dealer",r=r||5;let a=e.price*e.quantity;if(a>t.playerData.cashOnHand)console.log("Too Broke!"),alert("Too Broke!");else{const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let o=n.textContent-e.quantity;if(N(e)){let i=f(e.name,e.price,o,r);x(i),n.textContent=i.quantity,t.playerData.cashOnHand=D(t.playerData.cashOnHand,-a),v("cashDisplay",t.playerData.cashOnHand)}S()}})(f(e,parseInt(r),parseInt(A.value))),a.remove()})),y.addEventListener("click",(()=>{let n=f(e,r,p.value);console.log(n),((e,n,r,t)=>{let a=q(),o=e.price*e.quantity;if(console.log(e),1==R(e)){const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let r=parseInt(n.textContent+e.quantity);return console.log(r),n.textContent=r,x(e),a.playerData.cashOnHand=D(a.playerData.cashOnHand,o),v("cashDisplay",a.playerData.cashOnHand),S(),1}alert("How you gonna sell me something you ain't got mayne?"),alert("You get sucker punched in the back of the head and...black...out..."),a.changeHealth(-5),b(a.playerData.health),console.log("You don't have this to sell!")})(n),a.remove()}))},L=()=>{let e=I;const n=document.querySelector(".availableProductContainer");n.innerHTML="",e.forEach((e=>{let r=document.createElement("div");r.classList.add("productGrid"),0==e.quantity&&r.classList.add("hidden"),r.classList.add("availableProductData"),r.classList.add(`container${e.name.replace(" ","")}`);let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,t.appendChild(a),r.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),r.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=e.price,l.appendChild(c),r.appendChild(l),n.appendChild(r)})),document.querySelectorAll(".availableProductData").forEach((e=>{e.addEventListener("click",(()=>{let n=e.querySelector(".productName > p").textContent,r=(e.querySelector(".productQty > p").textContent,e.querySelector(".productPrice > p").textContent);Q(n,0,r)}))}))},S=()=>{let e=q();const n=document.querySelector(".productOnHandContainer");n.innerHTML="",e.playerData.playerInventory.forEach((e=>{let r=document.createElement("div");r.classList.add("productGrid"),r.classList.add("playerInventoryData");let t=document.createElement("div");t.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,t.appendChild(a),r.appendChild(t);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),r.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=e.price,l.appendChild(c),r.appendChild(l),n.appendChild(r)}))},H=[{cityName:"New York City, NY",cityDescription:"The Big Apple, where all the Wallstreet money is \n                            powdered coated and the ludes werent't left in \n                            the 80's",cityControl:"Unknown",locationsLocal:[{locationName:"Bronx",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Queens",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Central Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Manhattan",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Coney Island",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brooklyn",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Los Angeles, CA",cityDescription:"Home to celebrities, artists and free spirits, \n                            Los Angeles never stops attracting people from \n                            every corner of the globe. This cosmopolitan \n                            city offers a hub for the entertainment industry \n                            and easy access to the beach and those interested\n                            in Candi!",cityControl:"Unknown",locationsLocal:[{locationName:"Hollywood",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Hollywood",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Beverly Hills",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"The Beaches",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Pasadena",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Chicago, IL",cityDescription:"The city is famous for its iconic architecture and \n                            beautiful skyline. Those cold, bitter winters in Chicago\n                            make the need for Fire dire!",cityControl:"Unknown",locationsLocal:[{locationName:"Humboldt Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Garfield Park",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Loop",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Old Town",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Roscoe Village",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Lincoln Park",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Houston, TX",cityDescription:"Houston’s stable job market, diverse economy and livable \n                            neighborhoods make the Texas city a popular choice for \n                            young professionals. The night life is alive and well,\n                            and so are the party favors that go with it.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Spring",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Fort Bend",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brazoria",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Galveston",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Lake Houston",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Pheonix, AZ",cityDescription:"Surrounded by desert mountains and numerous hiking trails,\n                            Phoenix is the perfect place to live for those who love \n                            spending time in the great outdoors getting 'attune' with\n                            nature",cityControl:"Unknown",locationsLocal:[{locationName:"Paradise Valley",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Mesa",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Glendale",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Peoria",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Apache Junction",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Scottsdale",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Philadelphia, PA",cityDescription:"Besides being one of the most historically significant \n                            cities in the country, Philadelphia offers a hip arts \n                            scene, multiple music venues and plenty of trendy \n                            restaurants, the Hipsters are into 'desiners if you \n                            know what I mean.'",cityControl:"Unknown",locationsLocal:[{locationName:"Chestnut Hill",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Roxborough",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Mount Airy",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"East Falls",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"German Town",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"West Oak Lane",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Jacksonville, FL",cityDescription:"Jacksonville, perfectly positioned along the Atlantic \n                            Ocean in Northeast Florida, is a natural paradise for \n                            visitors looking for an 'affordable' yet luxurious \n                            destination, with all the 'ammenities'.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Springfield",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Eastside",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Sports Complex",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Fairfield",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Brentwood",avgQuality:"",priceRanking:"",services:"",policePresence:""}]},{cityName:"Seattle, WA",cityDescription:"The CHAZ Zone has been indefinitely extended for your \n                            market, Visit Pike Place and the Pier to find plenty\n                            of similar fellows and those willing to invest to \n                            new ideas and 'Start-Ups'",cityControl:"Unknown",locationsLocal:[{locationName:"North Gate",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Green Lake",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"University District",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Capitol Hill",avgQuality:0,priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Sodo",avgQuality:"",priceRanking:"",services:"",policePresence:""},{locationName:"Magnolia",avgQuality:"",priceRanking:"",services:"",policePresence:""}]}],T=e=>{const n=document.querySelectorAll(".locationContainer button");console.log(e);const r=(e=>{for(let n of H)if(console.log(n),n.cityName==e)return n})(e);console.log(n),console.log(r);let t=0;n.forEach((e=>{e.textContent=r.locationsLocal[t].locationName,e.id=r.locationsLocal[t].locationName.replace(" ",""),e.addEventListener("click",(()=>{console.log(e.textContent),(e=>{let n=q();if(n.playerData.currentLocal==e)return console.log("You are already here!"),0;console.log("You are getting ready to travel."),console.log("Hope everything goes well..."),console.log("~Checking for Random Event~"),alert("You are getting ready to travel."),alert("Hope everything goes well..."),alert("~Checking for Random Event~"),console.log("Looks like it's gonna be smooth sailing!"),alert("Looks like it's gonna be smooth sailing!"),console.log(`Successful travel to ${e}`),alert(`Successful travel to ${e}`),n.playerData.currentLocal=e;let r=k();w(r),L(),h(e)})(e.textContent)})),t++}))},Y=()=>{((...e)=>{e.length<1&&(P=((...e)=>{let n={name:e[0]||"That Dope Guy",currentDay:e[0]||1,maxDays:e[1]||30,cashOnHand:e[2]||5500,bankAccount:e[3]||0,debt:e[4]||5500,guns:e[5]||[],health:e[6]||100,maxItems:e[7]||100,currentNumOfItems:e[8]||0,lostDrugs:e[9]||[],luckLevel:e[10]||1,currentLocationCity:e[11]||"Seattle, WA",currentLocal:e[12]||"Capitol Hill",currentTransportMethod:e[13]||"on the Bus",playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]};return{playerData:n,changeHealth:e=>{n.health+=e,console.log(`Player Health: ${n.health}`)},playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]}})("KPInc425",20,2e4,5e4,2e4,5e4))})();let e=q();const n=k();var r;w(n),h(e.playerData.currentLocal),r=e.playerData.currentTransportMethod,document.getElementById("currentTransportMethod").innerText=r,T(e.playerData.currentLocationCity),v("cashDisplay",e.playerData.cashOnHand),v("bankDisplay",e.playerData.bankAccount),v("debtDisplay",e.playerData.debt),b(e.playerData.health),L(),S()};console.log("Testing..."),document.getElementById("btnNewGame").addEventListener("click",(()=>{Y()}),{once:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eUcsR0FlbkIsRUFBc0JoRyxFQUFPRSxXQUFXbUYsY0M3QkRZLEVEOEJMakcsRUFBT0UsV0FBVzJGLHVCQzdCaEI3TCxTQUFTa0QsZUFBZSwwQkFFaENDLFVBQVk4SSxFRDRCeENwQixFQUFvQjdFLEVBQU9FLFdBQVcwRixxQkFDdEMsRUFBc0IsY0FBZTVGLEVBQU9FLFdBQVd5QyxZQUV2RCxFQUFzQixjQUFlM0MsRUFBT0UsV0FBV3NGLGFBQ3ZELEVBQXNCLGNBQWV4RixFQUFPRSxXQUFXdUYsTUFDdkQsRUFBb0J6RixFQUFPRSxXQUFXbUQsUUFJdENDLElBQ0FOLEtFakNBOUUsUUFBUUMsSUFBSSxjQ0xPbkUsU0FBU2tELGVBQWUsY0FFaENxRixpQkFBaUIsU0FBUyxLQUVqQyxNQUNGLENBQUMyRCxNQUFNLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL3Jlc2V0LmNzcz9lZGUwIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvc3R5bGVzLmNzcz80NGIyIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvdXBkYXRlTG9jYXRpb25EaXNwbGF5LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvdXBkYXRlQ3VycmVuY3lEaXNwbGF5LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvdXBkYXRlSGVhbHRoRGlzcGxheS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2NyZWF0ZURydWcuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9kcnVnRnVuY3Rpb25zLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvY2hlY2tQcmljZUF2ZXJhZ2UuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9hZGREcnVnc1RvSW52ZW50b3J5LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvY2hlY2tOdW1PZkl0ZW1zSGVsZC5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2NoYW5nZU1vbmV5LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvcmVtb3ZlRHJ1Z3NGcm9tSW52ZW50b3J5LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvY2hlY2tGb3JJdGVtLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvZGlzcGxheUJ1eVNlbGxVSS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2J1eUl0ZW1zV2l0aENhc2guanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9zZWxsSXRlbXNGb3JDYXNoLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvZGlzcGxheURydWdMaXN0LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvZWxfYnV5T3JTZWxsQ2xpY2tlZFByb2R1Y3QuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy91cGRhdGVUcmF2ZWxCdXR0b25zLmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvdHJhdmVsTG9jYWwuanMiLCJ3ZWJwYWNrOi8vZG9wZXdhcnNjbG9uZS8uL3NyYy9pbml0LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvdXBkYXRlVHJhbnNwb3J0TWV0aG9kRGlzcGxheS5qcyIsIndlYnBhY2s6Ly9kb3Bld2Fyc2Nsb25lLy4vc3JjL2RvcGVXYXJ6LmpzIiwid2VicGFjazovL2RvcGV3YXJzY2xvbmUvLi9zcmMvZWxfbmV3R2FtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qXFxyXFxuaHRtbDVkb2N0b3IuY29tIFJlc2V0IFN0eWxlc2hlZXRcXHJcXG52MS42LjFcXHJcXG5MYXN0IFVwZGF0ZWQ6IDIwMTAtMDktMTdcXHJcXG5BdXRob3I6IFJpY2hhcmQgQ2xhcmsgLSBodHRwOi8vcmljaGNsYXJrZGVzaWduLmNvbVxcclxcblR3aXR0ZXI6IEByaWNoX2NsYXJrXFxyXFxuKi9cXHJcXG5cXHJcXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIG9iamVjdCwgaWZyYW1lLFxcclxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcXHJcXG5hYmJyLCBhZGRyZXNzLCBjaXRlLCBjb2RlLFxcclxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgc2FtcCxcXHJcXG5zbWFsbCwgc3Ryb25nLCBzdWIsIHN1cCwgdmFyLFxcclxcbmIsIGksXFxyXFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcXHJcXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcXHJcXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcXHJcXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXFxyXFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uLCBzdW1tYXJ5LFxcclxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcbiAgICBwYWRkaW5nOjA7XFxyXFxuICAgIGJvcmRlcjowO1xcclxcbiAgICBvdXRsaW5lOjA7XFxyXFxuICAgIGZvbnQtc2l6ZToxMDAlO1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTtcXHJcXG4gICAgYmFja2dyb3VuZDp0cmFuc3BhcmVudDtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OjE7XFxyXFxufVxcclxcblxcclxcbmFydGljbGUsYXNpZGUsZGV0YWlscyxmaWdjYXB0aW9uLGZpZ3VyZSxcXHJcXG5mb290ZXIsaGVhZGVyLGhncm91cCxtZW51LG5hdixzZWN0aW9uIHtcXHJcXG4gICAgZGlzcGxheTpibG9jaztcXHJcXG59XFxyXFxuXFxyXFxubmF2IHVsIHtcXHJcXG4gICAgbGlzdC1zdHlsZTpub25lO1xcclxcbn1cXHJcXG5cXHJcXG5ibG9ja3F1b3RlLCBxIHtcXHJcXG4gICAgcXVvdGVzOm5vbmU7XFxyXFxufVxcclxcblxcclxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxcclxcbnE6YmVmb3JlLCBxOmFmdGVyIHtcXHJcXG4gICAgY29udGVudDonJztcXHJcXG4gICAgY29udGVudDpub25lO1xcclxcbn1cXHJcXG5cXHJcXG5hIHtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgZm9udC1zaXplOjEwMCU7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOmJhc2VsaW5lO1xcclxcbiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBjaGFuZ2UgY29sb3VycyB0byBzdWl0IHlvdXIgbmVlZHMgKi9cXHJcXG5pbnMge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZjk7XFxyXFxuICAgIGNvbG9yOiMwMDA7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjpub25lO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBjaGFuZ2UgY29sb3VycyB0byBzdWl0IHlvdXIgbmVlZHMgKi9cXHJcXG5tYXJrIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojZmY5O1xcclxcbiAgICBjb2xvcjojMDAwO1xcclxcbiAgICBmb250LXN0eWxlOml0YWxpYztcXHJcXG4gICAgZm9udC13ZWlnaHQ6Ym9sZDtcXHJcXG59XFxyXFxuXFxyXFxuZGVsIHtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxyXFxufVxcclxcblxcclxcbmFiYnJbdGl0bGVdLCBkZm5bdGl0bGVdIHtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbToxcHggZG90dGVkO1xcclxcbiAgICBjdXJzb3I6aGVscDtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUge1xcclxcbiAgICBib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7XFxyXFxuICAgIGJvcmRlci1zcGFjaW5nOjA7XFxyXFxufVxcclxcblxcclxcbi8qIGNoYW5nZSBib3JkZXIgY29sb3VyIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcclxcbmhyIHtcXHJcXG4gICAgZGlzcGxheTpibG9jaztcXHJcXG4gICAgaGVpZ2h0OjFweDtcXHJcXG4gICAgYm9yZGVyOjA7ICBcXHJcXG4gICAgYm9yZGVyLXRvcDoxcHggc29saWQgI2NjY2NjYztcXHJcXG4gICAgbWFyZ2luOjFlbSAwO1xcclxcbiAgICBwYWRkaW5nOjA7XFxyXFxufVxcclxcblxcclxcbmlucHV0LCBzZWxlY3Qge1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7XFxyXFxufSBcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcmVzZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7Ozs7Q0FNQzs7QUFFRDs7Ozs7Ozs7Ozs7O0lBWUksUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTs7SUFFSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTs7SUFFSSxVQUFVO0lBQ1YsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFFBQVE7SUFDUixTQUFTO0lBQ1QsY0FBYztJQUNkLHVCQUF1QjtJQUN2QixzQkFBc0I7QUFDMUI7O0FBRUEsc0NBQXNDO0FBQ3RDO0lBQ0kscUJBQXFCO0lBQ3JCLFVBQVU7SUFDVixvQkFBb0I7QUFDeEI7O0FBRUEsc0NBQXNDO0FBQ3RDO0lBQ0kscUJBQXFCO0lBQ3JCLFVBQVU7SUFDVixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksd0JBQXdCO0lBQ3hCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixnQkFBZ0I7QUFDcEI7O0FBRUEsNENBQTRDO0FBQzVDO0lBQ0ksYUFBYTtJQUNiLFVBQVU7SUFDVixRQUFRO0lBQ1IsNEJBQTRCO0lBQzVCLFlBQVk7SUFDWixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLypcXHJcXG5odG1sNWRvY3Rvci5jb20gUmVzZXQgU3R5bGVzaGVldFxcclxcbnYxLjYuMVxcclxcbkxhc3QgVXBkYXRlZDogMjAxMC0wOS0xN1xcclxcbkF1dGhvcjogUmljaGFyZCBDbGFyayAtIGh0dHA6Ly9yaWNoY2xhcmtkZXNpZ24uY29tXFxyXFxuVHdpdHRlcjogQHJpY2hfY2xhcmtcXHJcXG4qL1xcclxcblxcclxcbmh0bWwsIGJvZHksIGRpdiwgc3Bhbiwgb2JqZWN0LCBpZnJhbWUsXFxyXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcclxcbmFiYnIsIGFkZHJlc3MsIGNpdGUsIGNvZGUsXFxyXFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzYW1wLFxcclxcbnNtYWxsLCBzdHJvbmcsIHN1Yiwgc3VwLCB2YXIsXFxyXFxuYiwgaSxcXHJcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcclxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcclxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcclxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcXHJcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24sIHN1bW1hcnksXFxyXFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcXHJcXG4gICAgbWFyZ2luOjA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG4gICAgYm9yZGVyOjA7XFxyXFxuICAgIG91dGxpbmU6MDtcXHJcXG4gICAgZm9udC1zaXplOjEwMCU7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOmJhc2VsaW5lO1xcclxcbiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgbGluZS1oZWlnaHQ6MTtcXHJcXG59XFxyXFxuXFxyXFxuYXJ0aWNsZSxhc2lkZSxkZXRhaWxzLGZpZ2NhcHRpb24sZmlndXJlLFxcclxcbmZvb3RlcixoZWFkZXIsaGdyb3VwLG1lbnUsbmF2LHNlY3Rpb24ge1xcclxcbiAgICBkaXNwbGF5OmJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwge1xcclxcbiAgICBsaXN0LXN0eWxlOm5vbmU7XFxyXFxufVxcclxcblxcclxcbmJsb2NrcXVvdGUsIHEge1xcclxcbiAgICBxdW90ZXM6bm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxyXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcclxcbiAgICBjb250ZW50OicnO1xcclxcbiAgICBjb250ZW50Om5vbmU7XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcbiAgICBtYXJnaW46MDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbiAgICBmb250LXNpemU6MTAwJTtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246YmFzZWxpbmU7XFxyXFxuICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbi8qIGNoYW5nZSBjb2xvdXJzIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcclxcbmlucyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6I2ZmOTtcXHJcXG4gICAgY29sb3I6IzAwMDtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOm5vbmU7XFxyXFxufVxcclxcblxcclxcbi8qIGNoYW5nZSBjb2xvdXJzIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcclxcbm1hcmsge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiNmZjk7XFxyXFxuICAgIGNvbG9yOiMwMDA7XFxyXFxuICAgIGZvbnQtc3R5bGU6aXRhbGljO1xcclxcbiAgICBmb250LXdlaWdodDpib2xkO1xcclxcbn1cXHJcXG5cXHJcXG5kZWwge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcXHJcXG59XFxyXFxuXFxyXFxuYWJiclt0aXRsZV0sIGRmblt0aXRsZV0ge1xcclxcbiAgICBib3JkZXItYm90dG9tOjFweCBkb3R0ZWQ7XFxyXFxuICAgIGN1cnNvcjpoZWxwO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZSB7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtcXHJcXG4gICAgYm9yZGVyLXNwYWNpbmc6MDtcXHJcXG59XFxyXFxuXFxyXFxuLyogY2hhbmdlIGJvcmRlciBjb2xvdXIgdG8gc3VpdCB5b3VyIG5lZWRzICovXFxyXFxuaHIge1xcclxcbiAgICBkaXNwbGF5OmJsb2NrO1xcclxcbiAgICBoZWlnaHQ6MXB4O1xcclxcbiAgICBib3JkZXI6MDsgIFxcclxcbiAgICBib3JkZXItdG9wOjFweCBzb2xpZCAjY2NjY2NjO1xcclxcbiAgICBtYXJnaW46MWVtIDA7XFxyXFxuICAgIHBhZGRpbmc6MDtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXQsIHNlbGVjdCB7XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOm1pZGRsZTtcXHJcXG59IFwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwge1xcclxcbiAgICAvKiBiYWNrZ3JvdW5kOiByZ2IoNDQsIDQ0LCA0NCk7ICovXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig5LCA5LCA5KTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIG1heC13aWR0aDogODAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuaDMge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZ2FtZUNvbnRhaW5lciB7XFxyXFxuICAgIC8qIG1pbi13aWR0aDogNTAwcHg7ICovXFxyXFxuICAgIHdpZHRoOiBhdXRvO1xcclxcbiAgICAvKiBoZWlnaHQ6IGZpdC1jb250ZW50OyAqL1xcclxcbn1cXHJcXG5cXHJcXG4uZmxleENvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JlZW47XFxyXFxufVxcclxcblxcclxcbi5yZXNvdXJjZUFtb3VudCB7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4udG9wR3JpZCB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDUwJTtcXHJcXG4gICAgLyogZ3JpZC10ZW1wbGF0ZS1yb3dzOiA3MCUgNzAlIDUlOyAqL1xcclxcbiAgICByb3ctZ2FwOiAxMHB4O1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcclxcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIC8qIHBhZGRpbmctbGVmdDogMTBweDsgKi9cXHJcXG4gICAgaGVpZ2h0OiBtYXgtY29udGVudDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQge1xcclxcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE4LCA0NywgNzYsIDAuNzY1KTsgKi9cXHJcXG4gICAgLyogYm9yZGVyOiAycHggc29saWQgZ3JlZW47ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDklIDQ5JTtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcclxcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxyXFxuICAgIC8qIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMTBweDsgKi9cXHJcXG4gICAgLyogbWF4LWhlaWdodDogNzV2aDsgKi9cXHJcXG59XFxyXFxuLnByb2R1Y3RHcmlkIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOCwgNDcsIDc2LCAwLjc2NSk7ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDIwJSAzMCU7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLnByb2R1Y3RHcmlkICoge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyYXZlbCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogOTUlO1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXHJcXG59XFxyXFxuXFxyXFxuI3Njb3JlQm9hcmQge1xcclxcbiAgICAvKiB3aWR0aDogNTAlOyAqL1xcclxcbiAgICAvKiBoZWlnaHQ6IDMzdmg7ICovXFxyXFxuICAgIGJvcmRlcjogNXB4IHNvbGlkIGJsdWU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4jaW5wdXRCdXR0b25zIHtcXHJcXG4gICAgLyogaGVpZ2h0OiAzM3ZoOyAqL1xcclxcbiAgICBib3JkZXI6IDVweCBzb2xpZCB5ZWxsb3c7XFxyXFxufVxcclxcblxcclxcbiNhdmFpbGFibGVQcm9kdWN0IHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwcm9kdWN0T25IYW5kIHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNsb2NhdGlvbkltYWdlIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIGhlaWdodDogMTV2aDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7O1xcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxudGFibGUsIHRoIHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxufVxcclxcblxcclxcbnRkOmxhc3Qtb2YtdHlwZSwgdGg6bGFzdC1vZi10eXBlIHtcXHJcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxufVxcclxcblxcclxcbnRkLCB0aCB7XFxyXFxuICAgIHBhZGRpbmc6IDZweDtcXHJcXG59XFxyXFxuXFxyXFxucCB7XFxyXFxuICAgIC8qIGJvcmRlcjogMXB4IHNvbGlkIHBpbms7ICovXFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG4gICAgcGFkZGluZzogNXB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5hdmFpbGFibGVQcm9kdWN0RGF0YTpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDEzOCwgMTUpO1xcclxcbiAgICBjb2xvcjogYmx1ZTtcXHJcXG59XFxyXFxuLmF2YWlsYWJsZVByb2R1Y3REYXRhOmFjdGl2ZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDE1LCAxNSk7XFxyXFxuICAgIGNvbG9yOiByZ2IoMTUwLCAxNTAsIDE3OSk7XFxyXFxufVxcclxcblxcclxcbi8qIEJ1eVNlbGxVSSAqL1xcclxcbi5jb250YWluZXJCdXlTZWxsUHJvZHVjdCB7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4O1xcclxcbiAgICB0b3A6IDUwJTtcXHJcXG4gICAgbGVmdDogNTAlO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxufVxcclxcblxcclxcbi5idXlTZWxsVUlIZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoZ3JlZW4sIHB1cnBsZSk7XFxyXFxufVxcclxcblxcclxcbi5idXlTZWxsVUlIZWFkZXIgLmJ0bkNhbmNlbCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgICB3aWR0aDogNjRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWRCdXlTZWxsIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JpZEJ1eVNlbGwgaW5wdXQge1xcclxcbiAgICB3aWR0aDogNjRweDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubGFiZWxUb3RhbENvc3Qge1xcclxcbiAgICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG5cXHJcXG4ubGFiZWxUb3RhbEdhaW4ge1xcclxcbiAgICBjb2xvcjogZ3JlZW47XFxyXFxufVxcclxcblxcclxcbiNpbnB1dEJ1dHRvbnMge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gICAgdmlzaWJpbGl0eTogY29sbGFwc2U7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksaUNBQWlDO0lBQ2pDLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLGNBQWM7SUFDZCxZQUFZO0lBQ1osWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsV0FBVztJQUNYLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtJQUM5QixvQ0FBb0M7SUFDcEMsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHdCQUF3QjtJQUN4QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSwrQ0FBK0M7SUFDL0MsNkJBQTZCO0lBQzdCLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsd0JBQXdCO0lBQ3hCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEI7eUJBQ3FCO0lBQ3JCLHNCQUFzQjtBQUMxQjtBQUNBO0lBQ0ksK0NBQStDO0lBQy9DLGFBQWE7SUFDYixrQ0FBa0M7SUFDbEMsd0JBQXdCO0lBQ3hCLFlBQVk7SUFDWix1QkFBdUI7O0FBRTNCOztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksY0FBYztJQUNkLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsdUJBQXVCOztBQUUzQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0kscUJBQXFCO0lBQ3JCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxZQUFZO0lBQ1osV0FBVzs7QUFFZjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQix5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLDRCQUE0QjtJQUM1QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLFdBQVc7SUFDWCxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxtQ0FBbUM7SUFDbkMsV0FBVztBQUNmO0FBQ0E7SUFDSSxrQ0FBa0M7SUFDbEMseUJBQXlCO0FBQzdCOztBQUVBLGNBQWM7QUFDZDtJQUNJLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhO0lBQ2IsUUFBUTtJQUNSLFNBQVM7SUFDVCxnQ0FBZ0M7SUFDaEMsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDBDQUEwQztBQUM5Qzs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixhQUFhO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImh0bWwge1xcclxcbiAgICAvKiBiYWNrZ3JvdW5kOiByZ2IoNDQsIDQ0LCA0NCk7ICovXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig5LCA5LCA5KTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIG1heC13aWR0aDogODAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuaDMge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jZ2FtZUNvbnRhaW5lciB7XFxyXFxuICAgIC8qIG1pbi13aWR0aDogNTAwcHg7ICovXFxyXFxuICAgIHdpZHRoOiBhdXRvO1xcclxcbiAgICAvKiBoZWlnaHQ6IGZpdC1jb250ZW50OyAqL1xcclxcbn1cXHJcXG5cXHJcXG4uZmxleENvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JlZW47XFxyXFxufVxcclxcblxcclxcbi5yZXNvdXJjZUFtb3VudCB7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4udG9wR3JpZCB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDUwJTtcXHJcXG4gICAgLyogZ3JpZC10ZW1wbGF0ZS1yb3dzOiA3MCUgNzAlIDUlOyAqL1xcclxcbiAgICByb3ctZ2FwOiAxMHB4O1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcclxcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIC8qIHBhZGRpbmctbGVmdDogMTBweDsgKi9cXHJcXG4gICAgaGVpZ2h0OiBtYXgtY29udGVudDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQge1xcclxcbiAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE4LCA0NywgNzYsIDAuNzY1KTsgKi9cXHJcXG4gICAgLyogYm9yZGVyOiAycHggc29saWQgZ3JlZW47ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNDklIDQ5JTtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcclxcbiAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcclxcbiAgICAvKiBjb2xvcjogd2hpdGU7ICovXFxyXFxuICAgIC8qIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogMTBweDsgKi9cXHJcXG4gICAgLyogbWF4LWhlaWdodDogNzV2aDsgKi9cXHJcXG59XFxyXFxuLnByb2R1Y3RHcmlkIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOCwgNDcsIDc2LCAwLjc2NSk7ICovXFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDIwJSAzMCU7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLnByb2R1Y3RHcmlkICoge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyYXZlbCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogOTUlO1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXHJcXG59XFxyXFxuXFxyXFxuI3Njb3JlQm9hcmQge1xcclxcbiAgICAvKiB3aWR0aDogNTAlOyAqL1xcclxcbiAgICAvKiBoZWlnaHQ6IDMzdmg7ICovXFxyXFxuICAgIGJvcmRlcjogNXB4IHNvbGlkIGJsdWU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4jaW5wdXRCdXR0b25zIHtcXHJcXG4gICAgLyogaGVpZ2h0OiAzM3ZoOyAqL1xcclxcbiAgICBib3JkZXI6IDVweCBzb2xpZCB5ZWxsb3c7XFxyXFxufVxcclxcblxcclxcbiNhdmFpbGFibGVQcm9kdWN0IHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNwcm9kdWN0T25IYW5kIHtcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNsb2NhdGlvbkltYWdlIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIGhlaWdodDogMTV2aDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7O1xcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxudGFibGUsIHRoIHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQ7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxufVxcclxcblxcclxcbnRkOmxhc3Qtb2YtdHlwZSwgdGg6bGFzdC1vZi10eXBlIHtcXHJcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxufVxcclxcblxcclxcbnRkLCB0aCB7XFxyXFxuICAgIHBhZGRpbmc6IDZweDtcXHJcXG59XFxyXFxuXFxyXFxucCB7XFxyXFxuICAgIC8qIGJvcmRlcjogMXB4IHNvbGlkIHBpbms7ICovXFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG4gICAgcGFkZGluZzogNXB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5hdmFpbGFibGVQcm9kdWN0RGF0YTpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDEzOCwgMTUpO1xcclxcbiAgICBjb2xvcjogYmx1ZTtcXHJcXG59XFxyXFxuLmF2YWlsYWJsZVByb2R1Y3REYXRhOmFjdGl2ZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNjAsIDE1LCAxNSk7XFxyXFxuICAgIGNvbG9yOiByZ2IoMTUwLCAxNTAsIDE3OSk7XFxyXFxufVxcclxcblxcclxcbi8qIEJ1eVNlbGxVSSAqL1xcclxcbi5jb250YWluZXJCdXlTZWxsUHJvZHVjdCB7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4O1xcclxcbiAgICB0b3A6IDUwJTtcXHJcXG4gICAgbGVmdDogNTAlO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxufVxcclxcblxcclxcbi5idXlTZWxsVUlIZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoZ3JlZW4sIHB1cnBsZSk7XFxyXFxufVxcclxcblxcclxcbi5idXlTZWxsVUlIZWFkZXIgLmJ0bkNhbmNlbCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgICB3aWR0aDogNjRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWRCdXlTZWxsIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3JpZEJ1eVNlbGwgaW5wdXQge1xcclxcbiAgICB3aWR0aDogNjRweDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubGFiZWxUb3RhbENvc3Qge1xcclxcbiAgICBjb2xvcjogcmVkO1xcclxcbn1cXHJcXG5cXHJcXG4ubGFiZWxUb3RhbEdhaW4ge1xcclxcbiAgICBjb2xvcjogZ3JlZW47XFxyXFxufVxcclxcblxcclxcbiNpbnB1dEJ1dHRvbnMge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uaGlkZGVuIHtcXHJcXG4gICAgdmlzaWJpbGl0eTogY29sbGFwc2U7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjb25zdCB1cGRhdGVMb2NhdGlvbkRpc3BsYXkgPSAodmFsdWUpID0+IHtcclxuICAgIGNvbnN0IGxvY2F0aW9uRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50TG9jYXRpb24nKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGxvY2F0aW9uRGlzcGxheSk7XHJcbiAgICBsb2NhdGlvbkRpc3BsYXkuaW5uZXJUZXh0ID0gdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZUxvY2F0aW9uRGlzcGxheTsiLCJjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoe1xyXG4gICAgc3R5bGU6ICdjdXJyZW5jeSdcclxufSk7XHJcblxyXG5jb25zdCB1cGRhdGVDdXJyZW5jeURpc3BsYXkgPSAoc2VsZWN0b3IsIHZhbHVlKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW5jeURpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3Rvcik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcbiAgICBsZXQgbmV3VmFsdWUgPSBmb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKG5ld1ZhbHVlKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGN1cnJlbmN5RGlzcGxheSk7XHJcbiAgICBjdXJyZW5jeURpc3BsYXkudGV4dENvbnRlbnQgPSBgJCR7bmV3VmFsdWV9YDtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZUN1cnJlbmN5RGlzcGxheTsiLCJjb25zdCB1cGRhdGVIZWFsdGhEaXNwbGF5ID0gKGN1cnJlbnRIZWFsdGgpID0+IHtcclxuICAgIGNvbnN0IGhlYWx0aERpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhbHRoRGlzcGxheScpO1xyXG4gICAgLy8gY29uc29sZS5sb2coaGVhbHRoRGlzcGxheSk7XHJcbiAgICBoZWFsdGhEaXNwbGF5LmlubmVyVGV4dCA9IGAke2N1cnJlbnRIZWFsdGh9aHBgXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZUhlYWx0aERpc3BsYXk7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtYXNzaWduICovXHJcbi8vIERydWcgRmFjdG9yeSBGdW5jdGlvblxyXG5jb25zdCBjcmVhdGVEcnVnID0gKG5hbWUsIHByaWNlLCBxdWFudGl0eSwgcXVhbGl0eSkgPT4ge1xyXG4gICAgbmFtZSA9IG5hbWU7ICAgICAgICAgICAgLy8gU3RyZWV0IE5hbWVcclxuICAgIHF1YW50aXR5ID0gcXVhbnRpdHk7ICAgIC8vIEdyYW1zXHJcbiAgICBwcmljZSA9IHByaWNlOyAgICAgICAgICAvLyBEb2xsYXJzXHJcbiAgICBxdWFsaXR5ID0gcXVhbGl0eTsgICAgICAvLyBHcmFkZSBTeXN0ZW1cclxuXHJcbiAgICBjb25zdCBpbmZvID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHtuYW1lLCBxdWFudGl0eSwgcHJpY2V9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgcXVhbnRpdHksXHJcbiAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgcXVhbGl0eSxcclxuICAgICAgICBpbmZvLFxyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRHJ1ZztcclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IGNyZWF0ZURydWcgZnJvbSBcIi4vY3JlYXRlRHJ1Z1wiO1xyXG5cclxubGV0IGN1cnJlbnREcnVnTGlzdCA9IFtdO1xyXG5cclxuLy8gRGVmYXVsdCBEcnVnIExpc3RcclxuY29uc3QgZGVmYXVsdERydWdMaXN0ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiQ2FubmFiaXMgRmxvd2VyXCIsXHJcbiAgICAgICAgcHJpY2U6IDEwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkNhbm5hYmlzIEV4dHJhY3RcIixcclxuICAgICAgICBwcmljZTogMzAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiQWNpZFwiLFxyXG4gICAgICAgIHByaWNlOiAxNSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJDb2NhaW5lXCIsXHJcbiAgICAgICAgcHJpY2U6IDEyMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJDcmFja1wiLFxyXG4gICAgICAgIHByaWNlOiA3MCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJIZXJvaW5cIixcclxuICAgICAgICBwcmljZTogOTUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiTWV0aGFtcGhldGFtaW5lXCIsXHJcbiAgICAgICAgcHJpY2U6IDUwLFxyXG4gICAgfSxcclxuXTtcclxuXHJcbmNvbnN0IGNyZWF0ZURydWdMaXN0ID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIC8vIGFyZ3MocXR5TWF4LCBsb2NhbE11bHRpcGxpZXIsIGx1Y2spXHJcbiAgICBsZXQgbmV3RHJ1Z0xpc3QgPSBbXTtcclxuXHJcbiAgICBkZWZhdWx0RHJ1Z0xpc3QuZm9yRWFjaCgoZHJ1ZykgPT4ge1xyXG4gICAgICAgIGxldCBjb2luRmxpcCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7XHJcbiAgICAgICAgbGV0IGNhbGN1bGF0ZWRQcmljZTtcclxuICAgICAgICBsZXQgcXR5TWF4ID0gYXJnc1swXSB8fCAxMDA7XHJcbiAgICAgICAgbGV0IGxvY2FsTXVsdGlwbGllciA9IGFyZ3NbMV0gfHwgMTtcclxuICAgICAgICBsZXQgbHVjayA9IGFyZ3NbMl0gfHwgMDtcclxuICAgICAgICBsZXQgbHVja0VmZmVjdCA9ICgxICsgKGx1Y2sgKiAwLjEpKVxyXG4gICAgICAgIGxldCBsdWNrTXVsdGlwbGllciA9ICg1MCAtIGx1Y2spIHx8IDUwO1xyXG4gICAgICAgICBcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgaWYgKGNvaW5GbGlwID4gbHVja011bHRpcGxpZXIpIHtcclxuICAgICAgICAgICAgY2FsY3VsYXRlZFByaWNlID0gTWF0aC5mbG9vcihkcnVnLnByaWNlICsgKChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyMCkgLyAxMDApICogZHJ1Zy5wcmljZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGN1bGF0ZWRQcmljZSA9IE1hdGguZmxvb3IoZHJ1Zy5wcmljZSAtICgoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApIC8gMTAwKSAqIGRydWcucHJpY2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjYWxjdWxhdGVkUXR5ID0gTWF0aC5mbG9vcigoKE1hdGgucmFuZG9tKCkgKiBxdHlNYXgpICogbG9jYWxNdWx0aXBsaWVyKSAqIGx1Y2tFZmZlY3QpO1xyXG5cclxuXHJcbiAgICAgICAgbmV3RHJ1Z0xpc3QucHVzaChjcmVhdGVEcnVnKGRydWcubmFtZSwgY2FsY3VsYXRlZFByaWNlLCBjYWxjdWxhdGVkUXR5KSk7XHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBuZXdEcnVnTGlzdDtcclxufVxyXG5cclxuY29uc3QgZWRpdFZlbmRvckRydWdRdHkgPSAoY2hhbmdlZERydWcpID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGNoYW5nZWREcnVnKTtcclxuICAgIGN1cnJlbnREcnVnTGlzdC5mb3JFYWNoKChkcnVnKSA9PiB7XHJcbiAgICAgICAgaWYgKGRydWcubmFtZSA9PT0gY2hhbmdlZERydWcubmFtZSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkcnVnKTtcclxuICAgICAgICAgICAgZHJ1Zy5xdWFudGl0eSA9IGNoYW5nZWREcnVnLnF1YW50aXR5O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkcnVnKTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5jb25zdCBzZXRDdXJyZW50RHJ1Z0xpc3QgPSAoZHJ1Z0xpc3QpID0+IHtcclxuICAgIGN1cnJlbnREcnVnTGlzdCA9IGRydWdMaXN0O1xyXG59XHJcblxyXG5jb25zdCBnZXRDdXJyZW50RHJ1Z0xpc3QgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gY3VycmVudERydWdMaXN0O1xyXG59XHJcblxyXG5jb25zdCBnZXRQcm9kdWN0UXR5RnJvbUludmVudG9yeSA9IChkcnVnTmFtZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coZHJ1Z05hbWUpO1xyXG4gICAgZm9yIChsZXQgZHJ1ZyBvZiBjdXJyZW50RHJ1Z0xpc3QpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhkcnVnKTtcclxuICAgICAgICBpZiAoZHJ1Zy5uYW1lID09PSBkcnVnTmFtZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkcnVnLnF1YW50aXR5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRydWcucXVhbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIGRlZmF1bHREcnVnTGlzdCxcclxuICAgIGNyZWF0ZURydWdMaXN0LFxyXG4gICAgZWRpdFZlbmRvckRydWdRdHksXHJcbiAgICBzZXRDdXJyZW50RHJ1Z0xpc3QsXHJcbiAgICBnZXRDdXJyZW50RHJ1Z0xpc3QsXHJcbiAgICBnZXRQcm9kdWN0UXR5RnJvbUludmVudG9yeSxcclxufSIsIi8vIFByaWNlIEFWRyBmdW5jdGlvblxyXG5jb25zdCBjaGVja1ByaWNlQXZlcmFnZSA9IChpdGVtc0hlbGQsIG5ld0l0ZW1zKSA9PiB7XHJcbiAgICBsZXQgYXZlcmFnZVByaWNlID0gKChpdGVtc0hlbGQucHJpY2UgKiBpdGVtc0hlbGQucXVhbnRpdHkpICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChuZXdJdGVtcy5wcmljZSAqIG5ld0l0ZW1zLnF1YW50aXR5KSkgLyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW1zSGVsZC5xdWFudGl0eSArIG5ld0l0ZW1zLnF1YW50aXR5KTtcclxuICAgIGNvbnNvbGUubG9nKGBBdmVyYWdlUHJpY2U6ICR7YXZlcmFnZVByaWNlfWApO1xyXG4gICAgYXZlcmFnZVByaWNlPSBNYXRoLnJvdW5kKGF2ZXJhZ2VQcmljZSk7XHJcblxyXG4gICAgcmV0dXJuIGF2ZXJhZ2VQcmljZTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNoZWNrUHJpY2VBdmVyYWdlOyIsIi8vIFBsYXllciBWYXJpYWJsZXNcclxubGV0IHBsYXllcjE7XHJcblxyXG5jb25zdCBjcmVhdGVQbGF5ZXIgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgbGV0IHBsYXllckRhdGEgPSB7XHJcbiAgICAgICAgbmFtZSA6IGFyZ3NbMF0gfHwgXCJUaGF0IERvcGUgR3V5XCIsXHJcbiAgICAgICAgY3VycmVudERheSA6IGFyZ3NbMF0gfHwgMSxcclxuICAgICAgICBtYXhEYXlzIDogYXJnc1sxXSB8fCAzMCxcclxuICAgICAgICBjYXNoT25IYW5kIDogYXJnc1syXSB8fCA1NTAwLFxyXG4gICAgICAgIGJhbmtBY2NvdW50IDogYXJnc1szXSB8fCAwLFxyXG4gICAgICAgIGRlYnQgOiBhcmdzWzRdIHx8IDU1MDAsXHJcbiAgICAgICAgZ3VucyA6IGFyZ3NbNV0gfHwgW10sXHJcbiAgICAgICAgaGVhbHRoIDogYXJnc1s2XSB8fCAxMDAsXHJcbiAgICAgICAgbWF4SXRlbXMgOiBhcmdzWzddIHx8IDEwMCxcclxuICAgICAgICBjdXJyZW50TnVtT2ZJdGVtcyA6IGFyZ3NbOF0gfHwgMCxcclxuICAgICAgICBsb3N0RHJ1Z3MgOiBhcmdzWzldfHwgW10sXHJcbiAgICAgICAgbHVja0xldmVsIDogYXJnc1sxMF0gfHwgMSwgIFxyXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbkNpdHk6IGFyZ3NbMTFdIHx8IFwiU2VhdHRsZSwgV0FcIiAsXHJcbiAgICAgICAgY3VycmVudExvY2FsOiBhcmdzWzEyXSB8fCBcIkNhcGl0b2wgSGlsbFwiLFxyXG4gICAgICAgIGN1cnJlbnRUcmFuc3BvcnRNZXRob2Q6IGFyZ3NbMTNdIHx8IFwib24gdGhlIEJ1c1wiLCBcclxuICAgICAgICBwbGF5ZXJJbnZlbnRvcnk6IFt7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiTm90aGluZyBIZXJlXCIsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiAwLFxyXG4gICAgICAgICAgICBwcmljZTogMCxcclxuICAgICAgICAgICAgcXVhbGl0eTogXCJOb25lXCIsICAgIFxyXG4gICAgICAgIH1dLFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYW5nZUhlYWx0aCA9IChjaGFuZ2UpID0+IHtcclxuICAgICAgICBwbGF5ZXJEYXRhLmhlYWx0aCArPSBjaGFuZ2U7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFBsYXllciBIZWFsdGg6ICR7cGxheWVyRGF0YS5oZWFsdGh9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGxheWVySW52ZW50b3J5ID0gW3tcclxuICAgICAgICBuYW1lOiBcIk5vdGhpbmcgSGVyZVwiLFxyXG4gICAgICAgIHF1YW50aXR5OiAwLFxyXG4gICAgICAgIHByaWNlOiAwLFxyXG4gICAgICAgIHF1YWxpdHk6IFwiTm9uZVwiLFxyXG4gICAgfV07XHJcblxyXG4vLyBwbGF5ZXJOYW1lLCBjdXJyZW50RGF5LCBtYXhEYXlzLCBjYXNoT25IYW5kLCBiYW5rQWNjb3VudCwgZGVidFxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGxheWVyRGF0YSxcclxuICAgICAgICBjaGFuZ2VIZWFsdGgsXHJcbiAgICAgICAgcGxheWVySW52ZW50b3J5LFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBzZXRQbGF5ZXIxID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChhcmdzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICBwbGF5ZXIxID0gY3JlYXRlUGxheWVyKFwiS1BJbmM0MjVcIiwyMCwyMDAwMCw1MDAwMCwyMDAwMCw1MDAwMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldFBsYXllcjEgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gcGxheWVyMTtcclxufVxyXG5cclxuY29uc3QgZ2V0UHJvZHVjdFF0eUZyb21QbGF5ZXJJbnZlbnRvcnkgPSAoZHJ1Z05hbWUpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGRydWdOYW1lKTtcclxuICAgIGZvciAobGV0IGRydWcgb2YgcGxheWVyMS5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRydWcpO1xyXG4gICAgICAgIGlmIChkcnVnLm5hbWUgPT09IGRydWdOYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRydWcucXVhbnRpdHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZHJ1Zy5xdWFudGl0eTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBjcmVhdGVQbGF5ZXIsIFxyXG4gICAgc2V0UGxheWVyMSxcclxuICAgIGdldFBsYXllcjEsXHJcbiAgICBnZXRQcm9kdWN0UXR5RnJvbVBsYXllckludmVudG9yeSxcclxufSIsImltcG9ydCBjaGVja1ByaWNlQXZlcmFnZSBmcm9tICcuL2NoZWNrUHJpY2VBdmVyYWdlJztcclxuaW1wb3J0IGNyZWF0ZURydWcgZnJvbSAnLi9jcmVhdGVEcnVnJztcclxuaW1wb3J0IGNoZWNrTnVtT2ZJdGVtc0hlbGQgZnJvbSAnLi9jaGVja051bU9mSXRlbXNIZWxkJ1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIxIH0gZnJvbSAnLi9wbGF5ZXIuanMnO1xyXG5cclxuLy8gQWRkIEl0ZW0gdG8gSW52ZW50b3J5IEZ1bmN0aW9uXHJcbmNvbnN0IGFkZERydWdzVG9JbnZlbnRvcnkgPSAoYWRkZWRJdGVtKSA9PiB7XHJcbiAgICBsZXQgcGxheWVyID0gZ2V0UGxheWVyMSgpO1xyXG4gICAgbGV0IGN1cnJlbnROdW1PZkl0ZW1zID0gY2hlY2tOdW1PZkl0ZW1zSGVsZCgpO1xyXG4gICAgY29uc29sZS5sb2coYEl0ZW1zIEhlbGQ6ICR7Y3VycmVudE51bU9mSXRlbXN9ZydzYCk7XHJcbiAgICAvLyBDaGVjayBpZiBpbnZlbnRvcnkgaXMgZnVsbFxyXG5cclxuICAgIGlmIChjdXJyZW50TnVtT2ZJdGVtcyA+PSBwbGF5ZXIucGxheWVyRGF0YS5tYXhJdGVtcykge1xyXG4gICAgICAgIGFsZXJ0KFwiWW91ciBwb2NrZXRzIGFyZSBhbHJlYWR5IGJ1bGdpbiBidWRkeSwgY29tZSBiYWNrIHdoZW4geW91IGhhdmUgc29tZSByb29tLlwiKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiWW91IGFpbid0IGdvdCBubyBtb3JlIHBvY2tldHMhXCIpO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgZm9yIG92ZXJGbG93XHJcbiAgICBpZiAoKGN1cnJlbnROdW1PZkl0ZW1zICsgYWRkZWRJdGVtLnF1YW50aXR5KSA+IHBsYXllci5wbGF5ZXJEYXRhLm1heEl0ZW1zKSB7XHJcbiAgICAgICAgLy8gc2V0IG92ZXJGbG93IGJ5IHN1YnRyYWN0aW5nIFRvdGFsIEludmVudG9yeSBmcm9tIG5ldyBUb3RhbFxyXG4gICAgICAgIGxldCBvdmVyRmxvdyA9IChjdXJyZW50TnVtT2ZJdGVtcyArIGFkZGVkSXRlbS5xdWFudGl0eSkgLSBwbGF5ZXIucGxheWVyRGF0YS5tYXhJdGVtcztcclxuICAgICAgICBhbGVydChgWW91IG92ZXJzdHVmZmVkIHlvdXIgcG9ja2V0cywgZ2V0dGluZyBhIGxpbCBncmVlZHkgdGhlcmUuLi4gWW91IGRyb3BwZWQgJHtvdmVyRmxvd31nJ3Mgb2YgJHthZGRlZEl0ZW0ubmFtZX1gKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgWW91IGRyb3BwZWQgJHtvdmVyRmxvd31nJ3Mgb2YgJHthZGRlZEl0ZW0ubmFtZX1gKTtcclxuICAgICAgICAvLyBTZXQgbmV3IEl0ZW0gcXVhbnRpdHkgZm9yIGRydWdzXHJcbiAgICAgICAgYWRkZWRJdGVtLnF1YW50aXR5ID0gKHBsYXllci5wbGF5ZXJEYXRhLm1heEl0ZW1zIC0gY3VycmVudE51bU9mSXRlbXMpO1xyXG4gICAgICAgIC8vIEFERCB0byBsb3N0IGRydWdzIHN0YXNoIHRvIHVzZSBpbiBvdGhlciBldmVudHNcclxuICAgICAgICBwbGF5ZXIucGxheWVyRGF0YS5sb3N0RHJ1Z3MucHVzaChjcmVhdGVEcnVnKGFkZGVkSXRlbS5uYW1lLCBhZGRlZEl0ZW0ucHJpY2UsIG92ZXJGbG93LCBhZGRlZEl0ZW0ucXVhbGl0eSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGl0ZW0gb2YgcGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coaXRlbSk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIGFscmVhZHkgaG9sZGluZyBpdGVtXHJcbiAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PT0gYWRkZWRJdGVtLm5hbWUpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaXRlbS5xdWFudGl0eSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgYWRkZWRJdGVtLnF1YW50aXR5IHRvIHRvdGFsIHF1YW50aXR5IGluIGludmVudG9yeVxyXG4gICAgICAgICAgICBpdGVtLnF1YW50aXR5ICs9IGFkZGVkSXRlbS5xdWFudGl0eTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaXRlbS5xdWFudGl0eSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZXBsYWNlIHByaWNlIHdpdGggbmV3IGF2ZXJhZ2UgcHJpY2VcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaXRlbS5wcmljZSk7XHJcbiAgICAgICAgICAgIGl0ZW0ucHJpY2UgPSBjaGVja1ByaWNlQXZlcmFnZShpdGVtLCBhZGRlZEl0ZW0pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpdGVtLnByaWNlKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KTtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfSBlbHNlIHsgICAgXHJcbiAgICAgICAgICAgIC8vIEFkZCBuZXcgZHJ1ZyB0byBpbnZlbnRvcnkgIFxyXG4gICAgICAgICAgICAvLyBDaGVja3MgaWYgSW52ZW50b3J5IGlzIGVtcHR5XHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnlbMF0ubmFtZSA9PSBcIk5vdGhpbmcgSGVyZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgUGxhY2Vob2xkZXJcclxuICAgICAgICAgICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeS5wb3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBBZGQgbmV3IGRydWcgdG8gaW52ZW50b3J5XHJcbiAgICAgICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeS5wdXNoKGNyZWF0ZURydWcoYWRkZWRJdGVtLm5hbWUsIGFkZGVkSXRlbS5wcmljZSwgYWRkZWRJdGVtLnF1YW50aXR5LCBhZGRlZEl0ZW0ucXVhbGl0eSkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkpO1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICB9ICBcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkZERydWdzVG9JbnZlbnRvcnk7IiwiaW1wb3J0IHsgZ2V0UGxheWVyMSB9IGZyb20gXCIuL3BsYXllci5qc1wiO1xyXG5cclxuLy8gQ2hlY2sgUGxheWVyIGludmVudG9yeSBmb3IgdG90YWwgaXRlbXMgaGVsZFxyXG5jb25zdCBjaGVja051bU9mSXRlbXNIZWxkID0gKCkgPT4ge1xyXG4gICAgbGV0IHBsYXllciA9IGdldFBsYXllcjEoKTtcclxuICAgIGxldCBpdGVtc0hlbGQgPSAwO1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkpIHtcclxuICAgICAgICBpdGVtc0hlbGQgKz0gaXRlbS5xdWFudGl0eTtcclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtc0hlbGQ7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGVja051bU9mSXRlbXNIZWxkOyIsImNvbnN0IGNoYW5nZU1vbmV5ID0gKGFjY291bnQsIGNoYW5nZSkgPT4ge1xyXG4gICAgYWNjb3VudCArPSBjaGFuZ2U7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh7YWNjb3VudH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2coY2hhbmdlKTtcclxuICAgIHJldHVybiBhY2NvdW50O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjaGFuZ2VNb25leTsiLCJpbXBvcnQgY2hlY2tGb3JJdGVtIGZyb20gXCIuL2NoZWNrRm9ySXRlbVwiO1xyXG5pbXBvcnQgY3JlYXRlRHJ1ZyBmcm9tIFwiLi9jcmVhdGVEcnVnXCI7XHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tIFwiLi9wbGF5ZXIuanNcIjtcclxuXHJcbi8vIFJlbW92ZSBJdGVtIGZyb20gSW52ZW50b3J5IEZ1bmN0aW9uXHJcbmNvbnN0IHJlbW92ZURydWdzRnJvbUludmVudG9yeSA9IChyZW1vdmVkSXRlbSkgPT4ge1xyXG5cclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICBsZXQgZm91bmRJdGVtID0gY2hlY2tGb3JJdGVtKHJlbW92ZWRJdGVtKTtcclxuXHJcbiAgICBpZiAoZm91bmRJdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgYWxlcnQoXCJZb3UgcmVhY2ggaW50byB5b3VyIHBvY2tldHMgYW5kIHJlYWxpemUgeW91J3ZlIG1hZGUgYSBtaXN0YWtlLi4uXCIpXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJZb3UgZG9uJ3Qgb3duIHRoaXMgaXRlbS5cIik7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGluZGV4ID0gZm91bmRJdGVtLmluZGV4O1xyXG4gICAgbGV0IGl0ZW0gPSBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnlbaW5kZXhdO1xyXG4gICAgaWYgKChpdGVtLnF1YW50aXR5IC0gcmVtb3ZlZEl0ZW0ucXVhbnRpdHkpIDwgMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBZb3UgZG8gbm90IGhhdmUgZW5vdWdoIGZvciB0aGlzIHRyYW5zYWN0aW9ucy4gWW91IGhhdmUgJHtpdGVtLnF1YW50aXR5fWcncyBsZWZ0Li4uYClcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0gZWxzZSBpZiAoKGl0ZW0ucXVhbnRpdHkgLSByZW1vdmVkSXRlbS5xdWFudGl0eSkgPT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidnZ2IFBsYXllciBJbnZlbnRvcnkgdnZ2XCIpXHJcbiAgICAgICAgY29uc29sZS5sb2cocGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5KTtcclxuICAgICAgICAvLyBSZW1vdmUgb2JqZWN0IGZyb20gYXJyYXkgaWYgcXVhbml0aXR5IGlzIDBcclxuICAgICAgICBwbGF5ZXIucGxheWVyRGF0YS5wbGF5ZXJJbnZlbnRvcnkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInZ2diBQbGF5ZXIgSW52ZW50b3J5IHZ2dlwiKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeSk7XHJcbiAgICAgICAgLy8gUmUtYWRkIHBsYWNlaG9sZGVyIGZvciBlbXB0eSBpbnZlbnRvcnlcclxuICAgICAgICBpZiAocGxheWVyLnBsYXllckRhdGEuY3VycmVudE51bU9mSXRlbXMgPCAxKSB7XHJcbiAgICAgICAgICAgIHBsYXllci5wbGF5ZXJEYXRhLnBsYXllckludmVudG9yeS5wdXNoKGNyZWF0ZURydWcoXCJOb3RoaW5nIEhlcmVcIiwgMCwgMCwgMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEl0ZW0gUXVhbnRpdHk6ICR7aXRlbS5xdWFudGl0eX1gKTtcclxuICAgICAgICAvLyBSZW1vdmUgYW10IG9mIGl0ZW1zIGZyb20gb2JqZWN0IGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gcmVtb3ZpbmdcclxuICAgICAgICBpdGVtLnF1YW50aXR5IC09IHJlbW92ZWRJdGVtLnF1YW50aXR5O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBJdGVtIFF1YW50aXR5OiAke2l0ZW0ucXVhbnRpdHl9YCk7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVtb3ZlRHJ1Z3NGcm9tSW52ZW50b3J5OyIsImltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tIFwiLi9wbGF5ZXIuanNcIjtcclxuXHJcbi8vIENoZWNrIGludmVudG9yeSBmb3IgSXRlbSBoZWxwZXIgZnVuY3Rpb25cclxuY29uc3QgY2hlY2tGb3JJdGVtID0gKGl0ZW1Ub0NoZWNrKSA9PiB7XHJcbiAgICBsZXQgcGxheWVyID0gZ2V0UGxheWVyMSgpO1xyXG4gICAgLy8gaHR0cHM6Ly9mbGF2aW9jb3Blcy5jb20vaG93LXRvLWdldC1pbmRleC1pbi1mb3Itb2YtbG9vcC9cclxuICAgIGZvciAobGV0IFtpbmRleCwgaXRlbV0gb2YgcGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5LmVudHJpZXMoKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xyXG4gICAgICAgIGlmIChpdGVtLm5hbWUgPT0gaXRlbVRvQ2hlY2submFtZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gZm91bmRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogaXRlbS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgXCJpbmRleFwiOiBpbmRleCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIGNvbnNvbGUubG9nKFwiSXRlbSBub3QgZm91bmQuXCIpOyAgICBcclxuICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tGb3JJdGVtOyIsImltcG9ydCBidXlJdGVtc1dpdGhDYXNoIGZyb20gXCIuL2J1eUl0ZW1zV2l0aENhc2hcIjtcclxuaW1wb3J0IGNyZWF0ZURydWcgZnJvbSBcIi4vY3JlYXRlRHJ1Z1wiO1xyXG5pbXBvcnQgeyBnZXRQcm9kdWN0UXR5RnJvbUludmVudG9yeSB9IGZyb20gXCIuL2RydWdGdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgZ2V0UHJvZHVjdFF0eUZyb21QbGF5ZXJJbnZlbnRvcnkgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcclxuaW1wb3J0IHNlbGxJdGVtc0ZvckNhc2ggZnJvbSBcIi4vc2VsbEl0ZW1zRm9yQ2FzaFwiO1xyXG5cclxuY29uc3QgZGlzcGxheUJ1eVNlbGxVSSA9IChwcm9kdWN0TmFtZSwgcHJvZHVjdFF0eSwgcHJvZHVjdFByaWNlKSA9PiB7XHJcbiAgICBjb25zdCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWVDb250YWluZXInKTtcclxuXHJcbiAgICBjb25zdCBjb250YWluZXJCdXlTZWxsUHJvZHVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29udGFpbmVyQnV5U2VsbFByb2R1Y3QuY2xhc3NMaXN0LmFkZCgnY29udGFpbmVyQnV5U2VsbFByb2R1Y3QnKTtcclxuXHJcbiAgICBjb25zdCBjb250YWluZXJCdXlTZWxsUHJvZHVjdEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29udGFpbmVyQnV5U2VsbFByb2R1Y3RIZWFkZXIuY2xhc3NMaXN0LmFkZCgnYnV5U2VsbFVJSGVhZGVyJyk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxQcm9kdWN0TmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICBsYWJlbFByb2R1Y3ROYW1lLnRleHRDb250ZW50ID0gYCR7cHJvZHVjdE5hbWV9IGF0ICQke3Byb2R1Y3RQcmljZX0vZ2A7XHJcblxyXG4gICAgY29uc3QgYnRuQ2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBidG5DYW5jZWwuY2xhc3NMaXN0LmFkZCgnYnRuQ2FuY2VsJyk7XHJcbiAgICBidG5DYW5jZWwudGV4dENvbnRlbnQgPSAnWCc7XHJcblxyXG4gICAgY29udGFpbmVyQnV5U2VsbFByb2R1Y3RIZWFkZXIuYXBwZW5kQ2hpbGQobGFiZWxQcm9kdWN0TmFtZSk7XHJcbiAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdEhlYWRlci5hcHBlbmRDaGlsZChidG5DYW5jZWwpO1xyXG4gICAgY29udGFpbmVyQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQoY29udGFpbmVyQnV5U2VsbFByb2R1Y3RIZWFkZXIpO1xyXG5cclxuICAgIGNvbnN0IGdyaWRCdXlTZWxsUHJvZHVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZ3JpZEJ1eVNlbGxQcm9kdWN0LmNsYXNzTGlzdC5hZGQoJ2dyaWRCdXlTZWxsJyk7XHJcblxyXG4gICAgY29uc3QgbGFiZWxUb3RhbENvc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBsYWJlbFRvdGFsQ29zdC5jbGFzc0xpc3QuYWRkKCdsYWJlbFRvdGFsQ29zdCcpO1xyXG4gICAgbGFiZWxUb3RhbENvc3QudGV4dENvbnRlbnQgPSAnJDAnO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsVG90YWxHYWluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgbGFiZWxUb3RhbEdhaW4uY2xhc3NMaXN0LmFkZCgnbGFiZWxUb3RhbEdhaW4nKTtcclxuICAgIGxhYmVsVG90YWxHYWluLnRleHRDb250ZW50ID0gJyQwJztcclxuXHJcbiAgICBjb25zdCBpbnB1dEJ1eVByb2R1Y3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgaW5wdXRCdXlQcm9kdWN0LnR5cGUgPSAnbnVtYmVyJztcclxuICAgIGlucHV0QnV5UHJvZHVjdC5taW4gPSAxO1xyXG4gICAgaW5wdXRCdXlQcm9kdWN0LnZhbHVlID0gMTtcclxuICAgIGlucHV0QnV5UHJvZHVjdC5tYXggPSBnZXRQcm9kdWN0UXR5RnJvbUludmVudG9yeShwcm9kdWN0TmFtZSk7XHJcblxyXG4gICAgY29uc3QgaW5wdXRTZWxsUHJvZHVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICBpbnB1dFNlbGxQcm9kdWN0LnR5cGUgPSAnbnVtYmVyJztcclxuICAgIGlucHV0U2VsbFByb2R1Y3QubWluID0gMTtcclxuICAgIGlucHV0U2VsbFByb2R1Y3QudmFsdWUgPSAxO1xyXG4gICAgbGV0IG1heFByb2R1Y3RUb1NlbGwgPSBnZXRQcm9kdWN0UXR5RnJvbVBsYXllckludmVudG9yeShwcm9kdWN0TmFtZSk7XHJcbiAgICBpbnB1dFNlbGxQcm9kdWN0Lm1heCA9IG1heFByb2R1Y3RUb1NlbGw7XHJcbiAgICBpZiAobWF4UHJvZHVjdFRvU2VsbCA9PT0gMCkge1xyXG4gICAgICAgIGlucHV0U2VsbFByb2R1Y3QubWluID0gMDtcclxuICAgICAgICBpbnB1dFNlbGxQcm9kdWN0LnZhbHVlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBidG5CdXlQcm9kdWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBidG5CdXlQcm9kdWN0LmNsYXNzTGlzdC5hZGQoJ2J0bkJ1eScpO1xyXG4gICAgYnRuQnV5UHJvZHVjdC50ZXh0Q29udGVudCA9ICdCdXknO1xyXG5cclxuICAgIGNvbnN0IGJ0blNlbGxQcm9kdWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBidG5TZWxsUHJvZHVjdC5jbGFzc0xpc3QuYWRkKCdidG5TZWxsJyk7XHJcbiAgICBidG5TZWxsUHJvZHVjdC50ZXh0Q29udGVudCA9ICdTZWxsJztcclxuXHJcbiAgICBncmlkQnV5U2VsbFByb2R1Y3QuYXBwZW5kQ2hpbGQobGFiZWxUb3RhbENvc3QpO1xyXG4gICAgZ3JpZEJ1eVNlbGxQcm9kdWN0LmFwcGVuZENoaWxkKGxhYmVsVG90YWxHYWluKTtcclxuICAgIGdyaWRCdXlTZWxsUHJvZHVjdC5hcHBlbmRDaGlsZChpbnB1dEJ1eVByb2R1Y3QpO1xyXG4gICAgZ3JpZEJ1eVNlbGxQcm9kdWN0LmFwcGVuZENoaWxkKGlucHV0U2VsbFByb2R1Y3QpO1xyXG4gICAgZ3JpZEJ1eVNlbGxQcm9kdWN0LmFwcGVuZENoaWxkKGJ0bkJ1eVByb2R1Y3QpO1xyXG4gICAgZ3JpZEJ1eVNlbGxQcm9kdWN0LmFwcGVuZENoaWxkKGJ0blNlbGxQcm9kdWN0KTtcclxuICAgIGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0LmFwcGVuZENoaWxkKGdyaWRCdXlTZWxsUHJvZHVjdCk7XHJcblxyXG4gICAgZ2FtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXJCdXlTZWxsUHJvZHVjdCk7XHJcblxyXG5cclxuICAgIGlucHV0QnV5UHJvZHVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaW5wdXRCdXlQcm9kdWN0LnZhbHVlKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9kdWN0UHJpY2UpO1xyXG4gICAgICAgIGxhYmVsVG90YWxDb3N0LnRleHRDb250ZW50ID0gYCQke2lucHV0QnV5UHJvZHVjdC52YWx1ZSAqIHByb2R1Y3RQcmljZX1gO1xyXG4gICAgfSlcclxuICAgIGlucHV0U2VsbFByb2R1Y3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgIGxhYmVsVG90YWxHYWluLnRleHRDb250ZW50ID0gYCQke2lucHV0U2VsbFByb2R1Y3QudmFsdWUgKiBwcm9kdWN0UHJpY2V9YDtcclxuICAgIH0pXHJcbiAgICBidG5DYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29udGFpbmVyQnV5U2VsbFByb2R1Y3QucmVtb3ZlKCk7XHJcbiAgICB9KVxyXG4gICAgYnRuQnV5UHJvZHVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdCdXlQcm9kdWN0Jyk7XHJcbiAgICAgICAgLy8gY29uc3QgY2xpY2tlZERydWdDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuY29udGFpbmVyJHtwcm9kdWN0TmFtZS5yZXBsYWNlKFwiIFwiLCBcIlwiKX1gKVxyXG5cclxuICAgICAgICBsZXQgYm91Z2h0RHJ1ZyA9IGNyZWF0ZURydWcocHJvZHVjdE5hbWUsIHBhcnNlSW50KHByb2R1Y3RQcmljZSksIHBhcnNlSW50KGlucHV0QnV5UHJvZHVjdC52YWx1ZSkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGJvdWdodERydWcpO1xyXG4gICAgICAgIGJ1eUl0ZW1zV2l0aENhc2goYm91Z2h0RHJ1ZylcclxuICAgICAgICBjb250YWluZXJCdXlTZWxsUHJvZHVjdC5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgICBidG5TZWxsUHJvZHVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdTZWxsUHJvZHVjdCcpO1xyXG4gICAgICAgIGxldCBzb2xkRHJ1ZyA9IGNyZWF0ZURydWcocHJvZHVjdE5hbWUsIHByb2R1Y3RQcmljZSwgaW5wdXRTZWxsUHJvZHVjdC52YWx1ZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coc29sZERydWcpO1xyXG4gICAgICAgIHNlbGxJdGVtc0ZvckNhc2goc29sZERydWcpO1xyXG4gICAgICAgIGNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0LnJlbW92ZSgpO1xyXG4gICAgfSlcclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkaXNwbGF5QnV5U2VsbFVJOyIsImltcG9ydCBhZGREcnVnc1RvSW52ZW50b3J5IGZyb20gJy4vYWRkRHJ1Z3NUb0ludmVudG9yeSc7XHJcbmltcG9ydCBjaGFuZ2VNb25leSBmcm9tICcuL2NoYW5nZU1vbmV5JztcclxuaW1wb3J0IGNyZWF0ZURydWcgZnJvbSAnLi9jcmVhdGVEcnVnJztcclxuaW1wb3J0IHsgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkgfSBmcm9tICcuL2Rpc3BsYXlEcnVnTGlzdCc7XHJcbmltcG9ydCB7IGVkaXRWZW5kb3JEcnVnUXR5IH0gZnJvbSAnLi9kcnVnRnVuY3Rpb25zJztcclxuaW1wb3J0IHsgZ2V0UGxheWVyMSB9IGZyb20gJy4vcGxheWVyLmpzJztcclxuaW1wb3J0IHVwZGF0ZUN1cnJlbmN5RGlzcGxheSBmcm9tICcuL3VwZGF0ZUN1cnJlbmN5RGlzcGxheSc7XHJcblxyXG4vLyBCdXkgaXRlbXMgTG9jYWxseSB3aXRoIENhc2hcclxuY29uc3QgYnV5SXRlbXNXaXRoQ2FzaCA9IChhZGRlZEl0ZW0sIHZlbmRvciwgYXZnUXVhbGl0eSkgPT4ge1xyXG4gICAgbGV0IHBsYXllciA9IGdldFBsYXllcjEoKTtcclxuICAgIHZlbmRvciA9IHZlbmRvciB8fCAnTG9jYWwgRGVhbGVyJztcclxuICAgIGF2Z1F1YWxpdHkgPSBhdmdRdWFsaXR5IHx8IDUuMDtcclxuICAgIC8vIGNvbnNvbGUubG9nKHBsYXllcik7XHJcbiAgICBsZXQgdG90YWxQcmljZSA9IGFkZGVkSXRlbS5wcmljZSAqIGFkZGVkSXRlbS5xdWFudGl0eTtcclxuICAgIGlmICh0b3RhbFByaWNlID4gcGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVG9vIEJyb2tlIVwiKTtcclxuICAgICAgICBhbGVydCgnVG9vIEJyb2tlIScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBjbGlja2VkRHJ1Z1F0eUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5jb250YWluZXIke2FkZGVkSXRlbS5uYW1lLnJlcGxhY2UoXCIgXCIsIFwiXCIpfSAucHJvZHVjdFF0eSA+IHBgKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhgUHVyY2hhc2VkICR7YWRkZWRJdGVtLnF1YW50aXR5fSBvZiAke2FkZGVkSXRlbS5uYW1lfSBmcm9tICR7dmVuZG9yfSBpbiAke3BsYXllci5wbGF5ZXJEYXRhLmN1cnJlbnRMb2NhbH1gKVxyXG4gICAgICAgIC8vIERpZG4ndCB3b3JraW5nIGNoYW5naW5nIG1vbmV5IGluIGNoYW5nZW1vbmV5IGZ1bmN0aW9uP1xyXG4gICAgICAgIGxldCBuZXdRdHkgPSBjbGlja2VkRHJ1Z1F0eUNvbnRhaW5lci50ZXh0Q29udGVudCAtIGFkZGVkSXRlbS5xdWFudGl0eTtcclxuICAgICAgICBsZXQgZW5vdWdoUm9vbSA9IGFkZERydWdzVG9JbnZlbnRvcnkoYWRkZWRJdGVtKTtcclxuICAgICAgICBpZiAoZW5vdWdoUm9vbSkge1xyXG4gICAgICAgICAgICBsZXQgdmVuZG9yRHJ1ZyA9IGNyZWF0ZURydWcoYWRkZWRJdGVtLm5hbWUsIGFkZGVkSXRlbS5wcmljZSwgbmV3UXR5LCBhdmdRdWFsaXR5KTtcclxuICAgICAgICAgICAgZWRpdFZlbmRvckRydWdRdHkodmVuZG9yRHJ1Zyk7XHJcbiAgICAgICAgICAgIGNsaWNrZWREcnVnUXR5Q29udGFpbmVyLnRleHRDb250ZW50ID0gdmVuZG9yRHJ1Zy5xdWFudGl0eVxyXG4gICAgICAgICAgICBwbGF5ZXIucGxheWVyRGF0YS5jYXNoT25IYW5kID0gY2hhbmdlTW9uZXkocGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCwgLXRvdGFsUHJpY2UpO1xyXG4gICAgICAgICAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2Nhc2hEaXNwbGF5JywgcGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gUG9zc2libGUgZXZlbnQgZ29lcyBoZXJlXHJcbiAgICAgICAgLy9pZiBldmVudCBnb2VzIHdlbGxcclxuICAgICAgICAgICAgLy8gQWRkIGRydWdzIHRvIGludmVudG9yeVxyXG5cclxuXHJcbiAgICAgICAgLy8gZWxzZSBcclxuICAgICAgICAgICAgLy8gYmFkRXZlbnQgU2NlbmFyaW9cclxuXHJcbiAgICAgICAgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkoKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJ1eUl0ZW1zV2l0aENhc2g7IiwiaW1wb3J0IHJlbW92ZURydWdzRnJvbUludmVudG9yeSBmcm9tICcuL3JlbW92ZURydWdzRnJvbUludmVudG9yeS5qcyc7XHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tICcuL3BsYXllci5qcyc7XHJcbmltcG9ydCBjaGFuZ2VNb25leSBmcm9tICcuL2NoYW5nZU1vbmV5LmpzJztcclxuaW1wb3J0IHVwZGF0ZUN1cnJlbmN5RGlzcGxheSBmcm9tICcuL3VwZGF0ZUN1cnJlbmN5RGlzcGxheS5qcyc7XHJcbmltcG9ydCB1cGRhdGVIZWFsdGhEaXNwbGF5IGZyb20gJy4vdXBkYXRlSGVhbHRoRGlzcGxheS5qcyc7XHJcbmltcG9ydCB7IGRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5IH0gZnJvbSAnLi9kaXNwbGF5RHJ1Z0xpc3QuanMnO1xyXG5pbXBvcnQgeyBlZGl0VmVuZG9yRHJ1Z1F0eSB9IGZyb20gJy4vZHJ1Z0Z1bmN0aW9ucy5qcyc7XHJcblxyXG4vLyBTZWxsIGl0ZW1zIGxvY2FsbHkgZm9yIGNhc2hcclxuY29uc3Qgc2VsbEl0ZW1zRm9yQ2FzaCA9IChyZW1vdmVkSXRlbSwgY3VycmVudExvY2F0aW9uLCB2ZW5kb3IsIGF2Z1F1YWxpdHkpID0+IHtcclxuICAgIGxldCBwbGF5ZXIgPSBnZXRQbGF5ZXIxKCk7XHJcbiAgICBsZXQgdG90YWxQcmljZSA9IHJlbW92ZWRJdGVtLnByaWNlICogcmVtb3ZlZEl0ZW0ucXVhbnRpdHk7XHJcbiAgICBjb25zb2xlLmxvZyhyZW1vdmVkSXRlbSk7XHJcbiAgICBcclxuICAgIGxldCBzYWxlUmVzdWx0ID0gcmVtb3ZlRHJ1Z3NGcm9tSW52ZW50b3J5KHJlbW92ZWRJdGVtKTtcclxuXHJcbiAgICBpZiAoc2FsZVJlc3VsdCA9PSAxKSB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tlZERydWdRdHlDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuY29udGFpbmVyJHtyZW1vdmVkSXRlbS5uYW1lLnJlcGxhY2UoXCIgXCIsIFwiXCIpfSAucHJvZHVjdFF0eSA+IHBgKTtcclxuICAgICAgICBsZXQgbmV3UXR5ID0gcGFyc2VJbnQoY2xpY2tlZERydWdRdHlDb250YWluZXIudGV4dENvbnRlbnQgKyByZW1vdmVkSXRlbS5xdWFudGl0eSk7XHJcbiAgICAgICAgY29uc29sZS5sb2cobmV3UXR5KTtcclxuICAgICAgICBjbGlja2VkRHJ1Z1F0eUNvbnRhaW5lci50ZXh0Q29udGVudCA9IG5ld1F0eTtcclxuICAgICAgICBlZGl0VmVuZG9yRHJ1Z1F0eShyZW1vdmVkSXRlbSk7XHJcbiAgICAgICAgcGxheWVyLnBsYXllckRhdGEuY2FzaE9uSGFuZCA9IGNoYW5nZU1vbmV5KHBsYXllci5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQsIHRvdGFsUHJpY2UpO1xyXG4gICAgICAgIHVwZGF0ZUN1cnJlbmN5RGlzcGxheSgnY2FzaERpc3BsYXknLCBwbGF5ZXIucGxheWVyRGF0YS5jYXNoT25IYW5kKTtcclxuICAgICAgICBkaXNwbGF5UGxheWVyRHJ1Z0ludmVudG9yeSgpO1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhbGVydChcIkhvdyB5b3UgZ29ubmEgc2VsbCBtZSBzb21ldGhpbmcgeW91IGFpbid0IGdvdCBtYXluZT9cIilcclxuICAgICAgICBhbGVydChcIllvdSBnZXQgc3Vja2VyIHB1bmNoZWQgaW4gdGhlIGJhY2sgb2YgdGhlIGhlYWQgYW5kLi4uYmxhY2suLi5vdXQuLi5cIik7XHJcbiAgICAgICAgcGxheWVyLmNoYW5nZUhlYWx0aCgtNSk7XHJcbiAgICAgICAgdXBkYXRlSGVhbHRoRGlzcGxheShwbGF5ZXIucGxheWVyRGF0YS5oZWFsdGgpO1xyXG4gICAgICAgIC8vU2tpcCB0byBuZXh0IHNlc3Npb24gb2YgZGF5XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJZb3UgZG9uJ3QgaGF2ZSB0aGlzIHRvIHNlbGwhXCIpO1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2VsbEl0ZW1zRm9yQ2FzaDsiLCJpbXBvcnQgeyBnZXRDdXJyZW50RHJ1Z0xpc3QgfSBmcm9tIFwiLi9kcnVnRnVuY3Rpb25zXCI7XHJcbmltcG9ydCBlbF9idXlPclNlbGxDbGlja2VkUHJvZHVjdCBmcm9tIFwiLi9lbF9idXlPclNlbGxDbGlja2VkUHJvZHVjdFwiO1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXIxIH0gZnJvbSBcIi4vcGxheWVyLmpzXCI7XHJcblxyXG5jb25zdCBkaXNwbGF5RHJ1Z0J1eVNlbGxMaXN0ID0gKCkgPT4ge1xyXG4gICAgbGV0IGRydWdMaXN0ID0gZ2V0Q3VycmVudERydWdMaXN0KCk7XHJcbiAgICBjb25zdCBhdmFpbGFibGVQcm9kdWN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF2YWlsYWJsZVByb2R1Y3RDb250YWluZXInKTtcclxuICAgIGF2YWlsYWJsZVByb2R1Y3RDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIC8vIGdldCBkcnVnTGlzdCBcclxuICAgIGRydWdMaXN0LmZvckVhY2goKGRydWcpID0+IHtcclxuICAgICAgICBsZXQgZHJ1Z0RhdGFDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcnVnRGF0YUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0R3JpZCcpO1xyXG4gICAgICAgIGlmIChkcnVnLnF1YW50aXR5ID09IDApIHtcclxuICAgICAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2F2YWlsYWJsZVByb2R1Y3REYXRhJyk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuY2xhc3NMaXN0LmFkZChgY29udGFpbmVyJHtkcnVnLm5hbWUucmVwbGFjZShcIiBcIiwgXCJcIil9YCk7XHJcblxyXG4gICAgICAgIGxldCBkcnVnTmFtZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRydWdOYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3ROYW1lJyk7XHJcbiAgICAgICAgbGV0IGRydWdOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgIGRydWdOYW1lLnRleHRDb250ZW50ID0gZHJ1Zy5uYW1lO1xyXG5cclxuICAgICAgICBkcnVnTmFtZUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnTmFtZSk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z05hbWVDb250YWluZXIpO1xyXG5cclxuICAgICAgICBsZXQgZHJ1Z1F0eUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRydWdRdHlDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncHJvZHVjdFF0eScpO1xyXG4gICAgICAgIGxldCBkcnVnUXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgIGRydWdRdHkudGV4dENvbnRlbnQgPSBkcnVnLnF1YW50aXR5O1xyXG5cclxuICAgICAgICBkcnVnUXR5Q29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdRdHkpO1xyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdRdHlDb250YWluZXIpO1xyXG5cclxuICAgICAgICBsZXQgZHJ1Z1ByaWNlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZHJ1Z1ByaWNlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Byb2R1Y3RQcmljZScpO1xyXG4gICAgICAgIGxldCBkcnVnUHJpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgZHJ1Z1ByaWNlLnRleHRDb250ZW50ID0gZHJ1Zy5wcmljZTtcclxuXHJcbiAgICAgICAgZHJ1Z1ByaWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdQcmljZSk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z1ByaWNlQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgYXZhaWxhYmxlUHJvZHVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnRGF0YUNvbnRhaW5lcik7XHJcbiAgICB9KVxyXG4gICAgZWxfYnV5T3JTZWxsQ2xpY2tlZFByb2R1Y3QoKTtcclxufVxyXG5cclxuY29uc3QgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkgPSAoKSA9PiB7XHJcbiAgICBsZXQgcGxheWVyID0gZ2V0UGxheWVyMSgpO1xyXG4gICAgY29uc3QgcHJvZHVjdE9uSGFuZENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0T25IYW5kQ29udGFpbmVyJyk7XHJcbiAgICBwcm9kdWN0T25IYW5kQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gICAgcGxheWVyLnBsYXllckRhdGEucGxheWVySW52ZW50b3J5LmZvckVhY2goKGRydWcpID0+IHtcclxuICAgICAgICBsZXQgZHJ1Z0RhdGFDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcnVnRGF0YUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0R3JpZCcpO1xyXG4gICAgICAgIGRydWdEYXRhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3BsYXllckludmVudG9yeURhdGEnKTtcclxuXHJcbiAgICAgICAgbGV0IGRydWdOYW1lQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZHJ1Z05hbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncHJvZHVjdE5hbWUnKTtcclxuICAgICAgICBsZXQgZHJ1Z05hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgZHJ1Z05hbWUudGV4dENvbnRlbnQgPSBkcnVnLm5hbWU7XHJcblxyXG4gICAgICAgIGRydWdOYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdOYW1lKTtcclxuICAgICAgICBkcnVnRGF0YUNvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnTmFtZUNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIGxldCBkcnVnUXR5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZHJ1Z1F0eUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwcm9kdWN0UXR5Jyk7XHJcbiAgICAgICAgbGV0IGRydWdRdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgZHJ1Z1F0eS50ZXh0Q29udGVudCA9IGRydWcucXVhbnRpdHk7XHJcblxyXG4gICAgICAgIGRydWdRdHlDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z1F0eSk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z1F0eUNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIGxldCBkcnVnUHJpY2VDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcnVnUHJpY2VDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncHJvZHVjdFByaWNlJyk7XHJcbiAgICAgICAgbGV0IGRydWdQcmljZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHJcbiAgICAgICAgZHJ1Z1ByaWNlLnRleHRDb250ZW50ID0gZHJ1Zy5wcmljZTtcclxuXHJcbiAgICAgICAgZHJ1Z1ByaWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKGRydWdQcmljZSk7XHJcbiAgICAgICAgZHJ1Z0RhdGFDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJ1Z1ByaWNlQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgcHJvZHVjdE9uSGFuZENvbnRhaW5lci5hcHBlbmRDaGlsZChkcnVnRGF0YUNvbnRhaW5lcik7XHJcbiAgICB9KVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIGRpc3BsYXlEcnVnQnV5U2VsbExpc3QsXHJcbiAgICBkaXNwbGF5UGxheWVyRHJ1Z0ludmVudG9yeSxcclxufSIsImltcG9ydCBkaXNwbGF5QnV5U2VsbFVJIGZyb20gXCIuL2Rpc3BsYXlCdXlTZWxsVUlcIjtcclxuXHJcbmNvbnN0IGVsX2J1eU9yU2VsbENsaWNrZWRQcm9kdWN0ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgcHJvZHVjdE5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmF2YWlsYWJsZVByb2R1Y3REYXRhJyk7XHJcblxyXG4gICAgcHJvZHVjdE5vZGVMaXN0LmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xpY2snKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobm9kZSk7XHJcbiAgICAgICAgICAgIGxldCBwcm9kdWN0TmFtZSA9IG5vZGUucXVlcnlTZWxlY3RvcignLnByb2R1Y3ROYW1lID4gcCcpLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9kdWN0TmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBwcm9kdWN0UXR5ID0gbm9kZS5xdWVyeVNlbGVjdG9yKCcucHJvZHVjdFF0eSA+IHAnKS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocHJvZHVjdFF0eSk7XHJcbiAgICAgICAgICAgIGxldCBwcm9kdWN0UHJpY2UgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy5wcm9kdWN0UHJpY2UgPiBwJykudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHByb2R1Y3RQcmljZSk7XHJcblxyXG4gICAgICAgICAgICBkaXNwbGF5QnV5U2VsbFVJKHByb2R1Y3ROYW1lLCBwcm9kdWN0UXR5LCBwcm9kdWN0UHJpY2UpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBlbF9idXlPclNlbGxDbGlja2VkUHJvZHVjdDsiLCJpbXBvcnQgdHJhdmVsTG9jYWwgZnJvbSBcIi4vdHJhdmVsTG9jYWxcIjtcclxuXHJcbi8vIERlZmF1bHQgQ2l0eSBMb2NhdGlvblxyXG5jb25zdCBsb2NhdGlvbkNpdGllcyA9IFtcclxuICAgIHtcclxuICAgICAgICBjaXR5TmFtZTogXCJOZXcgWW9yayBDaXR5LCBOWVwiLCAgICAgICAgICAgXHJcbiAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgVGhlIEJpZyBBcHBsZSwgd2hlcmUgYWxsIHRoZSBXYWxsc3RyZWV0IG1vbmV5IGlzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG93ZGVyZWQgY29hdGVkIGFuZCB0aGUgbHVkZXMgd2VyZW50J3QgbGVmdCBpbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA4MCdzYCwgIFxyXG4gICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkJyb254XCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlF1ZWVuc1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJDZW50cmFsIFBhcmtcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTWFuaGF0dGFuXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkNvbmV5IElzbGFuZFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcm9va2x5blwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY2l0eU5hbWU6IFwiTG9zIEFuZ2VsZXMsIENBXCIsICAgICAgICAgICBcclxuICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBIb21lIHRvIGNlbGVicml0aWVzLCBhcnRpc3RzIGFuZCBmcmVlIHNwaXJpdHMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9zIEFuZ2VsZXMgbmV2ZXIgc3RvcHMgYXR0cmFjdGluZyBwZW9wbGUgZnJvbSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGNvcm5lciBvZiB0aGUgZ2xvYmUuIFRoaXMgY29zbW9wb2xpdGFuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eSBvZmZlcnMgYSBodWIgZm9yIHRoZSBlbnRlcnRhaW5tZW50IGluZHVzdHJ5IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGVhc3kgYWNjZXNzIHRvIHRoZSBiZWFjaCBhbmQgdGhvc2UgaW50ZXJlc3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gQ2FuZGkhYCwgICAgXHJcbiAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJIb2xseXdvb2RcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiV2VzdCBIb2xseXdvb2RcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRG93bnRvd25cIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQmV2ZXJseSBIaWxsc1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJUaGUgQmVhY2hlc1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJQYXNhZGVuYVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY2l0eU5hbWU6IFwiQ2hpY2FnbywgSUxcIiwgICAgICAgICAgIFxyXG4gICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYFRoZSBjaXR5IGlzIGZhbW91cyBmb3IgaXRzIGljb25pYyBhcmNoaXRlY3R1cmUgYW5kIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVhdXRpZnVsIHNreWxpbmUuIFRob3NlIGNvbGQsIGJpdHRlciB3aW50ZXJzIGluIENoaWNhZ29cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2UgdGhlIG5lZWQgZm9yIEZpcmUgZGlyZSFgLCAgICBcclxuICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJIdW1ib2xkdCBQYXJrXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdhcmZpZWxkIFBhcmtcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiV2VzdCBMb29wXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk9sZCBUb3duXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlJvc2NvZSBWaWxsYWdlXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkxpbmNvbG4gUGFya1wiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgY2l0eU5hbWU6IFwiSG91c3RvbiwgVFhcIiwgICAgICAgICAgIFxyXG4gICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYEhvdXN0b27igJlzIHN0YWJsZSBqb2IgbWFya2V0LCBkaXZlcnNlIGVjb25vbXkgYW5kIGxpdmFibGUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcmhvb2RzIG1ha2UgdGhlIFRleGFzIGNpdHkgYSBwb3B1bGFyIGNob2ljZSBmb3IgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VuZyBwcm9mZXNzaW9uYWxzLiBUaGUgbmlnaHQgbGlmZSBpcyBhbGl2ZSBhbmQgd2VsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzbyBhcmUgdGhlIHBhcnR5IGZhdm9ycyB0aGF0IGdvIHdpdGggaXQuYCwgICAgXHJcbiAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRG93bnRvd25cIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiU3ByaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkZvcnQgQmVuZFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcmF6b3JpYVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHYWx2ZXN0b25cIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTGFrZSBIb3VzdG9uXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjaXR5TmFtZTogXCJQaGVvbml4LCBBWlwiLCAgICAgICAgICAgXHJcbiAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgU3Vycm91bmRlZCBieSBkZXNlcnQgbW91bnRhaW5zIGFuZCBudW1lcm91cyBoaWtpbmcgdHJhaWxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhvZW5peCBpcyB0aGUgcGVyZmVjdCBwbGFjZSB0byBsaXZlIGZvciB0aG9zZSB3aG8gbG92ZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZW5kaW5nIHRpbWUgaW4gdGhlIGdyZWF0IG91dGRvb3JzIGdldHRpbmcgJ2F0dHVuZScgd2l0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0dXJlYCwgICAgXHJcbiAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUGFyYWRpc2UgVmFsbGV5XCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIk1lc2FcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiR2xlbmRhbGVcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUGVvcmlhXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkFwYWNoZSBKdW5jdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTY290dHNkYWxlXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBjaXR5TmFtZTogXCJQaGlsYWRlbHBoaWEsIFBBXCIsICAgICAgICAgICBcclxuICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBCZXNpZGVzIGJlaW5nIG9uZSBvZiB0aGUgbW9zdCBoaXN0b3JpY2FsbHkgc2lnbmlmaWNhbnQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXRpZXMgaW4gdGhlIGNvdW50cnksIFBoaWxhZGVscGhpYSBvZmZlcnMgYSBoaXAgYXJ0cyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLCBtdWx0aXBsZSBtdXNpYyB2ZW51ZXMgYW5kIHBsZW50eSBvZiB0cmVuZHkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0YXVyYW50cywgdGhlIEhpcHN0ZXJzIGFyZSBpbnRvICdkZXNpbmVycyBpZiB5b3UgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbm93IHdoYXQgSSBtZWFuLidgLCAgICBcclxuICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJDaGVzdG51dCBIaWxsXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlJveGJvcm91Z2hcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTW91bnQgQWlyeVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJFYXN0IEZhbGxzXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdlcm1hbiBUb3duXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIldlc3QgT2FrIExhbmVcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNpdHlOYW1lOiBcIkphY2tzb252aWxsZSwgRkxcIiwgICAgICAgICAgIFxyXG4gICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYEphY2tzb252aWxsZSwgcGVyZmVjdGx5IHBvc2l0aW9uZWQgYWxvbmcgdGhlIEF0bGFudGljIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2NlYW4gaW4gTm9ydGhlYXN0IEZsb3JpZGEsIGlzIGEgbmF0dXJhbCBwYXJhZGlzZSBmb3IgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpdG9ycyBsb29raW5nIGZvciBhbiAnYWZmb3JkYWJsZScgeWV0IGx1eHVyaW91cyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLCB3aXRoIGFsbCB0aGUgJ2FtbWVuaXRpZXMnLmAsICAgIFxyXG4gICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkRvd250b3duXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNwcmluZ2ZpZWxkXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkVhc3RzaWRlXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNwb3J0cyBDb21wbGV4XCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkZhaXJmaWVsZFwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCcmVudHdvb2RcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGNpdHlOYW1lOiBcIlNlYXR0bGUsIFdBXCIsICAgICAgICAgICBcclxuICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBUaGUgQ0hBWiBab25lIGhhcyBiZWVuIGluZGVmaW5pdGVseSBleHRlbmRlZCBmb3IgeW91ciBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtldCwgVmlzaXQgUGlrZSBQbGFjZSBhbmQgdGhlIFBpZXIgdG8gZmluZCBwbGVudHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHNpbWlsYXIgZmVsbG93cyBhbmQgdGhvc2Ugd2lsbGluZyB0byBpbnZlc3QgdG8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgaWRlYXMgYW5kICdTdGFydC1VcHMnYCwgICAgXHJcbiAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTm9ydGggR2F0ZVwiLFxyXG4gICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHcmVlbiBMYWtlXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlVuaXZlcnNpdHkgRGlzdHJpY3RcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQ2FwaXRvbCBIaWxsXCIsXHJcbiAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiAwLCAgICAgICAgICAgICAgICAgICAgICAvL0JhbW1lclxyXG4gICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgbWluUXVhbnRpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICBtYXhRdWFudGl0eTogMTAwLFxyXG4gICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNvZG9cIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTWFnbm9saWFcIixcclxuICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG5dXHJcblxyXG5jb25zdCBnZXRMb2NhdGlvbnNCeU5hbWUgPSAobG9jYXRpb25OYW1lKSA9PiB7XHJcbiAgICBmb3IgKGxldCBsb2NhdGlvbiBvZiBsb2NhdGlvbkNpdGllcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uKTtcclxuICAgICAgICBpZiAobG9jYXRpb24uY2l0eU5hbWUgPT0gbG9jYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGNvbnN0IGVsX3RyYXZlbExvY2F0aW9uQ2xpY2tlZCA9ICgpID0+IHtcclxuLy8gICAgIGNvbnN0IFxyXG4vLyB9XHJcblxyXG5jb25zdCB1cGRhdGVUcmF2ZWxCdXR0b25zID0gKGNpdHkpID0+IHtcclxuICAgIGNvbnN0IHRyYXZlbEJ1dHRvbk5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxvY2F0aW9uQ29udGFpbmVyIGJ1dHRvbicpO1xyXG4gICAgY29uc29sZS5sb2coY2l0eSk7XHJcbiAgICBjb25zdCBwbGF5ZXJDaXR5ID0gZ2V0TG9jYXRpb25zQnlOYW1lKGNpdHkpO1xyXG4gICAgY29uc29sZS5sb2codHJhdmVsQnV0dG9uTm9kZUxpc3QpO1xyXG4gICAgY29uc29sZS5sb2cocGxheWVyQ2l0eSk7XHJcblxyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgdHJhdmVsQnV0dG9uTm9kZUxpc3QuZm9yRWFjaCgobWV0cm9CdG4pID0+IHtcclxuICAgICAgICBtZXRyb0J0bi50ZXh0Q29udGVudCA9IHBsYXllckNpdHkubG9jYXRpb25zTG9jYWxbaV0ubG9jYXRpb25OYW1lO1xyXG4gICAgICAgIG1ldHJvQnRuLmlkID0gcGxheWVyQ2l0eS5sb2NhdGlvbnNMb2NhbFtpXS5sb2NhdGlvbk5hbWUucmVwbGFjZSgnICcsICcnKTtcclxuICAgICAgICBtZXRyb0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXRyb0J0bi50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgIHRyYXZlbExvY2FsKG1ldHJvQnRuLnRleHRDb250ZW50KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIGkrKztcclxuICAgIH0pXHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IHtcclxuICAgIHVwZGF0ZVRyYXZlbEJ1dHRvbnMsXHJcbn0iLCJpbXBvcnQgeyBkaXNwbGF5RHJ1Z0J1eVNlbGxMaXN0IH0gZnJvbSBcIi4vZGlzcGxheURydWdMaXN0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZURydWdMaXN0LCBzZXRDdXJyZW50RHJ1Z0xpc3QgfSBmcm9tIFwiLi9kcnVnRnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IGdldFBsYXllcjEgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcclxuaW1wb3J0IHVwZGF0ZUxvY2F0aW9uRGlzcGxheSBmcm9tIFwiLi91cGRhdGVMb2NhdGlvbkRpc3BsYXlcIjtcclxuXHJcblxyXG5jb25zdCB0cmF2ZWxMb2NhbCA9IChkZXN0aW5hdGlvbikgPT4ge1xyXG4gICAgbGV0IHBsYXllciA9IGdldFBsYXllcjEoKTtcclxuICAgIGxldCBldmVudE91dGNvbWU7XHJcbiAgICBsZXQgcmFuZG9tRXZlbnQ7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgd2UgYXJlIGFscmVhZHkgYXQgbG9jYXRpb25cclxuICAgIGlmIChwbGF5ZXIucGxheWVyRGF0YS5jdXJyZW50TG9jYWwgPT0gZGVzdGluYXRpb24pIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIllvdSBhcmUgYWxyZWFkeSBoZXJlIVwiKVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFBvc3NpYmlsaXR5IG9mIFJhbmRvbSBFdmVudCAoTWFrZSBmdW5jdGlvbilcclxuICAgIGNvbnNvbGUubG9nKFwiWW91IGFyZSBnZXR0aW5nIHJlYWR5IHRvIHRyYXZlbC5cIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIkhvcGUgZXZlcnl0aGluZyBnb2VzIHdlbGwuLi5cIilcclxuICAgIGNvbnNvbGUubG9nKFwifkNoZWNraW5nIGZvciBSYW5kb20gRXZlbnR+XCIpO1xyXG4gICAgYWxlcnQoXCJZb3UgYXJlIGdldHRpbmcgcmVhZHkgdG8gdHJhdmVsLlwiKTtcclxuICAgIGFsZXJ0KFwiSG9wZSBldmVyeXRoaW5nIGdvZXMgd2VsbC4uLlwiKVxyXG4gICAgYWxlcnQoXCJ+Q2hlY2tpbmcgZm9yIFJhbmRvbSBFdmVudH5cIik7XHJcbiAgICAvLyByYW5kb21FdmVudCA9IGNoZWNrRm9yUmFuZG9tVHJhdmVsRXZlbnQoKTtcclxuICAgIC8vIC8vIFVwZGF0ZSBwbGF5ZXIgbG9jYXRpbiB0byBuZXcgbG9jYXRpb25cclxuICAgIC8vIGlmIChyYW5kb21FdmVudCA9PSB0cnVlKSB7XHJcbiAgICAvLyAgICAgLy8gUnVuIHJhbmRvbSBldmVudFxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKFwiTG9va3MgbGlrZSBzb21ldGhpbmcgY2FtZSB1cC5cIik7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJ+UnVubmluZyBSYW5kb20gRXZlbnR+XCIpXHJcbiAgICAvLyAgICAgZXZlbnRPdXRjb21lID0gcnVuUmFuZG9tVHJhdmVsRXZlbnQoKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIkxvb2tzIGxpa2UgaXQncyBnb25uYSBiZSBzbW9vdGggc2FpbGluZyFcIik7XHJcbiAgICBhbGVydChcIkxvb2tzIGxpa2UgaXQncyBnb25uYSBiZSBzbW9vdGggc2FpbGluZyFcIik7XHJcblxyXG4gICAgLy8gaWYgKGV2ZW50T3V0Y29tZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWwgdHJhdmVsIHRvICR7ZGVzdGluYXRpb259YCk7XHJcbiAgICAgICAgYWxlcnQoYFN1Y2Nlc3NmdWwgdHJhdmVsIHRvICR7ZGVzdGluYXRpb259YCk7XHJcbiAgICAgICAgcGxheWVyLnBsYXllckRhdGEuY3VycmVudExvY2FsID0gZGVzdGluYXRpb247XHJcbiAgICAgICAgbGV0IG5ld0RydWdMaXN0ID0gY3JlYXRlRHJ1Z0xpc3QoKSAgLy8gYXJncyhxdHlNYXgsIGxvY2FsTXVsdGlwbGllciwgbHVjaylcclxuICAgICAgICBzZXRDdXJyZW50RHJ1Z0xpc3QobmV3RHJ1Z0xpc3QpO1xyXG4gICAgICAgIGRpc3BsYXlEcnVnQnV5U2VsbExpc3QoKTtcclxuICAgICAgICB1cGRhdGVMb2NhdGlvbkRpc3BsYXkoZGVzdGluYXRpb24pXHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGBEb2Vzbid0IGxvb2sgbGlrZSB5b3VyIGdvaW5nIHRvIG1ha2UgaXQgdG9kYXksICR7ZXZlbnRPdXRjb21lfSBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgaXMgZ29ubmEgdGllIHVzIHVwIHRvZGF5YCk7XHJcbiAgICAvLyB9XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdHJhdmVsTG9jYWw7IiwiXHJcbmltcG9ydCB1cGRhdGVMb2NhdGlvbkRpc3BsYXkgZnJvbSAnLi91cGRhdGVMb2NhdGlvbkRpc3BsYXkuanMnO1xyXG5pbXBvcnQgdXBkYXRlVHJhbnNwb3J0YXRpb25NZXRob2REaXNwbGF5IGZyb20gJy4vdXBkYXRlVHJhbnNwb3J0TWV0aG9kRGlzcGxheS5qcyc7XHJcbmltcG9ydCB1cGRhdGVDdXJyZW5jeURpc3BsYXkgZnJvbSAnLi91cGRhdGVDdXJyZW5jeURpc3BsYXkuanMnO1xyXG5pbXBvcnQgdXBkYXRlSGVhbHRoRGlzcGxheSBmcm9tICcuL3VwZGF0ZUhlYWx0aERpc3BsYXkuanMnO1xyXG5pbXBvcnQgeyBkaXNwbGF5RHJ1Z0J1eVNlbGxMaXN0LCBkaXNwbGF5UGxheWVyRHJ1Z0ludmVudG9yeSB9IGZyb20gJy4vZGlzcGxheURydWdMaXN0LmpzJztcclxuaW1wb3J0IHsgZ2V0UGxheWVyMSwgc2V0UGxheWVyMSB9IGZyb20gJy4vcGxheWVyLmpzJztcclxuaW1wb3J0IHsgY3JlYXRlRHJ1Z0xpc3QsIHNldEN1cnJlbnREcnVnTGlzdCB9IGZyb20gJy4vZHJ1Z0Z1bmN0aW9ucy5qcyc7XHJcbmltcG9ydCB7IHVwZGF0ZVRyYXZlbEJ1dHRvbnMgfSBmcm9tICcuL3VwZGF0ZVRyYXZlbEJ1dHRvbnMuanMnO1xyXG5cclxuY29uc3QgaW5pdCA9ICgpID0+IHsgXHJcbiAgICBzZXRQbGF5ZXIxKCk7XHJcbiAgICBsZXQgcGxheWVyID0gZ2V0UGxheWVyMSgpO1xyXG4gICAgY29uc3QgZmlyc3REcnVnTGlzdCA9IGNyZWF0ZURydWdMaXN0KCk7XHJcbiAgICBzZXRDdXJyZW50RHJ1Z0xpc3QoZmlyc3REcnVnTGlzdCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhwbGF5ZXIpO1xyXG5cclxuICAgIC8vIGxldCB3ZWxjb21NZXNzYWdlMSA9IGBXaGF0IGlzIHVwIG15IG5ldyBmcmllbmQhPyAke3BsYXllcjEucGxheWVyRGF0YS5uYW1lfSBpcyB0aGUgYCArXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICBcIm5hbWUgcmlnaHQ/IE9mIGNvdXJzZSBJIGhhdmUgaGVhcmQgZ29vZCB0aGluZ3MsIG9yIHdlIHdvdWxkbid0IFwiICtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgIFwiYmUgY29udmVyc2F0aW5nIGhlcmUgYXQgdGhlIG1vbWVudCwgd291bGQgd2U/XCI7XHJcbiAgICAvLyBsZXQgd2VsY29tZU1Fc3NhZ2UyID0gXCJXZWxsIGdldHRpbmcgZG93biB0byBidXNpbmVzcy4uLiBJIGRvbid0IHRvdWNoIHRoZSBzdHVmZiBteSBcIiArIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFwic2VsZiwgYnV0IEkga25vdyBhIGd1eSBhbmQgSSBoYXZlIHRoaXMgc3RhY2sgb2YgY2FzaCBoZXJlIHRvIFwiICtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICBcImdldCB5b3Ugc3RhcnRlZC4gSGl0IHVwIHRoZSBsb2NhbCBkZWFsZXIgYW5kIHBpY2sgdXAgdGhlIHN1cHBsaWVzIFwiICtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWRlZCB0byBzdGFydCB5b3VyIGVtcGlyZSBteSBmcmllbmQhIFNreSdzIHRoZSBsaW1pdCBhbmQgdGhlIFwiICtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJvbmx5IGNvbG9yIHdlIHNlZSBpcyBHUkVFRU4hIVwiO1xyXG5cclxuICAgIC8vIGFsZXJ0KHdlbGNvbU1lc3NhZ2UxKTtcclxuICAgIC8vIGFsZXJ0KHdlbGNvbWVNRXNzYWdlMik7XHJcblxyXG4gICAgdXBkYXRlTG9jYXRpb25EaXNwbGF5KHBsYXllci5wbGF5ZXJEYXRhLmN1cnJlbnRMb2NhbCk7XHJcbiAgICB1cGRhdGVUcmFuc3BvcnRhdGlvbk1ldGhvZERpc3BsYXkocGxheWVyLnBsYXllckRhdGEuY3VycmVudFRyYW5zcG9ydE1ldGhvZCk7XHJcbiAgICB1cGRhdGVUcmF2ZWxCdXR0b25zKHBsYXllci5wbGF5ZXJEYXRhLmN1cnJlbnRMb2NhdGlvbkNpdHkpO1xyXG4gICAgdXBkYXRlQ3VycmVuY3lEaXNwbGF5KCdjYXNoRGlzcGxheScsIHBsYXllci5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQpO1xyXG4gICAgLy8gY29uc29sZS5sb2cocGxheWVyLnBsYXllckRhdGEuYmFua0FjY291bnQpO1xyXG4gICAgdXBkYXRlQ3VycmVuY3lEaXNwbGF5KCdiYW5rRGlzcGxheScsIHBsYXllci5wbGF5ZXJEYXRhLmJhbmtBY2NvdW50KTtcclxuICAgIHVwZGF0ZUN1cnJlbmN5RGlzcGxheSgnZGVidERpc3BsYXknLCBwbGF5ZXIucGxheWVyRGF0YS5kZWJ0KTtcclxuICAgIHVwZGF0ZUhlYWx0aERpc3BsYXkocGxheWVyLnBsYXllckRhdGEuaGVhbHRoKTtcclxuXHJcblxyXG4gICAgXHJcbiAgICBkaXNwbGF5RHJ1Z0J1eVNlbGxMaXN0KGZpcnN0RHJ1Z0xpc3QpO1xyXG4gICAgZGlzcGxheVBsYXllckRydWdJbnZlbnRvcnkoKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdDsiLCJjb25zdCB1cGRhdGVUcmFuc3BvcnRhdGlvbk1ldGhvZERpc3BsYXkgPSAoVHJhbnNwb3J0TWV0aG9kKSA9PiB7XHJcbiAgICBjb25zdCB0cmFuc3BvcnRhdGlvbk1ldGhvZERpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudFRyYW5zcG9ydE1ldGhvZCcpO1xyXG4gICAgLy8gY29uc29sZS5sb2codHJhbnNwb3J0YXRpb25NZXRob2REaXNwbGF5KTtcclxuICAgIHRyYW5zcG9ydGF0aW9uTWV0aG9kRGlzcGxheS5pbm5lclRleHQgPSBUcmFuc3BvcnRNZXRob2Q7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVRyYW5zcG9ydGF0aW9uTWV0aG9kRGlzcGxheTsiLCJpbXBvcnQgJy4vcmVzZXQuY3NzJztcclxuaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xyXG4vLyBpbXBvcnQgJy4vRDV6ZHRrMC5qcGVnJztcclxuaW1wb3J0IGVsX2J0bk5ld0dhbWUgZnJvbSAnLi9lbF9uZXdHYW1lJztcclxuXHJcblxyXG4vLyBjb25zdCBhcHAgPSAoKCkgPT4ge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiVGVzdGluZy4uLlwiKVxyXG5cclxuICAgIC8vIFZhcmlhYmxlIHRvIGhvbGQgTG9jYXRpb25zIGFmdGVyIGluaXRpYXRpb24gPj4gYWxsb3cgcGxheWVyIHRvIGFkZCBsb2NhdGlvbnMgb3IgdXNlIGRlZmF1bHQgbG9jYXRpb25zXHJcbiAgICAvL2NvbnN0IExPQ0FUSU9OUyA9IFtdO1xyXG5cclxuXHJcbiAgICAvLyAvLyBEZWZhdWx0IENpdHkgTG9jYXRpb25cclxuICAgIC8vIGNvbnN0IGxvY2F0aW9uQ2l0aWVzID0gW1xyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiTmV3IFlvcmsgQ2l0eSwgTllcIiwgICAgICAgICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBUaGUgQmlnIEFwcGxlLCB3aGVyZSBhbGwgdGhlIFdhbGxzdHJlZXQgbW9uZXkgaXMgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvd2RlcmVkIGNvYXRlZCBhbmQgdGhlIGx1ZGVzIHdlcmVudCd0IGxlZnQgaW4gXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA4MCdzYCwgIFxyXG4gICAgLy8gICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJvbnhcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlF1ZWVuc1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQ2VudHJhbCBQYXJrXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJNYW5oYXR0YW5cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkNvbmV5IElzbGFuZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJvb2tseW5cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGNpdHlOYW1lOiBcIkxvcyBBbmdlbGVzLCBDQVwiLCAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYEhvbWUgdG8gY2VsZWJyaXRpZXMsIGFydGlzdHMgYW5kIGZyZWUgc3Bpcml0cywgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIExvcyBBbmdlbGVzIG5ldmVyIHN0b3BzIGF0dHJhY3RpbmcgcGVvcGxlIGZyb20gXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGNvcm5lciBvZiB0aGUgZ2xvYmUuIFRoaXMgY29zbW9wb2xpdGFuIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5IG9mZmVycyBhIGh1YiBmb3IgdGhlIGVudGVydGFpbm1lbnQgaW5kdXN0cnkgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBlYXN5IGFjY2VzcyB0byB0aGUgYmVhY2ggYW5kIHRob3NlIGludGVyZXN0ZWRcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gQ2FuZGkhYCwgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAvLyAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAvLyAgICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkhvbGx5d29vZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiV2VzdCBIb2xseXdvb2RcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkRvd250b3duXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJCZXZlcmx5IEhpbGxzXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJUaGUgQmVhY2hlc1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUGFzYWRlbmFcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGNpdHlOYW1lOiBcIkNoaWNhZ28sIElMXCIsICAgICAgICAgICBcclxuICAgIC8vICAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgVGhlIGNpdHkgaXMgZmFtb3VzIGZvciBpdHMgaWNvbmljIGFyY2hpdGVjdHVyZSBhbmQgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlYXV0aWZ1bCBza3lsaW5lLiBUaG9zZSBjb2xkLCBiaXR0ZXIgd2ludGVycyBpbiBDaGljYWdvXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2UgdGhlIG5lZWQgZm9yIEZpcmUgZGlyZSFgLCAgICBcclxuICAgIC8vICAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgIC8vICAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAvLyAgICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkh1bWJvbGR0IFBhcmtcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdhcmZpZWxkIFBhcmtcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIldlc3QgTG9vcFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiT2xkIFRvd25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlJvc2NvZSBWaWxsYWdlXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJMaW5jb2xuIFBhcmtcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGNpdHlOYW1lOiBcIkhvdXN0b24sIFRYXCIsICAgICAgICAgICBcclxuICAgIC8vICAgICAgICAgY2l0eURlc2NyaXB0aW9uOiBgSG91c3RvbuKAmXMgc3RhYmxlIGpvYiBtYXJrZXQsIGRpdmVyc2UgZWNvbm9teSBhbmQgbGl2YWJsZSBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3Job29kcyBtYWtlIHRoZSBUZXhhcyBjaXR5IGEgcG9wdWxhciBjaG9pY2UgZm9yIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VuZyBwcm9mZXNzaW9uYWxzLiBUaGUgbmlnaHQgbGlmZSBpcyBhbGl2ZSBhbmQgd2VsbCxcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHNvIGFyZSB0aGUgcGFydHkgZmF2b3JzIHRoYXQgZ28gd2l0aCBpdC5gLCAgICBcclxuICAgIC8vICAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgIC8vICAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAvLyAgICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkRvd250b3duXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTcHJpbmdcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkZvcnQgQmVuZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQnJhem9yaWFcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkdhbHZlc3RvblwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTGFrZSBIb3VzdG9uXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICBdLFxyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAge1xyXG4gICAgLy8gICAgICAgICBjaXR5TmFtZTogXCJQaGVvbml4LCBBWlwiLCAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlEZXNjcmlwdGlvbjogYFN1cnJvdW5kZWQgYnkgZGVzZXJ0IG1vdW50YWlucyBhbmQgbnVtZXJvdXMgaGlraW5nIHRyYWlscyxcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhvZW5peCBpcyB0aGUgcGVyZmVjdCBwbGFjZSB0byBsaXZlIGZvciB0aG9zZSB3aG8gbG92ZSBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlbmRpbmcgdGltZSBpbiB0aGUgZ3JlYXQgb3V0ZG9vcnMgZ2V0dGluZyAnYXR0dW5lJyB3aXRoXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdHVyZWAsICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUGFyYWRpc2UgVmFsbGV5XCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJNZXNhXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHbGVuZGFsZVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUGVvcmlhXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJBcGFjaGUgSnVuY3Rpb25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNjb3R0c2RhbGVcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGNpdHlOYW1lOiBcIlBoaWxhZGVscGhpYSwgUEFcIiwgICAgICAgICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBCZXNpZGVzIGJlaW5nIG9uZSBvZiB0aGUgbW9zdCBoaXN0b3JpY2FsbHkgc2lnbmlmaWNhbnQgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdGllcyBpbiB0aGUgY291bnRyeSwgUGhpbGFkZWxwaGlhIG9mZmVycyBhIGhpcCBhcnRzIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBzY2VuZSwgbXVsdGlwbGUgbXVzaWMgdmVudWVzIGFuZCBwbGVudHkgb2YgdHJlbmR5IFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0YXVyYW50cywgdGhlIEhpcHN0ZXJzIGFyZSBpbnRvICdkZXNpbmVycyBpZiB5b3UgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIGtub3cgd2hhdCBJIG1lYW4uJ2AsICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5Q29udHJvbDogXCJVbmtub3duXCIsICAgICAgICAvLyBPcmcgdGhhdCBoYXMgY3VycmVudCBjb250cm9sIG9mIHRoZSBjaXR5LlxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGVmYXVsdCBMb2NhbCBMb2NhdGlvbnNcclxuICAgIC8vICAgICAgICAgbG9jYXRpb25zTG9jYWw6IFtcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiQ2hlc3RudXQgSGlsbFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiUm94Ym9yb3VnaFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTW91bnQgQWlyeVwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRWFzdCBGYWxsc1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiR2VybWFuIFRvd25cIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIldlc3QgT2FrIExhbmVcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGNpdHlOYW1lOiBcIkphY2tzb252aWxsZSwgRkxcIiwgICAgICAgICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBKYWNrc29udmlsbGUsIHBlcmZlY3RseSBwb3NpdGlvbmVkIGFsb25nIHRoZSBBdGxhbnRpYyBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgT2NlYW4gaW4gTm9ydGhlYXN0IEZsb3JpZGEsIGlzIGEgbmF0dXJhbCBwYXJhZGlzZSBmb3IgXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2l0b3JzIGxvb2tpbmcgZm9yIGFuICdhZmZvcmRhYmxlJyB5ZXQgbHV4dXJpb3VzIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbiwgd2l0aCBhbGwgdGhlICdhbW1lbml0aWVzJy5gLCAgICBcclxuICAgIC8vICAgICAgICAgY2l0eUNvbnRyb2w6IFwiVW5rbm93blwiLCAgICAgICAgLy8gT3JnIHRoYXQgaGFzIGN1cnJlbnQgY29udHJvbCBvZiB0aGUgY2l0eS5cclxuICAgIC8vICAgICAgICAgICAgIC8vIERlZmF1bHQgTG9jYWwgTG9jYXRpb25zXHJcbiAgICAvLyAgICAgICAgIGxvY2F0aW9uc0xvY2FsOiBbXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkRvd250b3duXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJTcHJpbmdmaWVsZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiRWFzdHNpZGVcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIlNwb3J0cyBDb21wbGV4XCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJGYWlyZmllbGRcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbG9jYXRpb25OYW1lOiBcIkJyZW50d29vZFwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgXSxcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgY2l0eU5hbWU6IFwiU2VhdHRsZSwgV0FcIiwgICAgICAgICAgIFxyXG4gICAgLy8gICAgICAgICBjaXR5RGVzY3JpcHRpb246IGBUaGUgQ0hBWiBab25lIGhhcyBiZWVuIGluZGVmaW5pdGVseSBleHRlbmRlZCBmb3IgeW91ciBcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2V0LCBWaXNpdCBQaWtlIFBsYWNlIGFuZCB0aGUgUGllciB0byBmaW5kIHBsZW50eVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBzaW1pbGFyIGZlbGxvd3MgYW5kIHRob3NlIHdpbGxpbmcgdG8gaW52ZXN0IHRvIFxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgaWRlYXMgYW5kICdTdGFydC1VcHMnYCwgICAgXHJcbiAgICAvLyAgICAgICAgIGNpdHlDb250cm9sOiBcIlVua25vd25cIiwgICAgICAgIC8vIE9yZyB0aGF0IGhhcyBjdXJyZW50IGNvbnRyb2wgb2YgdGhlIGNpdHkuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBEZWZhdWx0IExvY2FsIExvY2F0aW9uc1xyXG4gICAgLy8gICAgICAgICBsb2NhdGlvbnNMb2NhbDogW1xyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJOb3J0aCBHYXRlXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJHcmVlbiBMYWtlXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJVbml2ZXJzaXR5IERpc3RyaWN0XCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYXZnUXVhbGl0eTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmljZVJhbmtpbmc6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc2VydmljZXM6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcG9saWNlUHJlc2VuY2U6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxvY2F0aW9uTmFtZTogXCJDYXBpdG9sIEhpbGxcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiAwLCAgICAgICAgICAgICAgICAgICAgICAvL0JhbW1lclxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBtaW5RdWFudGl0eTogMCxcclxuICAgIC8vICAgICAgICAgICAgICAgICBtYXhRdWFudGl0eTogMTAwLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiU29kb1wiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGF2Z1F1YWxpdHk6IFwiXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcHJpY2VSYW5raW5nOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHBvbGljZVByZXNlbmNlOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgfSxcclxuICAgIC8vICAgICAgICAgICAgIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbk5hbWU6IFwiTWFnbm9saWFcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBhdmdRdWFsaXR5OiBcIlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByaWNlUmFua2luZzogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZXJ2aWNlczogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgICAgICBwb2xpY2VQcmVzZW5jZTogXCJcIixcclxuICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vIF1cclxuXHJcbiAgICAvLyB0cmF2ZWxMb2NhbChgS1AncyBIb3VzZWApO1xyXG4gICAgLy9Jbml0aWFsaXplIGRpc3BsYXkgcGxheWVyIGRlZmF1bHRzXHJcbiAgICAvLyBjb25zdCBpbml0ID0gKCkgPT4geyBcclxuICAgIC8vICAgICBsZXQgcGxheWVyMSA9IGNyZWF0ZVBsYXllcihcIktQSW5jNDI1XCIsMjAsMjAwLDUwMDAwLDIwMDAwLDUwMDAwKTtcclxuICAgIC8vICAgICB1cGRhdGVMb2NhdGlvbkRpc3BsYXkocGxheWVyMS5wbGF5ZXJEYXRhLmN1cnJlbnRMb2NhbCk7XHJcbiAgICAvLyAgICAgdXBkYXRlVHJhbnNwb3J0YXRpb25NZXRob2REaXNwbGF5KHBsYXllcjEucGxheWVyRGF0YS5jdXJyZW50VHJhbnNwb3J0TWV0aG9kKTtcclxuICAgIC8vICAgICB1cGRhdGVDdXJyZW5jeURpc3BsYXkoJ2Nhc2hEaXNwbGF5JywgcGxheWVyMS5wbGF5ZXJEYXRhLmNhc2hPbkhhbmQpO1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKHBsYXllcjEucGxheWVyRGF0YS5iYW5rQWNjb3VudCk7XHJcbiAgICAvLyAgICAgdXBkYXRlQ3VycmVuY3lEaXNwbGF5KCdiYW5rRGlzcGxheScsIHBsYXllcjEucGxheWVyRGF0YS5iYW5rQWNjb3VudCk7XHJcbiAgICAvLyAgICAgdXBkYXRlQ3VycmVuY3lEaXNwbGF5KCdkZWJ0RGlzcGxheScsIHBsYXllcjEucGxheWVyRGF0YS5kZWJ0KTtcclxuICAgIC8vICAgICB1cGRhdGVIZWFsdGhEaXNwbGF5KHBsYXllcjEucGxheWVyRGF0YS5oZWFsdGgpO1xyXG4gICAgLy8gICAgIGVsX2J0bk5ld0dhbWUoKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBlbF9idG5OZXdHYW1lKCk7XHJcbiAgICBcclxuXHJcbiAgICAvLyAvLyBUZXN0aW5nXHJcbiAgICAvLyBsZXQgcHJpY2UgPSBkcnVnTGlzdFsxXS5wcmljZTtcclxuICAgIC8vIGNvbnN0IGFkZGVkSXRlbSA9IHsgXCJuYW1lXCI6IFwiQ2FubmFiaXMgRmxvd2VyXCIsXCJwcmljZVwiOiAxMCwgXCJxdWFudGl0eVwiOiAxMCwgXCJxdWFsaXR5XCI6IDN9O1xyXG4gICAgLy8gY29uc3QgcmVtb3ZlZEl0ZW0gPSB7IFwibmFtZVwiOiBcIkNhbm5hYmlzIEZsb3dlclwiLFwicHJpY2VcIjogMTAsIFwicXVhbnRpdHlcIjogMTAsIFwicXVhbGl0eVwiOiAzfTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGFkZGVkSXRlbSk7XHJcbiAgICAvLyAvLyBUZXN0aW5nXHJcblxyXG4vLyB9KSgpO1xyXG4iLCJpbXBvcnQgaW5pdCBmcm9tIFwiLi9pbml0XCI7XHJcblxyXG5jb25zdCBlbF9idG5OZXdHYW1lID0gKCkgPT4ge1xyXG4gICAgY29uc3QgYnRuTmV3R2FtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG5OZXdHYW1lJyk7XHJcblxyXG4gICAgYnRuTmV3R2FtZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2xpY2snKTtcclxuICAgICAgICBpbml0KCk7XHJcbiAgICB9LHtvbmNlOiB0cnVlfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBlbF9idG5OZXdHYW1lOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJ2YWx1ZSIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJUZXh0IiwiZm9ybWF0dGVyIiwiSW50bCIsIk51bWJlckZvcm1hdCIsInNlbGVjdG9yIiwiY3VycmVuY3lEaXNwbGF5IiwibmV3VmFsdWUiLCJmb3JtYXQiLCJ0ZXh0Q29udGVudCIsImN1cnJlbnRIZWFsdGgiLCJuYW1lIiwicHJpY2UiLCJxdWFudGl0eSIsInF1YWxpdHkiLCJpbmZvIiwiY29uc29sZSIsImxvZyIsImN1cnJlbnREcnVnTGlzdCIsImRlZmF1bHREcnVnTGlzdCIsImNyZWF0ZURydWdMaXN0IiwiYXJncyIsIm5ld0RydWdMaXN0IiwiZm9yRWFjaCIsImRydWciLCJjYWxjdWxhdGVkUHJpY2UiLCJjb2luRmxpcCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInF0eU1heCIsImxvY2FsTXVsdGlwbGllciIsImx1Y2siLCJsdWNrRWZmZWN0IiwiY2FsY3VsYXRlZFF0eSIsImVkaXRWZW5kb3JEcnVnUXR5IiwiY2hhbmdlZERydWciLCJzZXRDdXJyZW50RHJ1Z0xpc3QiLCJkcnVnTGlzdCIsIml0ZW1zSGVsZCIsIm5ld0l0ZW1zIiwiYXZlcmFnZVByaWNlIiwicm91bmQiLCJwbGF5ZXIxIiwiZ2V0UGxheWVyMSIsImFkZGVkSXRlbSIsInBsYXllciIsImN1cnJlbnROdW1PZkl0ZW1zIiwicGxheWVyRGF0YSIsInBsYXllckludmVudG9yeSIsIm1heEl0ZW1zIiwiYWxlcnQiLCJvdmVyRmxvdyIsImxvc3REcnVncyIsInBvcCIsImFjY291bnQiLCJjaGFuZ2UiLCJyZW1vdmVkSXRlbSIsImZvdW5kSXRlbSIsIml0ZW1Ub0NoZWNrIiwiZW50cmllcyIsInByb2R1Y3ROYW1lIiwicHJvZHVjdFF0eSIsInByb2R1Y3RQcmljZSIsImdhbWVDb250YWluZXIiLCJjb250YWluZXJCdXlTZWxsUHJvZHVjdCIsImNsYXNzTGlzdCIsImFkZCIsImNvbnRhaW5lckJ1eVNlbGxQcm9kdWN0SGVhZGVyIiwibGFiZWxQcm9kdWN0TmFtZSIsImJ0bkNhbmNlbCIsImdyaWRCdXlTZWxsUHJvZHVjdCIsImxhYmVsVG90YWxDb3N0IiwibGFiZWxUb3RhbEdhaW4iLCJpbnB1dEJ1eVByb2R1Y3QiLCJ0eXBlIiwibWluIiwibWF4IiwiZHJ1Z05hbWUiLCJnZXRQcm9kdWN0UXR5RnJvbUludmVudG9yeSIsImlucHV0U2VsbFByb2R1Y3QiLCJtYXhQcm9kdWN0VG9TZWxsIiwiZ2V0UHJvZHVjdFF0eUZyb21QbGF5ZXJJbnZlbnRvcnkiLCJidG5CdXlQcm9kdWN0IiwiYnRuU2VsbFByb2R1Y3QiLCJhZGRFdmVudExpc3RlbmVyIiwidmVuZG9yIiwiYXZnUXVhbGl0eSIsInRvdGFsUHJpY2UiLCJjYXNoT25IYW5kIiwiY2xpY2tlZERydWdRdHlDb250YWluZXIiLCJyZXBsYWNlIiwibmV3UXR5IiwidmVuZG9yRHJ1ZyIsImRpc3BsYXlQbGF5ZXJEcnVnSW52ZW50b3J5IiwicGFyc2VJbnQiLCJzb2xkRHJ1ZyIsImN1cnJlbnRMb2NhdGlvbiIsImNoYW5nZUhlYWx0aCIsImhlYWx0aCIsImRpc3BsYXlEcnVnQnV5U2VsbExpc3QiLCJhdmFpbGFibGVQcm9kdWN0Q29udGFpbmVyIiwiaW5uZXJIVE1MIiwiZHJ1Z0RhdGFDb250YWluZXIiLCJkcnVnTmFtZUNvbnRhaW5lciIsImRydWdRdHlDb250YWluZXIiLCJkcnVnUXR5IiwiZHJ1Z1ByaWNlQ29udGFpbmVyIiwiZHJ1Z1ByaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGUiLCJwcm9kdWN0T25IYW5kQ29udGFpbmVyIiwibG9jYXRpb25DaXRpZXMiLCJjaXR5TmFtZSIsImNpdHlEZXNjcmlwdGlvbiIsImNpdHlDb250cm9sIiwibG9jYXRpb25zTG9jYWwiLCJsb2NhdGlvbk5hbWUiLCJwcmljZVJhbmtpbmciLCJzZXJ2aWNlcyIsInBvbGljZVByZXNlbmNlIiwibWluUXVhbnRpdHkiLCJtYXhRdWFudGl0eSIsInVwZGF0ZVRyYXZlbEJ1dHRvbnMiLCJjaXR5IiwidHJhdmVsQnV0dG9uTm9kZUxpc3QiLCJwbGF5ZXJDaXR5IiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbnNCeU5hbWUiLCJtZXRyb0J0biIsImRlc3RpbmF0aW9uIiwiY3VycmVudExvY2FsIiwiY3VycmVudERheSIsIm1heERheXMiLCJiYW5rQWNjb3VudCIsImRlYnQiLCJndW5zIiwibHVja0xldmVsIiwiY3VycmVudExvY2F0aW9uQ2l0eSIsImN1cnJlbnRUcmFuc3BvcnRNZXRob2QiLCJjcmVhdGVQbGF5ZXIiLCJzZXRQbGF5ZXIxIiwiZmlyc3REcnVnTGlzdCIsIlRyYW5zcG9ydE1ldGhvZCIsIm9uY2UiXSwic291cmNlUm9vdCI6IiJ9