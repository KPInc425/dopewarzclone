(()=>{"use strict";var e={917:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} ","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;CAMC;;AAED;;;;;;;;;;;;IAYI,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;;IAEI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,oBAAoB;AACxB;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;AACpB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,QAAQ;IACR,4BAA4B;IAC5B,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["/*\r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com\r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section {\r\n    display:block;\r\n}\r\n\r\nnav ul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;  \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select {\r\n    vertical-align:middle;\r\n} "],sourceRoot:""}]);const l=i},28:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 90%;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3, h5 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}\r\n\r\n.inventoryLabelContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.dayCount, .timeOfDay {\r\n    display: inline-block;\r\n}\r\n\r\n.narrativeContainer {\r\n    position: absolute;\r\n    border: 10px solid rgb(75, 255, 75);\r\n    border-style: double;\r\n    border-radius: 0 20px 0 20px;\r\n    width: 50%;\r\n    height: fit-content;\r\n    top: 20%;\r\n    left: 50%;\r\n    transform: translate(-50%, -20%);\r\n    background-color: black;\r\n    padding: 25px;\r\n    padding-bottom: 5px;\r\n    text-align: center;\r\n    color: rgb(75, 255, 75);\r\n}\r\n\r\n#btnNext {\r\n    margin-top: 25px;\r\n    border: 1px solid rgb(75, 255, 75);\r\n    background: none;\r\n    color: rgb(75, 255, 75);\r\n}\r\n\r\n#btnNext:hover {\r\n    background-color: rgb(75, 255, 75);\r\n    color: black;\r\n}\r\n\r\n#btnNext:active {\r\n    background-color: rgba(75, 255, 75, 0.505);\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,oCAAoC;IACpC,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,wBAAwB;IACxB,mBAAmB;AACvB;;AAEA;IACI,+CAA+C;IAC/C,6BAA6B;IAC7B,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,gBAAgB;IAChB,kBAAkB;IAClB;yBACqB;IACrB,sBAAsB;AAC1B;AACA;IACI,+CAA+C;IAC/C,aAAa;IACb,kCAAkC;IAClC,wBAAwB;IACxB,YAAY;IACZ,uBAAuB;;AAE3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;;AAE3B;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;;AAEf;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;IAC5B,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,oBAAoB;AACxB;;AAEA;IACI,mCAAmC;IACnC,WAAW;AACf;AACA;IACI,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA,cAAc;AACd;IACI,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,mCAAmC;IACnC,oBAAoB;IACpB,4BAA4B;IAC5B,UAAU;IACV,mBAAmB;IACnB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kCAAkC;IAClC,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;IACI,kCAAkC;IAClC,YAAY;AAChB;;AAEA;IACI,0CAA0C;AAC9C",sourcesContent:["html {\r\n    /* background: rgb(44, 44, 44); */\r\n    background-color: rgb(9, 9, 9);\r\n}\r\n\r\nbody {\r\n    max-width: 90%;\r\n    min-width: 650px;\r\n    margin: auto;\r\n    color: white;\r\n}\r\n\r\nh3, h5 {\r\n    padding: 10px;\r\n}\r\n\r\n#gameContainer {\r\n    /* min-width: 500px; */\r\n    width: auto;\r\n    /* height: fit-content; */\r\n}\r\n\r\n.flexContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: 2px solid green;\r\n}\r\n\r\n.resourceAmount {\r\n    text-align: right;\r\n}\r\n\r\n.topGrid {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n    /* grid-template-rows: 70% 70% 5%; */\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    padding: 20px;\r\n    /* padding-left: 10px; */\r\n    height: max-content;\r\n}\r\n\r\n.grid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    /* border: 2px solid green; */\r\n    display: grid;\r\n    grid-template-columns: 49% 49%;\r\n    grid-template-rows: auto;\r\n    column-gap: 10px;\r\n    /* color: white; */\r\n    /* padding: 20px;\r\n    padding-left: 10px; */\r\n    /* max-height: 75vh; */\r\n}\r\n.productGrid {\r\n    /* background-color: rgba(18, 47, 76, 0.765); */\r\n    display: grid;\r\n    grid-template-columns: 50% 20% 30%;\r\n    grid-template-rows: auto;\r\n    margin: auto;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n.productGrid * {\r\n    border: 1px solid white;\r\n}\r\n\r\n.travel {\r\n    font-size: 95%;\r\n    border: 2px solid green;\r\n}\r\n\r\n#scoreBoard {\r\n    /* width: 50%; */\r\n    /* height: 33vh; */\r\n    border: 5px solid blue;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n}\r\n\r\n#inputButtons {\r\n    /* height: 33vh; */\r\n    border: 5px solid yellow;\r\n}\r\n\r\n#availableProduct {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#productOnHand {\r\n    border: 2px solid red;\r\n    text-align: center;\r\n}\r\n\r\n#locationImage {\r\n    display: block;\r\n    height: 15vh;\r\n    width: 100%;;\r\n    \r\n}\r\n\r\ntable, th {\r\n    border: 1px solid;\r\n    border-collapse: collapse;\r\n}\r\n\r\ntd:last-of-type, th:last-of-type {\r\n    text-align: right;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\ntd, th {\r\n    padding: 6px;\r\n}\r\n\r\np {\r\n    /* border: 1px solid pink; */\r\n    padding: 10px 20px;\r\n}\r\n\r\nbutton {\r\n    border-radius: 12px;\r\n    padding: 5px;\r\n    width: 100%;\r\n    justify-self: center;\r\n}\r\n\r\n.availableProductData:hover {\r\n    background-color: rgb(160, 138, 15);\r\n    color: blue;\r\n}\r\n.availableProductData:active {\r\n    background-color: rgb(160, 15, 15);\r\n    color: rgb(150, 150, 179);\r\n}\r\n\r\n/* BuySellUI */\r\n.containerBuySellProduct {\r\n    border: 2px solid green;\r\n    text-align: center;\r\n    position: absolute;\r\n    width: 200px;\r\n    height: 150px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: black;\r\n}\r\n\r\n.buySellUIHeader {\r\n    display: flex;\r\n    background: linear-gradient(green, purple);\r\n}\r\n\r\n.buySellUIHeader .btnCancel {\r\n    margin-left: auto;\r\n    width: 64px;\r\n}\r\n\r\n.gridBuySell {\r\n    display: grid;\r\n    grid-template-columns: 50% 50%;\r\n}\r\n\r\n.gridBuySell input {\r\n    width: 64px;\r\n    margin: auto;\r\n}\r\n\r\n.labelTotalCost {\r\n    color: red;\r\n}\r\n\r\n.labelTotalGain {\r\n    color: green;\r\n}\r\n\r\n#inputButtons {\r\n    padding: 10px;\r\n}\r\n\r\n.hidden {\r\n    visibility: collapse;\r\n    display: none;\r\n}\r\n\r\n.inventoryLabelContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.dayCount, .timeOfDay {\r\n    display: inline-block;\r\n}\r\n\r\n.narrativeContainer {\r\n    position: absolute;\r\n    border: 10px solid rgb(75, 255, 75);\r\n    border-style: double;\r\n    border-radius: 0 20px 0 20px;\r\n    width: 50%;\r\n    height: fit-content;\r\n    top: 20%;\r\n    left: 50%;\r\n    transform: translate(-50%, -20%);\r\n    background-color: black;\r\n    padding: 25px;\r\n    padding-bottom: 5px;\r\n    text-align: center;\r\n    color: rgb(75, 255, 75);\r\n}\r\n\r\n#btnNext {\r\n    margin-top: 25px;\r\n    border: 1px solid rgb(75, 255, 75);\r\n    background: none;\r\n    color: rgb(75, 255, 75);\r\n}\r\n\r\n#btnNext:hover {\r\n    background-color: rgb(75, 255, 75);\r\n    color: black;\r\n}\r\n\r\n#btnNext:active {\r\n    background-color: rgba(75, 255, 75, 0.505);\r\n}"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var c=e[l],s=r.base?c[0]+r.base:c[0],d=o[s]||0,u="".concat(s," ").concat(d);o[s]=d+1;var p=t(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var y=a(A,r);r.byIndex=l,n.splice(l,0,{identifier:u,updater:y,references:1})}i.push(u)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=t(o[i]);n[l].references--}for(var c=r(e,a),s=0;s<o.length;s++){var d=t(o[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),l=t(565),c=t.n(l),s=t(216),d=t.n(s),u=t(589),p=t.n(u),A=t(917),y={};y.styleTagTransform=p(),y.setAttributes=c(),y.insert=i().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=d(),n()(A.Z,y),A.Z&&A.Z.locals&&A.Z.locals;var m=t(28),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),n()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;const h=async(e,n)=>{const t=document.querySelector(".narrativeContainer"),r=t.querySelector(".narrativeTextContainer");let a=t.querySelector("#btnNext"),o=0;console.log(o),function e(i){t.classList.contains("hidden")&&t.classList.remove("hidden"),console.log(i),r.textContent=i[o],a.addEventListener("click",(()=>{r.textContent="",t.classList.add("hidden"),console.log(i.length),o<i.length-1?(i[o],o++,console.log(o),e(i)):(console.log(o),t.classList.add("hidden"),n())}),{once:!0})}(e)},C=e=>{document.getElementById("currentLocation").innerText=e},v=new Intl.NumberFormat({style:"currency"}),b=(e,n)=>{const t=document.getElementById(e);let r=v.format(n.toFixed(2));t.textContent=`$${r}`},f=e=>{document.getElementById("healthDisplay").innerText=`${e}hp`},I=(e,n,t,r)=>({name:e,quantity:t,price:n,quality:r,info:()=>{console.log({name:e,quantity:t,price:n})}});let B=[];const x=[{name:"Cannabis Flower",price:10},{name:"Cannabis Extract",price:30},{name:"Acid",price:15},{name:"Cocaine",price:120},{name:"Crack",price:70},{name:"Heroin",price:95},{name:"Methamphetamine",price:50}],w=(...e)=>{let n=[];return x.forEach((t=>{let r,a=Math.floor(100*Math.random()),o=e[0]||100,i=e[1]||1,l=e[2]||0,c=1+.1*l;r=a>(50-l||50)?Math.floor(t.price+Math.floor(30*Math.random())/100*t.price):Math.floor(t.price-Math.floor(30*Math.random())/100*t.price);let s=Math.floor(Math.random()*o*i*c);n.push(I(t.name,r,s))})),n},k=e=>{B.forEach((n=>{n.name===e.name&&(console.log(n),n.quantity=e.quantity)}))},Q=e=>{B=e},D=(e,n)=>{let t=(e.price*e.quantity+n.price*n.quantity)/(e.quantity+n.quantity);return console.log(`AveragePrice: ${t}`),t=Math.round(t),t},E=()=>{const e=window.player1;document.getElementById("inventoryAmtLabel").textContent=`${e.playerData.currentNumOfItems}/${e.playerData.maxItems}`},N=e=>{console.log(e);let n=window.player1,t=(()=>{let e=window.player1,n=0;for(let t of e.playerData.playerInventory)n+=t.quantity;return n})();if(console.log(`Items Held: ${t}g's`),t>=n.playerData.maxItems)return alert("Your pockets are already bulgin buddy, come back when you have some room."),console.log("You ain't got no more pockets!"),0;if(t+e.quantity>n.playerData.maxItems){let r=t+e.quantity-n.playerData.maxItems;alert(`You overstuffed your pockets, getting a lil greedy there... You dropped ${r}g's of ${e.name}`),console.log(`You dropped ${r}g's of ${e.name}`),e.quantity=n.playerData.maxItems-t,n.playerData.lostDrugs.push(I(e.name,e.price,r,e.quality))}for(let t of n.playerData.playerInventory)if(console.log(t),t.name===e.name)return console.log(t.quantity),t.quantity+=e.quantity,console.log(t.quantity),t.price=D(t,e),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems+=e.quantity,E(),1;return"Nothing Here"==n.playerData.playerInventory[0].name&&n.playerData.playerInventory.pop(),n.playerData.playerInventory.push(I(e.name,e.price,e.quantity,e.quality)),console.log(n.playerData.playerInventory),n.playerData.currentNumOfItems+=e.quantity,E(),1},q=(e,n)=>e+n,P=e=>{let n=window.player1;console.log(e);let t=(e=>{let n=window.player1;for(let[t,r]of n.playerData.playerInventory.entries())if(console.log(r),r.name==e.name)return console.log("Item found"),{name:r.name,index:t};return console.log("Item not found."),null})(e);if(console.log(n.playerData.playerInventory),null===t)return alert("You reach into your pockets and realize you've made a mistake..."),console.log("You don't own this item."),0;let r=t.index,a=n.playerData.playerInventory[r];return a.quantity-e.quantity<0?(console.log(`You do not have enough for this transactions. You have ${a.quantity}g's left...`),0):a.quantity-e.quantity==0?(console.log("vvv Player Inventory vvv"),console.log(n.playerData.playerInventory),n.playerData.playerInventory.splice(r,1),console.log("vvv Player Inventory vvv"),n.playerData.currentNumOfItems-=e.quantity,n.playerData.currentNumOfItems<1&&n.playerData.playerInventory.push(I("Nothing Here",0,0,0)),1):(console.log(`Item Quantity: ${a.quantity}`),a.quantity-=e.quantity,console.log(`Item Quantity: ${a.quantity}`),n.playerData.currentNumOfItems-=e.quantity,1)},L=(e,n,t)=>{const r=document.getElementById("gameContainer"),a=document.createElement("div");a.classList.add("containerBuySellProduct");const o=document.createElement("div");o.classList.add("buySellUIHeader");const i=document.createElement("h2");i.textContent=`${e} at $${t}/g`;const l=document.createElement("button");l.classList.add("btnCancel"),l.textContent="X",o.appendChild(i),o.appendChild(l),a.appendChild(o);const c=document.createElement("div");c.classList.add("gridBuySell");const s=document.createElement("p");s.classList.add("labelTotalCost"),s.textContent="$0";const d=document.createElement("p");d.classList.add("labelTotalGain"),d.textContent="$0";const u=document.createElement("input");u.type="number",u.min=1,u.value=1,u.max=(e=>{for(let n of B)if(n.name===e)return n.quantity})(e);const p=document.createElement("input");p.type="number",p.min=1,p.value=1;let A=(e=>{console.log(e),console.log(window.player1.playerData.playerInventory);for(let n of window.player1.playerData.playerInventory)if(console.log(n),n.name===e)return n.quantity;return 0})(e);p.max=A,0===A&&(p.min=0,p.value=0);const y=document.createElement("button");y.classList.add("btnBuy"),y.textContent="Buy";const m=document.createElement("button");m.classList.add("btnSell"),m.textContent="Sell",c.appendChild(s),c.appendChild(d),c.appendChild(u),c.appendChild(p),c.appendChild(y),c.appendChild(m),a.appendChild(c),r.appendChild(a),u.addEventListener("input",(()=>{s.textContent="$"+u.value*t})),p.addEventListener("input",(()=>{d.textContent="$"+p.value*t})),l.addEventListener("click",(()=>{a.remove()})),y.addEventListener("click",(()=>{let n=I(e,parseInt(t),parseInt(u.value));console.log(n),((e,n,t)=>{let r=window.player1;n=n||"Local Dealer",t=t||5;let a=e.price*e.quantity;if(a>r.playerData.cashOnHand)console.log("Too Broke!"),alert("Too Broke!");else{const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let o=parseInt(n.textContent-e.quantity);if(console.log(o),N(e)){let i=I(e.name,e.price,o,t);k(i),n.textContent=i.quantity,r.playerData.cashOnHand=q(r.playerData.cashOnHand,-a),b("cashDisplay",r.playerData.cashOnHand)}R()}})(n),a.remove()})),m.addEventListener("click",(()=>{let n=I(e,parseInt(t),parseInt(p.value));console.log(n),((e,n,t,r)=>{let a=window.player1,o=e.price*e.quantity;if(console.log(e),1==P(e)){const n=document.querySelector(`.container${e.name.replace(" ","")} .productQty > p`);let t=parseInt(n.textContent)+e.quantity;return console.log(t),n.textContent=t,k(e),a.playerData.cashOnHand=q(a.playerData.cashOnHand,o),b("cashDisplay",a.playerData.cashOnHand),R(),1}alert("How you gonna sell me something you ain't got mayne?"),alert("You get sucker punched in the back of the head and...black...out..."),a.changeHealth(-5),f(a.playerData.health),console.log("You don't have this to sell!")})(n),a.remove()}))},S=()=>{let e=B;const n=document.querySelector(".availableProductContainer");n.innerHTML="",e.forEach((e=>{let t=document.createElement("div");t.classList.add("productGrid"),0==e.quantity&&t.classList.add("hidden"),t.classList.add("availableProductData"),t.classList.add(`container${e.name.replace(" ","")}`);let r=document.createElement("div");r.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,r.appendChild(a),t.appendChild(r);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),t.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=`$ ${e.price}/g`,l.appendChild(c),t.appendChild(l),n.appendChild(t)})),document.querySelectorAll(".availableProductData").forEach((e=>{e.addEventListener("click",(()=>{let n=e.querySelector(".productName > p").textContent,t=(e.querySelector(".productQty > p").textContent,e.querySelector(".productPrice > p").textContent);t=Number(t.slice(1).replace("/g","")),console.log(t),L(n,0,t)}))}))},R=()=>{let e=window.player1;const n=document.querySelector(".productOnHandContainer");n.innerHTML="",e.playerData.playerInventory.forEach((e=>{let t=document.createElement("div");t.classList.add("productGrid"),t.classList.add("playerInventoryData");let r=document.createElement("div");r.classList.add("productName");let a=document.createElement("p");a.textContent=e.name,r.appendChild(a),t.appendChild(r);let o=document.createElement("div");o.classList.add("productQty");let i=document.createElement("p");i.textContent=e.quantity,o.appendChild(i),t.appendChild(o);let l=document.createElement("div");l.classList.add("productPrice");let c=document.createElement("p");c.textContent=`$ ${e.price}/g`,l.appendChild(c),t.appendChild(l),n.appendChild(t)})),(()=>{const e=window.player1;document.querySelectorAll(".productOnHandContainer").forEach((n=>{n.addEventListener("click",(t=>{t.stopImmediatePropagation(),console.log("click"),console.log(n);let r=n.querySelector(".productName > p").textContent;console.log(r);let a=n.querySelector(".productQty > p").textContent;console.log(a);let o=n.querySelector(".productPrice > p").textContent;console.log(o),"Nothing Here"!==r&&confirm("Do you want to dump?")&&(e.dumpProduct(r),E(),R())}))}))})()},O=()=>{if(window.player1.playerData.currentDay===window.player1.playerData.maxDays){alert("This is your last day! Might want to get fluid!");let e=document.querySelector(".travel"),n=e.cloneNode(!0);e.parentNode.replaceChild(n,e)}},T=document.getElementById("dayContainer"),H=()=>{T.querySelector(".dayCount #currentDayCount").textContent=window.player1.playerData.currentDay},M=()=>{T.querySelector(".timeOfDay").textContent=window.player1.playerData.timeOfDay},Y=e=>{let n=window.player1;if(n.playerData.currentLocal==e)return console.log("You are already here!"),0;console.log("You are getting ready to travel."),console.log("Hope everything goes well..."),console.log("~Checking for Random Event~"),h(["You are getting ready to travel.","Hope everything goes well...","~Checking for Random Event~","Looks like it's gonna be smooth sailing!"],(function(){console.log(`Successful travel to ${e}`),h([`Successful travel to ${e}`],(function(){n.playerData.currentLocal=e;let t=w();Q(t),S(),C(e),"on the Bus"===window.player1.playerData.currentTransportMethod?(window.player1.playerData.currentDay++,H(),O()):"using ride Share"===window.player1.playerData.currentTransportMethod?"Morning"===window.player1.playerData.timeOfDay?(window.player1.playerData.timeOfDay="Evening",M()):"Evening"===window.player1.playerData.timeOfDay&&(window.player1.playerData.currentDay++,H(),O(),window.player1.playerData.timeOfDay="Morning",M()):"in Used Luxury Vehicle"===window.player1.playerData.currentTransportMethod?"Morning"===window.player1.playerData.timeOfDay?(window.player1.playerData.timeOfDay="Afternoon",M()):"Afternoon"===window.player1.playerData.timeOfDay?(window.player1.playerData.timeOfDay="Evening",M()):"Evening"===window.player1.playerData.timeOfDay&&(window.player1.playerData.currentDay++,H(),O(),window.player1.playerData.timeOfDay="Morning",M()):"with personal Driver"===window.player1.playerData.currentTransportMethod&&("Morning"===window.player1.playerData.timeOfDay?(window.player1.playerData.timeOfDay="Afternoon",M()):"Afternoon"===window.player1.playerData.timeOfDay?(window.player1.playerData.timeOfDay="Evening",M()):"Evening"===window.player1.playerData.timeOfDay?(window.player1.playerData.timeOfDay="Night",M()):"Night"===window.player1.playerData.timeOfDay&&(window.player1.playerData.currentDay++,H(),O(),window.player1.playerData.timeOfDay="Morning",M())),(()=>{let e=window.player1;console.log(typeof e.playerData.debt.value);let n=e.playerData.debt.value*e.playerData.debt.taxRate;console.log(n),e.playerData.debt.value+=n,b("debtDisplay",e.playerData.debt.value),console.log(e.playerData.debt.value)})()}))}))},U=[{cityName:"New York City, NY",cityDescription:"The Big Apple, where all the Wallstreet money is \n                            powdered coated and the ludes werent't left in \n                            the 80's",cityControl:"Unknown",locationsLocal:[{locationName:"Bronx",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Queens",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Central Park",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Manhattan",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Coney Island",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Brooklyn",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Los Angeles, CA",cityDescription:"Home to celebrities, artists and free spirits, \n                            Los Angeles never stops attracting people from \n                            every corner of the globe. This cosmopolitan \n                            city offers a hub for the entertainment industry \n                            and easy access to the beach and those interested\n                            in Candi!",cityControl:"Unknown",locationsLocal:[{locationName:"Hollywood",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"West Hollywood",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Downtown",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Beverly Hills",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"The Beaches",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Pasadena",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Chicago, IL",cityDescription:"The city is famous for its iconic architecture and \n                            beautiful skyline. Those cold, bitter winters in Chicago\n                            make the need for Fire dire!",cityControl:"Unknown",locationsLocal:[{locationName:"Humboldt Park",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Garfield Park",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"West Loop",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Old Town",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Roscoe Village",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Lincoln Park",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Houston, TX",cityDescription:"Houston’s stable job market, diverse economy and livable \n                            neighborhoods make the Texas city a popular choice for \n                            young professionals. The night life is alive and well,\n                            and so are the party favors that go with it.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Spring",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Fort Bend",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Brazoria",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Galveston",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Lake Houston",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Pheonix, AZ",cityDescription:"Surrounded by desert mountains and numerous hiking trails,\n                            Phoenix is the perfect place to live for those who love \n                            spending time in the great outdoors getting 'attune' with\n                            nature",cityControl:"Unknown",locationsLocal:[{locationName:"Paradise Valley",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Mesa",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Glendale",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Peoria",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Apache Junction",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Scottsdale",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Philadelphia, PA",cityDescription:"Besides being one of the most historically significant \n                            cities in the country, Philadelphia offers a hip arts \n                            scene, multiple music venues and plenty of trendy \n                            restaurants, the Hipsters are into 'desiners if you \n                            know what I mean.'",cityControl:"Unknown",locationsLocal:[{locationName:"Chestnut Hill",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Roxborough",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Mount Airy",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"East Falls",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"German Town",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"West Oak Lane",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Jacksonville, FL",cityDescription:"Jacksonville, perfectly positioned along the Atlantic \n                            Ocean in Northeast Florida, is a natural paradise for \n                            visitors looking for an 'affordable' yet luxurious \n                            destination, with all the 'ammenities'.",cityControl:"Unknown",locationsLocal:[{locationName:"Downtown",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Springfield",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Eastside",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Sports Complex",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Fairfield",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""},{locationName:"Brentwood",avgQuality:"",priceRanking:"",minQuantity:0,maxQuantity:100,services:"",policePresence:""}]},{cityName:"Seattle, WA",cityDescription:"The CHAZ Zone has been indefinitely extended for your \n                            market, Visit Pike Place and the Pier to find plenty\n                            of similar fellows and those willing to invest to \n                            new ideas and 'Start-Ups'",cityControl:"Unknown",locationsLocal:[{locationName:"North Gate",avgQuality:1,priceRanking:1,minQuantity:0,maxQuantity:75,services:["bank"],policePresence:""},{locationName:"Green Lake",avgQuality:1,priceRanking:1.25,minQuantity:20,maxQuantity:150,services:["shark"],policePresence:""},{locationName:"University District",avgQuality:3,priceRanking:2.5,minQuantity:0,maxQuantity:50,services:["party"],policePresence:""},{locationName:"Capitol Hill",avgQuality:1,priceRanking:1.5,minQuantity:10,maxQuantity:100,services:"",policePresence:""},{locationName:"Sodo",avgQuality:1,priceRanking:.75,minQuantity:0,maxQuantity:200,services:"",policePresence:""},{locationName:"Magnolia",avgQuality:1,priceRanking:1.25,minQuantity:0,maxQuantity:250,services:"",policePresence:""}]}],j=[{type:"debt",msgArray:["Well well, here we are again... You got what you owe me? Or you just want me to make you bleed some more?","You don't got much time left... I hope you came with some good news...","I am feeling generous today, I will only add another 15%... Ha ha I am just yankin your chain... for now...","I just want you to know... that my sisters, nephews, cousin, really appreciates your contribution to their private schooling..."]},{type:"clear",msgArray:["Well well, here we are again... What will it be this time?"]}],$=()=>{((...e)=>{e.length<1&&(window.player1=((...e)=>{let n={name:e[0]||"That Dope Guy",currentDay:e[1]||1,maxDays:e[2]||30,cashOnHand:e[3]||200,bankAccount:e[4]||0,debt:e[5]||{value:250,taxRate:.08},guns:e[6]||[],health:e[7]||100,maxItems:e[8]||100,currentNumOfItems:e[9]||0,lostDrugs:e[10]||[],luckLevel:e[11]||1,currentLocationCity:e[12]||"Seattle, WA",currentLocal:e[13]||"Capitol Hill",currentTransportMethod:e[14]||"on the Bus",timeOfDay:e[15]||"Morning",playerInventory:[{name:"Nothing Here",quantity:0,price:0,quality:"None"}]};return{playerData:n,changeHealth:e=>{n.health+=e,console.log(`Player Health: ${n.health}`)},dumpProduct:e=>{console.log(n.playerInventory);for(let[t,r]of n.playerInventory.entries())if(console.log(r),r.name===e){n.playerInventory.splice(t,1),n.currentNumOfItems-=r.quantity,n.currentNumOfItems<1&&n.playerInventory.push(I("Nothing Here",0,0,0)),n.lostDrugs.push(r),console.log(n.lostDrugs);break}}}})())})();let e=window.player1;const n=w();var t;Q(n),C(e.playerData.currentLocal),t=e.playerData.currentTransportMethod,document.getElementById("currentTransportMethod").innerText=t,(e=>{const n=document.querySelectorAll(".locationContainer button"),t=(e=>{for(let n of U)if(n.cityName==e)return n})(e);let r=0;n.forEach((e=>{e.textContent=t.locationsLocal[r].locationName,e.id=t.locationsLocal[r].locationName.replace(" ",""),e.addEventListener("click",(()=>{Y(e.textContent)})),r++}))})(e.playerData.currentLocationCity),document.getElementById("btnLoanShark").addEventListener("click",(()=>{console.log("click"),(()=>{const e=document.getElementById("gameContainer"),n=document.createElement("div");n.classList.add("narrativeContainer");const t=document.createElement("div");t.textContent=(()=>{let e=window.player1;return console.log(j[0].msgArray.length),e.playerData.debt>0?(console.log(j[0].msgArray[Math.random()*(j[0].msgArray.length-1)]),j[0].msgArray[Math.random()*(j[0].msgArray.length-1)]):(console.log(j[1].msgArray[Math.random()*(j[1].msgArray.length-1)]),j[1].msgArray[Math.random()*(j[1].msgArray.length-1)])})(),n.appendChild(t),e.appendChild(n)})()}),{once:!0}),b("cashDisplay",e.playerData.cashOnHand),b("bankDisplay",e.playerData.bankAccount),b("debtDisplay",e.playerData.debt.value),f(e.playerData.health),S(),R(),E(),H(),T.querySelector(".dayCount #totalDayCount").textContent=window.player1.playerData.maxDays,M()};console.log("Testing..."),document.getElementById("btnNewGame").addEventListener("click",(()=>{h(["What is up my new friend!? I have heard good things, or we wouldn't be conversating here at the moment, would we?","Well, if we're getting down to business... I don't touch the stuff my self, but I know a guy and I have this stack of cash here to get you started. Hit up the local dealer and pick up the supplies needed to start your empire my friend! Sky's the limit and the only color we see is GREEEN!!"],$)}),{once:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,